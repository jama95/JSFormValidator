{"version":3,"file":"FormValidator.min.js","sources":["FormValidator.js"],"sourcesContent":["(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"exports\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(exports);\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports);\n    global.FormValidator = mod.exports.FormValidator;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.FormValidator = FormValidator;\n  //#region config\n  const options = {\n    ignoredFieldsNames: \"\",\n    validMessageClass: \"valid-feedback\",\n    invalidMessageClass: \"invalid-feedback\",\n    validClass: \"is-valid\",\n    invalidClass: \"is-invalid\",\n    validLabelClass: \"text-success\",\n    invalidLabelClass: \"text-danger\",\n    inlineMessageClass: \"fv-msg\",\n    topMessagesClass: \"alert\",\n    validMessagesClass: \"alert-success\",\n    invalidMessagesClass: \"alert-danger\",\n    validMessagesPosition: \"inline\",\n    invalidMessagesPosition: \"inline\",\n    topMessagesTemplate: `<div class=\"{topMessagesClass} {valid_invalid}\" target=\"#{formID}\" data-fv-top-{vi}><h4>{title}</h4><ul>{fields&messagesList}</ul></div>`,\n    scrollToTopOnInvalid: false,\n    addValidClassOnAll: false,\n    validateHiddenFields: false,\n    validMessageCallback: undefined,\n    invalidMessageCallback: undefined,\n    form: \"form\",\n    parentField: \".fv-group\",\n    fieldModifyAttribute: \"data-fv-modifiers\",\n    fieldValidateAttribute: \"data-fv-validators\",\n    fieldInvalidMessageAttribute: \"data-fv-invalid-msg\",\n    fieldValidMessageAttribute: \"data-fv-valid-msg\",\n    fieldHelpMessageAttribute: \"data-fv-help-msg\",\n    modifyOnInput: true,\n    validateOnInput: false,\n    validateOnBlur: true,\n    validateCheckboxRadioOnClick: true,\n    showHelpMessagesOnFocus: true,\n    addSuggestions: true,\n    suggestionConfig: {\n      maxHeight: \"150px\",\n      containerClass: \"fv-suggestion_container\",\n      optionClass: \"fv-suggestion_option\"\n    },\n    suggestionAttribute: \"data-fv-suggestions\",\n    lengthRestrictAttribute: \"data-fv-text-length\",\n    lengthRestrictInfo: \"count\",\n    passwordSpecialChars: /[\\x21\\x40\\x23\\x24\\x25\\x5E\\x26\\x2A\\x5F\\x2D\\x2B\\x3D]/,\n    addPasswordInfo: true,\n    passwordInfoClass: \"card\"\n  };\n  const language = {\n    locale: \"en-US\",\n    currencyCode: \"USD\",\n    dateFormat: \"YYYY-MM-DD\",\n    timeFormat: \"HH:mm:ss\",\n    validTitle: \"Valid form data!\",\n    invalidTitle: \"Invalid form data!\",\n    notConfirmed: \"Could not be validated.\",\n    inv_required: \"Is required.\",\n    inv_date: \"Is not a valid date.\",\n    inv_time: \"Is not a valid time.\",\n    inv_telephone: \"Is not a valid phone number.\",\n    inv_ipv4: \"Is not a valid IPv4 address.\",\n    inv_ipv6: \"Is not a valid IPv6 address.\",\n    inv_domain: \"Is not a valid domain.\",\n    inv_email: \"Is not a valid e-mail address.\",\n    inv_url: \"Is not a valid URL.\",\n    inv_numbers: \"Is not a valid number.\",\n    inv_numberMax: \"Must be less than or equal to {max}.\",\n    inv_numberMin: \"Must be greater than or equal to {min}.\",\n    inv_numberRange: \"Must match the range {range}.\",\n    inv_numberEqual: \"Must be equal to {equal}.\",\n    inv_numberStep: \"Must increase by {step}.\",\n    inv_lengthMax: \"Must 1[have]1|2[choose]2 a maximum of {max} 3[character(s)]3|4[file(s)]4|5[option(s)]5.\",\n    inv_lengthMin: \"Must 1[have]1|2[choose]2 a minimum of {min} 3[character(s)]3|4[file(s)]4|5[option(s)]5.\",\n    inv_lengthRange: \"Must 1[have]1|2[choose]2 between {min} and {max} 3[characters]3|4[files]4|5[options]5.\",\n    inv_lengthEqual: \"Must 1[have]1|2[choose]2 {equal} 3[character(s)]3|4[file(s)]4|5[option(s)]5.\",\n    inv_letters: \"Can oly contain letters.[ Also can contain {extra}]\",\n    inv_regexp: \"Is not a valid value.\",\n    inv_alphanumeric: \"Can only contain letters and numbers.[ Also can contain {extra}]\",\n    inv_color: \"Is not a valid color format.\",\n    inv_file_size: \"File(s) size is too large (max: {max}).\",\n    inv_file_type: \"File(s) type must be: {type}.\",\n    inv_file_extension: \"File(s) extension must be: {extension}.\",\n    inv_image_dimension: \"Image(s) dimensions are not valid.\",\n    inv_image_heigh: \"Image(s) heigh must not exceed: {max}px.\",\n    inv_image_width: \"Image(s) width must not exceed: {max}px.\",\n    inv_image_ratio: \"Image aspect ratio is not valid.\",\n    inv_credit_card: \"Credit card number is not valid.\",\n    inv_cvv: \"CVV number is not valid.\",\n    inv_confirmation: \"[The values] do not match.\",\n    inv_security_answer: \"Security question answer is not valid.\",\n    inv_strength: \"Password is not strong enough.\",\n    passwordConditionsTitle: \"Password must contain:\",\n    passwordConditionUppercase: \"Uppercase letter(s).\",\n    passwordConditionLowercase: \"Lowercase letter(s).\",\n    passwordConditionSpecialChars: \"Special character(s).\",\n    passwordConditionNumericChars: \"Numeric character(s).\",\n    passwordConditionLength: \"At least 8 characters.\",\n    passwordStrengthVeryWeak: \"Very weak &#x1F628;\",\n    passwordStrengthWeak: \"Weak &#x1F61E;\",\n    passwordStrengthNormal: \"Normal &#x1F610;\",\n    passwordStrengthStrong: \"Strong &#x1F601;\",\n    passwordStrengthVeryStrong: \"Very Strong &#x1F60E;\"\n  };\n  const configuration = {\n    validators: {},\n    asyncValidators: {},\n    modifiers: {},\n    stopValidation: false,\n    onBeforeValidate: {},\n    onValid: {},\n    onInvalid: {},\n    onAfterValidate: {},\n    validMessages: {},\n    invalidMessages: {},\n    language: language\n  };\n  const telephoneFormats = {\n    EC: [/^(?:0|\\x2B593\\s?)(?:\\d{2}(?:\\s|-)?)\\d{3}(?:\\s|-)?\\d{4}$/, /^(?:(?:0|\\x2B593\\s?)[2-7]\\s?)?\\d{7}$/]\n  };\n  const cardInfo = {\n    AMEX: {\n      first: [3],\n      length: {\n        min: 15,\n        max: 15\n      },\n      cvv: 4\n    },\n    VISA: {\n      first: [4],\n      length: {\n        min: 16,\n        max: 16\n      },\n      cvv: 3\n    },\n    MAST: {\n      first: [2, 5],\n      length: {\n        min: 16,\n        max: 16\n      },\n      cvv: 3\n    },\n    DISC: {\n      first: [6],\n      length: {\n        min: 16,\n        max: 16\n      },\n      cvv: 3\n    }\n  };\n  //#endregion config\n\n  //#region modifiers\n  /* Converts the text to lowercase */\n  configuration.modifiers[\"lower\"] = {\n    name: \"lower\",\n    modifierFunction: function (value) {\n      return value.toLowerCase();\n    }\n  };\n\n  /* Converts the text to uppercase */\n  configuration.modifiers[\"upper\"] = {\n    name: \"upper\",\n    modifierFunction: function (value) {\n      return value.toUpperCase();\n    }\n  };\n\n  /* Converts the first letter of each word in the text to uppercase */\n  configuration.modifiers[\"capital\"] = {\n    name: \"capital\",\n    modifierFunction: function (value) {\n      return capitalizedWords(value);\n    }\n  };\n\n  /* Converts the first letter of the text to uppercase */\n  configuration.modifiers[\"sentence\"] = {\n    name: \"sentence\",\n    modifierFunction: function (value) {\n      return sentenceCase(value);\n    }\n  };\n\n  /* Converts the first letter of each word in the text to uppercase and removes all the spaces */\n  configuration.modifiers[\"camel\"] = {\n    name: \"camel\",\n    modifierFunction: function (value) {\n      return camel_pascal(value, false);\n    },\n    modifyOnInput: false\n  };\n\n  /* Converts the first letter of each word(except for the first) in the text to uppercase and removes all the spaces */\n  configuration.modifiers[\"pascal\"] = {\n    name: \"pascal\",\n    modifierFunction: function (value) {\n      return camel_pascal(value, true);\n    },\n    modifyOnInput: false\n  };\n\n  /* Convert a number to currency format */\n  configuration.modifiers[\"currency\"] = {\n    name: \"currency\",\n    modifierFunction: function (value, form, input) {\n      const d = input.getAttribute(\"data-fv-decimals\");\n      const locale = input.getAttribute(\"data-fv-locale\") ?? undefined,\n        currency = input.getAttribute(\"data-fv-currency\") ?? undefined,\n        decimals = d ? parseInt(d) : undefined;\n      if (!input.hasAttribute(\"data-fv-currency_original\")) {\n        input.setAttribute(\"data-fv-currency_original\", value);\n      }\n      input.addEventListener(\"focus\", () => {\n        input.value = input.getAttribute(\"data-fv-currency_original\") ?? value;\n      });\n      input.addEventListener(\"input\", () => {\n        input.setAttribute(\"data-fv-currency_original\", input.value);\n      });\n      value = input.getAttribute(\"data-fv-currency_original\");\n      if (/[^\\d.]/.test(value)) return value;\n      return currencyFormat(value, language, locale, currency, decimals);\n    },\n    modifyOnInput: false\n  };\n\n  /* Removes the leading and trailing white space and line terminator characters from a string */\n  configuration.modifiers[\"trim\"] = {\n    name: \"trim\",\n    modifierFunction: function (value) {\n      return value.trim();\n    },\n    modifyOnInput: false\n  };\n\n  /* Removes the leading white space and line terminator characters from a string */\n  configuration.modifiers[\"trim_left\"] = {\n    name: \"trim_left\",\n    modifierFunction: function (value) {\n      return value.trimStart();\n    },\n    modifyOnInput: false\n  };\n\n  /* Removes the trailing white space and line terminator characters from a string */\n  configuration.modifiers[\"trim_right\"] = {\n    name: \"trim_right\",\n    modifierFunction: function (value) {\n      return value.trimEnd();\n    },\n    modifyOnInput: false\n  };\n  //#endregion modifiers\n\n  //#region date\n  /* Checks if the field value matches with the specified date format */\n  configuration.validators[\"date\"] = {\n    name: \"date\",\n    validatorFunction: function (value, form, field, options, lang) {\n      const format = field.getAttribute(\"data-fv-date_format\") ?? lang.dateFormat;\n      const check = checkDateFormat(value, format);\n      if (check == \"no\") {\n        this.invalidMessage = lang.notConfirmed;\n        return false;\n      }\n      if (check == \"invalid\") {\n        this.invalidMessage = lang.inv_date;\n        return false;\n      }\n      return true;\n    },\n    invalidMessage: language.notConfirmed,\n    messageKey: \"date\"\n  };\n\n  /* Checks if the field value matches with the specified time format   */\n  configuration.validators[\"time\"] = {\n    name: \"time\",\n    validatorFunction: function (value, form, field, options, lang) {\n      const format = field.getAttribute(\"data-fv-time_format\") ?? lang.timeFormat;\n      const check = checkTimeFormat(value, format);\n      if (check == \"no\") {\n        this.invalidMessage = lang.notConfirmed;\n        return false;\n      }\n      if (check == \"invalid\") {\n        this.invalidMessage = lang.inv_time;\n        return false;\n      }\n      return true;\n    },\n    invalidMessage: language.notConfirmed,\n    messageKey: \"time\"\n  };\n  //#endregion date\n\n  //#region default\n  /* Checks if the field has a value */\n  configuration.validators[\"required\"] = {\n    name: \"required\",\n    validatorFunction: function (value, form, field, options, lang) {\n      const name = field.getAttribute(\"name\");\n      if (field instanceof HTMLInputElement && field.type == \"checkbox\") {\n        return form.querySelectorAll(`input[type=\"checkbox\"][name=\"${name}\"]:checked`).length > 0;\n      } else if (field instanceof HTMLInputElement && field.type == \"radio\") {\n        return form.querySelectorAll(`input[type=\"radio\"][name=\"${name}\"]:checked`).length > 0;\n      } else {\n        return value.trim().length > 0;\n      }\n    },\n    invalidMessage: language.inv_required,\n    messageKey: \"required\"\n  };\n  let lengthMessage = language.notConfirmed;\n\n  /**\n   * Set the invalid length message\n   * @param {boolean} file True if it is a file input\n   * @param {boolean} multiple True if it is a multiple select\n   * @param {boolean} check True if it is a checkbox input\n   * @returns {string} Length message\n   */\n  function setLengthMessage(file, multiple, check) {\n    if (file) return lengthMessage.replace(/1\\x5B.+2\\x5B/, \"\").replace(\"]2\", \"\").replace(/3\\x5B.+4\\x5B/, \"\").replace(/\\x5D4.+\\x5D5/, \"\");else if (multiple || check) return lengthMessage.replace(/1\\x5B.+2\\x5B/, \"\").replace(\"]2\", \"\").replace(/3\\x5B.+5\\x5B/, \"\").replace(\"]5\", \"\");else return lengthMessage.replace(/\\x5D1.+\\x5D2/, \"\").replace(\"1[\", \"\").replace(/\\x5D3.+\\x5D5/, \"\").replace(\"3[\", \"\");\n  }\n\n  /* Checks if the field value has the correct length */\n  configuration.validators[\"length\"] = {\n    name: \"length\",\n    validatorFunction: function (value, form, field, options, lang) {\n      const length = field.getAttribute(\"data-fv-length\");\n      if (!length) {\n        this.invalidMessage = lang.notConfirmed;\n        return false;\n      }\n      let val = value.length,\n        file = false,\n        multiple = false,\n        checkbox = false;\n      if (field instanceof HTMLInputElement && field.type == \"file\" && field.files) {\n        file = true;\n        val = field.files.length;\n      }\n      if (field instanceof HTMLInputElement && field.type == \"checkbox\") {\n        val = document.querySelectorAll(`input[name=${field.name}]:checked`).length;\n        checkbox = true;\n      }\n      if (field instanceof HTMLSelectElement && field.hasAttribute(\"multiple\")) {\n        multiple = true;\n        val = field.selectedOptions.length;\n      }\n      const check = checkStringLength(val, length);\n      switch (check[0]) {\n        case \"max\":\n          lengthMessage = lang.inv_lengthMax.replace(\"{max}\", check[1]);\n          this.invalidMessage = setLengthMessage(file, multiple, checkbox);\n          return false;\n        case \"min\":\n          lengthMessage = lang.inv_lengthMin.replace(\"{min}\", check[1]);\n          this.invalidMessage = setLengthMessage(file, multiple, checkbox);\n          return false;\n        case \"range\":\n          lengthMessage = lang.inv_lengthRange.replace(\"{max}\", check[2]).replace(\"{min}\", check[1]);\n          this.invalidMessage = setLengthMessage(file, multiple, checkbox);\n          return false;\n        case \"equal\":\n          lengthMessage = lang.inv_lengthEqual.replace(\"{equal}\", check[1]);\n          this.invalidMessage = setLengthMessage(file, multiple, checkbox);\n          return false;\n        case \"no\":\n          this.invalidMessage = lang.notConfirmed;\n          return false;\n      }\n      return true;\n    },\n    invalidMessage: lengthMessage,\n    messageKey: \"length\"\n  };\n\n  /**\n   * Set the invalid number message\n   * @param {string[]} check Response of check function\n   * @param {Lang} lang Language\n   * @returns {string} Number message\n   */\n  function setNumberMessage(check, lang) {\n    switch (check[0]) {\n      case \"max\":\n        return lang.inv_numberMax.replace(\"{max}\", check[1]);\n      case \"min\":\n        return lang.inv_numberMin.replace(\"{min}\", check[1]);\n      case \"range\":\n        return lang.inv_numberRange.replace(\"{range}\", `${check[1]}::${check[2]}`);\n      case \"equal\":\n        return lang.inv_numberEqual.replace(\"{equal}\", check[1]);\n      case \"step\":\n        return lang.inv_numberStep.replace(\"{step}\", check[1]);\n      default:\n        return lang.inv_numbers;\n    }\n  }\n\n  /* Checks if the field value contains only numbers and if it matches with the conditions */\n  configuration.validators[\"numbers\"] = {\n    name: \"numbers\",\n    validatorFunction: function (value, form, field, options, lang) {\n      const allow = (field.getAttribute(\"data-fv-numbers_allow\") ?? \"\").split(/[,|-]+\\s*|\\s+/);\n      if (allow.includes(\"noPositive\") && !value.includes(\"-\")) return false;\n      if (!allow.includes(\"negative\") && !allow.includes(\"noPositive\") && value.includes(\"-\")) return false;\n      if (!allow.includes(\"decimal\") && value.includes(\".\")) return false;\n      if (/^-?\\d+(\\x2E\\d+)?$/.test(value)) {\n        const range = field.getAttribute(\"data-fv-numbers_range\") ?? \"\",\n          step = field.getAttribute(\"data-fv-numbers_step\") ?? \"\",\n          check = checkRangeStep(allow, parseFloat(value), range, step);\n        if (check[0][0] && check[0][0] != \"ok\") {\n          this.invalidMessage = setNumberMessage(check[0], lang);\n          return false;\n        }\n        if (check[1][0] && check[1][0] != \"ok\") {\n          this.invalidMessage = setNumberMessage(check[1], lang);\n          return false;\n        }\n      } else return false;\n      return true;\n    },\n    invalidMessage: language.inv_numbers,\n    messageKey: \"numbers\"\n  };\n\n  /* Checks if the field value contains only letters and/or the allowed characters */\n  configuration.validators[\"letters\"] = {\n    name: \"letters\",\n    validatorFunction: function (value, form, field, options, lang) {\n      const allow = field.getAttribute(\"data-fv-letters_allow\") ?? \"\";\n      const regex = new RegExp(`^[a-z${escapeRegExp(allow)}]+$`, \"i\");\n      if (!regex.test(value)) {\n        if (allow.length == 0) this.invalidMessage = language.inv_letters.replace(/\\x5B.+\\x5D/, \"\");else this.invalidMessage = language.inv_letters.replace(\"[\", \"\").replace(\"]\", \"\").replace(/\\x7B.+\\x7D/, allow);\n        return false;\n      }\n      return true;\n    },\n    invalidMessage: language.notConfirmed,\n    messageKey: \"letters\"\n  };\n\n  /**\n   * Set the invalid alphanumeric message\n   * @param {string} allow Allowed characters\n   * @returns {string} Alphanumeric message\n   */\n  function setAlphanumericMessage(allow) {\n    if (allow.length == 0) return language.inv_alphanumeric.replace(/\\x5B.+\\x5D/i, \"\");else return language.inv_alphanumeric.replace(\"[\", \"\").replace(\"]\", \"\").replace(/\\x7B\\w+\\x7D/, allow);\n  }\n\n  /* Checks if the field value contains only numbers and/or letters and/or the allowed characters */\n  configuration.validators[\"alphanumeric\"] = {\n    name: \"alphanumeric\",\n    validatorFunction: function (value, form, field, options, lang) {\n      const allow = field.getAttribute(\"data-fv-letters_allow\") ?? \"\";\n      const regex = new RegExp(`^[a-z\\\\d${escapeRegExp(allow)}]+$`, \"i\");\n      if (!regex.test(value)) {\n        this.invalidMessage = setAlphanumericMessage(allow);\n        return false;\n      }\n      return true;\n    },\n    invalidMessage: language.notConfirmed,\n    messageKey: \"alphanumeric\"\n  };\n\n  /* Checks if the field value matches with the specified regular expression */\n  configuration.validators[\"regex\"] = {\n    name: \"regex\",\n    validatorFunction: function (value, form, field, options, lang) {\n      const regex = field.getAttribute(\"data-fv-regex\") ?? \"\";\n      const flags = field.getAttribute(\"data-fv-flags\") ?? undefined;\n      if (!regex) return false;\n      return new RegExp(regex, flags).test(value);\n    },\n    invalidMessage: language.inv_regexp,\n    messageKey: \"regex\"\n  };\n\n  /* Checks if the field value matches with the specified time format   */\n  configuration.validators[\"telephone\"] = {\n    name: \"telephone\",\n    validatorFunction: function (value, form, field, options, lang) {\n      const format = field.getAttribute(\"data-fv-telephone_format\") ?? \"EC\";\n      if (telephoneFormats[format]) return new RegExp(telephoneFormats[format].join(\"|\").replace(/\\//g, \"\")).test(value);\n      return false;\n    },\n    invalidMessage: language.inv_telephone,\n    messageKey: \"telephone\"\n  };\n\n  // Regex compatible with \"test\" and \"match\"\n  const RGB = \"(rgb\\\\x28(25[0-5]|2[0-4]\\\\d|1?\\\\d{1,2})\\\\s*\\\\x2C\\\\s*(25[0-5]|2[0-4]\\\\d|1?\\\\d{1,2})\\\\s*\\\\x2C\\\\s*(25[0-5]|2[0-4]\\\\d|1?\\\\d{1,2})\\\\x29)\";\n  const RGBA = \"(rgba\\\\x28(25[0-5]|2[0-4]\\\\d|1?\\\\d{1,2})\\\\s*\\\\x2C\\\\s*(25[0-5]|2[0-4]\\\\d|1?\\\\d{1,2})\\\\s*\\\\x2C\\\\s*(25[0-5]|2[0-4]\\\\d|1?\\\\d{1,2})\\\\s*\\\\x2C\\\\s*(0?\\\\x2E\\\\d+|[01])\\\\x29)\";\n  const HSL = \"(hsl\\\\x28(360|3[0-5]\\\\d|[12]?\\\\d{1,2})\\\\s?\\\\x2C\\\\s?(100|[1-9]?\\\\d)\\\\x25\\\\s?\\\\x2C\\\\s?(100|[1-9]?\\\\d)\\\\x25\\\\x29)\";\n  const HSLA = \"(hsla\\\\x28(360|3[0-5]\\\\d|[12]?\\\\d{1,2})\\\\s?\\\\x2C\\\\s?(100|[1-9]?\\\\d)\\\\x25\\\\s?\\\\x2C\\\\s?(100|[1-9]?\\\\d)\\\\x25\\\\s*\\\\x2C\\\\s*(0\\\\x2E\\\\d+|[01])\\\\x29)\";\n  const CMYK = \"(CMYK\\\\x28(100|[1-9]?\\\\d)\\\\x25\\\\s?\\\\x2C\\\\s?(100|[1-9]?\\\\d)\\\\x25\\\\s?\\\\x2C\\\\s?(100|[1-9]?\\\\d)\\\\x25\\\\s*\\\\x2C\\\\s*(100|[1-9]?\\\\d)\\\\x25\\\\x29)\";\n  const HEX = \"((?:\\\\x23(?:[a-f\\\\d]{2}){3}(?:[a-f\\\\d]{2})?)|(?:\\\\x23[a-f\\\\d]{3}[a-f\\\\d]?))\";\n\n  /* Checks if the field value matches with the specified color formats   */\n  configuration.validators[\"color\"] = {\n    name: \"color\",\n    validatorFunction: function (value, form, field, options, lang) {\n      const colors = field.getAttribute(\"data-fv-colors\") ?? \"\";\n      const regex = [];\n      if (colors.trim().length == 0) regex.push(`^${RGB}$|^${RGBA}$|^${HSL}$|^${HSLA}$|^${CMYK}$|^${HEX}$`);else {\n        if (colors.search(/rgba?/i)) regex.push(`^${RGB}$|^${RGBA}$`);\n        if (colors.search(/hsla?/i)) regex.push(`^${HSL}$|^${HSLA}$`);\n        if (colors.search(/CMYK/i)) regex.push(`^${CMYK}$`);\n        if (colors.search(/(?:hex)|#/i)) regex.push(`^${HEX}$`);\n      }\n      const check = new RegExp(regex.length > 1 ? regex.join(\"|\") : regex[0], \"i\");\n      if (check.test(value)) return true;\n      return false;\n    },\n    invalidMessage: language.inv_color,\n    messageKey: \"color\"\n  };\n  //#endregion default\n\n  //#region ec\n  /* Checks if the field value has a real Ecuadorian identification card number */\n  configuration.validators[\"ec_cedula\"] = {\n    name: \"ec_cedula\",\n    validatorFunction: function (value, form, field, options, lang) {\n      if (/\\D/.test(value)) return false;\n      if (value.length != 10) return false;\n      const digits = value.split(\"\").map(Number);\n      if (digits[2] >= 6) return false;\n      const province_code = parseInt(value.substring(0, 2));\n      if (province_code == 0 || province_code > 24 || province_code != 30) return false;\n      const checker = digits.pop();\n      let tot = luhn(digits);\n      tot = checker != 0 ? 10 - tot : tot;\n      return tot === checker;\n    },\n    invalidMessage: \"El número de cédula no es válido.\",\n    messageKey: \"ec_cedula\"\n  };\n\n  /**\n   * Checks the lasted numbers of the RUC\n   * @param {number[]} digits Array of RUC numbers\n   * @param {string} value String RUC number\n   * @returns {boolean} True if is ok\n   */\n  function checkLasted(digits, value) {\n    if (digits[2] < 6 && value.substring(10) != \"001\") return false;\n    if (digits[2] == 9 && value.substring(10) == \"000\") return false;\n    if (digits[2] == 6 && value.substring(9) != \"0000\") return false;\n    return true;\n  }\n\n  /* Checks if the field value has a real Ecuadorian RUC number */\n  configuration.validators[\"ec_ruc\"] = {\n    name: \"ec_ruc\",\n    validatorFunction: function (value, form, field, options) {\n      if (/\\D/.test(value)) return false;\n      if (value.length != 13) return false;\n      const digits = value.split(\"\").map(Number);\n      if (digits[2] == 7 || digits[2] == 8) return false;\n      const province_code = parseInt(value.substring(0, 2));\n      if (province_code == 0 || province_code > 24 || province_code != 30) return false;\n      const toCheck = digits.slice(0, 10);\n      const check = digits[2] < 6 ? 10 : 11;\n      if (!checkLasted(digits, value)) return false;\n      if (digits[2] == 6) toCheck.pop();\n      const checker = toCheck.pop();\n      let tot = digits[2] < 6 ? luhn(digits) : module11(digits);\n      tot = checker != 0 ? check - tot : tot;\n      return tot === checker;\n    },\n    invalidMessage: \"El número de ruc no es válido\",\n    messageKey: \"ec_ruc\"\n  };\n  //#endregion ec\n\n  //#region file\n  /* Checks if the size of the selected files is correct  */\n  configuration.validators[\"file_size\"] = {\n    name: \"file_size\",\n    validatorFunction: function (value, form, field, options, lang) {\n      if (field instanceof HTMLInputElement && field.type == \"file\") {\n        const files = field.files;\n        if (files) {\n          const sizeSTR = field.getAttribute(\"data-fv-file_max_size\") ?? \"5MB\";\n          const maxSize = sizeStringToBytes(sizeSTR);\n          let check = true;\n          for (const file of Array.from(files)) {\n            if (file.size > maxSize) {\n              check = false;\n              break;\n            }\n          }\n          if (!check) {\n            this.invalidMessage = lang.inv_file_size.replace(\"{max}\", sizeSTR);\n          }\n          return check;\n        }\n      }\n      return false;\n    },\n    invalidMessage: language.notConfirmed,\n    messageKey: \"file_size\"\n  };\n\n  /* Checks if the selected files are of the correct MIME type */\n  configuration.validators[\"file_type\"] = {\n    name: \"file_type\",\n    validatorFunction: function (value, form, field, options, lang) {\n      if (field instanceof HTMLInputElement && field.type === \"file\") {\n        const files = field.files;\n        if (files) {\n          const typeList = (field.getAttribute(\"data-fv-file_type\") ?? \"\").split(/[,|-]+\\s*|\\s+/);\n          const check = Array.from(files).every(file => typeList.includes(file.type));\n          if (!check) {\n            this.invalidMessage = lang.inv_file_type.replace(\"{type}\", `(${typeList.join(\", \")})`);\n          }\n          return check;\n        }\n      }\n      return false;\n    },\n    invalidMessage: language.notConfirmed,\n    messageKey: \"file_type\"\n  };\n\n  /* Checks if the selected files has the correct extension */\n  configuration.validators[\"file_extension\"] = {\n    name: \"file_extension\",\n    validatorFunction: function (value, form, field, options, lang) {\n      if (field instanceof HTMLInputElement && field.type === \"file\") {\n        const files = field.files;\n        if (files) {\n          const extensionList = (field.getAttribute(\"data-fv-file_extension\") ?? \"\").split(/[,|-]+\\s*|\\s+/);\n          const check = Array.from(files).every(file => extensionList.includes(file.name.slice(file.name.lastIndexOf(\".\") + 1)));\n          if (!check) {\n            this.invalidMessage = lang.inv_file_extension.replace(\"{extension}\", `(${extensionList.join(\", \")})`);\n          }\n          return check;\n        }\n      }\n      return false;\n    },\n    invalidMessage: language.notConfirmed,\n    messageKey: \"file_extension\"\n  };\n\n  /* Checks if the selected images have the correct dimensions */\n  configuration.asyncValidators[\"image_dimension\"] = {\n    name: \"image_dimension\",\n    validatorFunction: async function (value, form, field, options, lang) {\n      if (!(field instanceof HTMLInputElement && field.type === \"file\")) return false;\n      const dimension = field.getAttribute(\"data-fv-image_dimension\") ?? \"\";\n      if (dimension.trim().length === 0) return false;\n      const files = field.files;\n      if (!files) return false;\n      const [width, height] = dimension.split(\"x\").map(Number);\n      let check = false;\n      for (const file of Array.from(files)) {\n        if (!file.type.includes(\"image\")) {\n          this.invalidMessage = lang.inv_file_type.replace(\"{type}\", \"image/*\");\n          check = false;\n          break;\n        }\n        const dim = await getImageDimensions(file);\n        check = dim[0] == width && dim[1] == height;\n        if (!check) {\n          this.invalidMessage = lang.inv_image_dimension;\n          break;\n        }\n      }\n      return check;\n    },\n    invalidMessage: language.notConfirmed,\n    messageKey: \"image_dimension\"\n  };\n\n  /* Checks if the selected images have the correct height */\n  configuration.asyncValidators[\"image_height\"] = {\n    name: \"image_height\",\n    validatorFunction: async function (value, form, field, options, lang) {\n      if (!(field instanceof HTMLInputElement && field.type === \"file\")) return false;\n      const height = field.getAttribute(\"data-fv-image_height\") ?? \"\";\n      if (height.trim().length === 0) return false;\n      const files = field.files;\n      if (!files) return false;\n      let check = false;\n      for (const file of Array.from(files)) {\n        if (!file.type.includes(\"image\")) {\n          this.invalidMessage = lang.inv_file_type.replace(\"{type}\", \"image/*\");\n          check = false;\n          break;\n        }\n        const dim = await getImageDimensions(file);\n        check = dim[0] <= parseFloat(height);\n        if (!check) {\n          this.invalidMessage = lang.inv_image_heigh.replace(\"{max}\", height);\n          break;\n        }\n      }\n      return check;\n    },\n    invalidMessage: language.notConfirmed,\n    messageKey: \"image_height\"\n  };\n\n  /* Checks if the selected images have the correct width */\n  configuration.asyncValidators[\"image_width\"] = {\n    name: \"image_width\",\n    validatorFunction: async function (value, form, field, options, lang) {\n      if (!(field instanceof HTMLInputElement && field.type === \"file\")) return false;\n      const width = field.getAttribute(\"data-fv-image_width\") ?? \"\";\n      if (width.trim().length === 0) return false;\n      const files = field.files;\n      if (!files) return false;\n      let check = false;\n      for (const file of Array.from(files)) {\n        if (!file.type.includes(\"image\")) {\n          this.invalidMessage = lang.inv_file_type.replace(\"{type}\", \"image/*\");\n          check = false;\n          break;\n        }\n        const dim = await getImageDimensions(file);\n        check = dim[0] <= parseFloat(width);\n        if (!check) {\n          this.invalidMessage = lang.inv_image_width.replace(\"{max}\", width);\n          break;\n        }\n      }\n      return check;\n    },\n    invalidMessage: language.notConfirmed,\n    messageKey: \"image_width\"\n  };\n  //#endregion file\n\n  //#region net\n  // Regex according to RFC791 and RFC4632, compatible with \"test\" and \"match\"\n  const IPv4Regex = \"((?:25[0-5]|2[0-4]\\\\d|1?\\\\d{1,2})(?:\\\\x2E(?:25[0-5]|2[0-4]\\\\d|1?\\\\d{1,2})){3})\";\n  const IPv4Prefix = \"(\\\\x2F(?:3[0-2]|[12]?\\\\d))?\";\n  const IPv4Complete = `${IPv4Regex}${IPv4Prefix}`;\n\n  /* Checks if the field value has the correct format of an ipv4  */\n  configuration.validators[\"ipv4\"] = {\n    name: \"ipv4\",\n    validatorFunction: function (value, form, field, options, lang) {\n      const regex = new RegExp(`^${IPv4Complete}$`);\n      if (regex.test(value)) return true;\n      return false;\n    },\n    invalidMessage: language.inv_ipv4,\n    messageKey: \"ipv4\"\n  };\n\n  // Regex according to RFC4291, RFC4007 and RFC5952, compatible with \"test\" and \"match\"\n  const IPv6Regex = \"(?:((?:[\\\\da-f]{1,4}\\\\x3A){7}[\\\\da-f]{1,4})|((?:[\\\\da-f]{1,4}\\\\x3A){1,6}\\\\x3A)|((?:[\\\\da-f]{1,4}\\\\x3A){1,5}\\\\x3A[\\\\da-f]{1,4})|((?:[\\\\da-f]{1,4}\\\\x3A){1,4}(?:\\\\x3A[\\\\da-f]{1,4}){1,2})|((?:[\\\\da-f]{1,4}\\\\x3A){1,3}(?:\\\\x3A[\\\\da-f]{1,4}){1,3})|((?:[\\\\da-f]{1,4}\\\\x3A){1,2}(?:\\\\x3A[\\\\da-f]{1,4}){1,4})|((?:[\\\\da-f]{1,4}\\\\x3A)(?:\\\\x3A[\\\\da-f]{1,4}){1,5})|(\\\\x3A(?:(?:\\\\x3A[\\\\da-f]{1,4}){1,6}|\\\\x3A)))\";\n  const IPv6Zone = \"(\\\\x25[\\\\da-zA-Z\\\\x2D\\\\x5F]+)?\";\n  const IPv6Prefix = \"(\\\\x2F(?:1[0-2][0-8]?|\\\\d\\\\d?))?\";\n  const IPv6Mapped = `((\\\\x3A\\\\x3Affff\\\\x3A)${IPv4Regex}${IPv6Zone})`;\n  const IPv6Local = `(?:(fe80(?:(?:\\\\x3A[\\\\da-f]{1,4}){7}|(?:(?:\\\\x3A[\\\\da-f]{1,4}){1,5}\\\\x3A\\\\x3A)|(?:(?:\\\\x3A[\\\\da-f]{1,4}){4}\\\\x3A(?:\\\\x3A[\\\\da-f]{1,4}))|(?:(?:\\\\x3A[\\\\da-f]{1,4}){3}\\\\x3A(?:\\\\x3A[\\\\da-f]{1,4}){1,2})|(?:(?:\\\\x3A[\\\\da-f]{1,4}){2}\\\\x3A(?:\\\\x3A[\\\\da-f]{1,4}){1,3})|(?:(?:\\\\x3A[\\\\da-f]{1,4}){1}\\\\x3A(?:\\\\x3A[\\\\da-f]{1,4}){1,4})|(?:\\\\x3A(?:(?:\\\\x3A[\\\\da-f]{1,4}){1,5}|\\\\x3A))))${IPv6Zone})`;\n  const IPv6Complete = `(${IPv6Regex}${IPv6Zone}${IPv6Prefix})`;\n  const IPv6Full = `^${IPv6Mapped}$|^${IPv6Local}$|^${IPv6Complete}$`;\n\n  /**\n   * Checks the zeros rule in the ipv6 address\n   * @param {string} ip ipv6 address\n   * @returns {boolean}\n   */\n  function zeros(ip) {\n    const segments = ip.split(\"::\").flatMap(p => p.split(\":\")).filter(s => s.length > 0);\n    const OnlyOne0 = segments.filter(s => /^(0{2,4})$/.test(s));\n    if (OnlyOne0.length > 0) return false;\n    if (/^(0\\x3A){7}0$/.test(ip)) return false;\n    const noLeading0 = segments.filter(s => s === \"0\" || !s.startsWith(\"0\"));\n    if (noLeading0.length != segments.length) return false;\n    if (/\\x3A\\x3A/.test(ip)) {\n      if (/(^|\\x3A)0\\x3A\\x3A|\\x3A\\x3A0(\\x3A|$)/.test(ip)) return false;\n      const Reduced0 = 8 - segments.length;\n      const zeros = segments.map(s => s == \"0\" ? s : \"-\").join(\"\");\n      if (new RegExp(`0{${Reduced0 + 1},}`).test(zeros)) return false;\n      if (/0{2,}/.test(zeros)) {\n        const reducedIndex = ip.indexOf(\"::\");\n        const start0Index = zeros.search(/0{2,}/);\n        if (start0Index > reducedIndex) return false;\n      }\n    }\n    return true;\n  }\n\n  /* Checks if the field value has the correct format of an ipv6 */\n  configuration.validators[\"ipv6\"] = {\n    name: \"ipv6\",\n    validatorFunction: function (value, form, field, options, lang) {\n      const zerosRule = field.getAttribute(\"data-fv-ipv6_zeros\") == \"true\";\n      const regex = new RegExp(`${IPv6Full}`);\n      if (regex.test(value)) {\n        if (!new RegExp(IPv4Regex).test(value)) {\n          value = value.replace(new RegExp(IPv6Prefix.slice(0, -1)), \"\");\n          value = value.replace(new RegExp(IPv6Zone.slice(0, -1)), \"\");\n          if (zerosRule) return zeros(value);\n        }\n        return true;\n      }\n      return false;\n    },\n    invalidMessage: language.inv_ipv6,\n    messageKey: \"ipv6\"\n  };\n\n  // Regex according to RFC1034, RFC1035 and RFC3696, compatible with \"test\" and \"match\"\n  const domainRegex = \"(((?:[a-z][a-z\\\\d\\\\x2D]{0,61}[a-z\\\\d]?\\\\x2E)+)([a-z\\\\d][a-z\\\\d\\\\x2D]*[a-z\\\\d]\\\\x2E?))\";\n\n  /* Checks if the field value has the correct format of a domain name */\n  configuration.validators[\"domain\"] = {\n    name: \"domain\",\n    validatorFunction: function (value, form, field, options, lang) {\n      if (value.length > 253) return false;\n      if (/\\x2D{2,}/g.test(value)) return false;\n      const regex = new RegExp(`^${domainRegex}$`, \"i\");\n      if (!regex.test(value)) return false;\n      if (value.endsWith(\".\")) value = value.slice(0, -1);\n      const labels = value.split(\".\");\n      const TLD = labels.pop();\n      if (TLD?.search(/[^A-Z]/)) return false;\n      const subdomains = labels;\n      subdomains.filter(s => /\\x2D{2,}/.test(s));\n      if (subdomains.length != labels.length) return false;\n      let equal = false;\n      for (let i = 0; i <= labels.length - 2; i++) {\n        if (labels[i].toUpperCase() == labels[i + 1].toUpperCase()) {\n          equal = true;\n          break;\n        }\n      }\n      return !equal;\n    },\n    invalidMessage: language.inv_domain,\n    messageKey: \"domain\"\n  };\n  const Ipv4NoGroups = IPv4Regex.replace(\"((?:\", \"(?:(?:\");\n  const IPv6NoGroups = IPv6Regex.replace(/\\x28\\x28\\x3F\\x3A/g, \"(?:(?:\").replace(\"|(\\\\x3A\", \"|(?:\\\\x3A\");\n  const domainNoGroups = domainRegex.replace(\"((\", \"(?:(?:\").replace(\")(\", \")(?:\");\n\n  // Regex according to RFC5321, RFC5322 and RFC3696, compatible with \"test\" and \"match\"\n  const validCharacters = \"\\\\x21\\\\x23\\\\x24\\\\x25\\\\x26\\\\x2A\\\\x2B\\\\x2D\\\\x2E\\\\x2F\\\\x3D\\\\x3F\\\\x5E\\\\x7B\\\\x7C\\\\x7D\\\\x7E\\\\u02BC\\\\u02BD\";\n  const escapedCharacters = \"\\\\x22\\\\x2C\\\\x40\\\\x5B\\\\x5C\\\\x5D\";\n  const emailLocal = `((?:\\\\w|\\\\d|[${validCharacters}]|(?:\\\\x5C[${escapedCharacters}]))*|(?:\\\\x22(?:\\\\w|\\\\d|[${validCharacters}${escapedCharacters}])*\\\\x22))`;\n  const emailDomain = `(${domainRegex}|(?:\\\\x5B${Ipv4NoGroups}\\\\x5D)|(?:Ipv6:\\\\x5B${IPv6NoGroups}\\\\x5D))`;\n  const emailRegex = `(${emailLocal}\\\\x40${emailDomain})`;\n\n  /* Checks is the field value has the correct format of an e-mail address */\n  configuration.validators[\"email\"] = {\n    name: \"email\",\n    validatorFunction: function (value, form, field, options, lang) {\n      if (value.startsWith(\".\")) return false;\n      if (value.endsWith(\".\")) return false;\n      if (value.length > 254) return false;\n      const regex = new RegExp(`^${emailRegex}$`, \"i\");\n      const email = RegExp(regex).exec(value);\n      if (!email) return false;\n      const parts = [...email];\n      const localPart = parts[2];\n      const domainPart = parts[3];\n      if (localPart.length > 64) return false;\n      if (localPart.endsWith(\".\") || localPart.includes(\"..\")) return false;\n      if (!domainPart.includes(\"[\")) if (!configuration.validators[\"domain\"].validatorFunction(domainPart, form, field, options, lang)) return false;\n      return true;\n    },\n    invalidMessage: language.inv_email,\n    messageKey: \"email\"\n  };\n  const IPv6ZoneNoGroupsURL = IPv6Zone.replace(\"(\\\\x25\", \"(?:\\\\x2525\");\n\n  // Regex according to RFC1738, RFC3986 and RFC6874, compatible with \"test\" and \"match\"\n  const unreserved = \"a-z\\\\d\\\\x2D\\\\x2E\\\\x5F\\\\x7E\";\n  const sub_delimiters = \"\\\\x21\\\\x24\\\\x26\\\\x27\\\\x28\\\\x29\\\\x2A\\\\x2B\\\\x2C\\\\x3B\\\\x3D\";\n  const percentEncoded = \"(?:\\\\x25[a-f\\\\d]{2})\";\n  const schemePart = \"(https?\\\\x3A)\"; //\"([a-z\\\\d\\\\x2B\\\\x2D\\\\x2C]+\\\\x3A)\";\n  const authorityPart = `(\\\\x2F\\\\x2F((?:[${unreserved}${sub_delimiters}\\\\x3A]|${percentEncoded})+\\\\x40)?(localhost|${domainNoGroups}|(?:\\\\x5B(?:${IPv6NoGroups}${IPv6ZoneNoGroupsURL})\\\\x5D)|${Ipv4NoGroups})(\\\\x3A\\\\d+)?\\\\x2F?)`;\n  const pathPart = `((?:\\\\x2F(?:[${unreserved}${sub_delimiters}\\\\x3A\\\\x40]|${percentEncoded})+)*)`;\n  const queryPart = `(\\\\x3F(?:[${unreserved}${sub_delimiters}\\\\x2F\\\\x3A\\\\x3F\\\\x40]|${percentEncoded})+)?`;\n  const fragmentPart = `(\\\\x23(?:[${unreserved}${sub_delimiters}\\\\x2F\\\\x3A\\\\x3F\\\\x40]|${percentEncoded})+)?`;\n  const URLRegex = `(${schemePart}${authorityPart}${pathPart}${queryPart}${fragmentPart})`;\n\n  /* Checks if the field value is has the correct format of an URL */\n  configuration.validators[\"url\"] = {\n    name: \"url\",\n    validatorFunction: function (value, form, field, options, lang) {\n      const regex = new RegExp(`^${URLRegex}$`, \"i\");\n      if (!regex.test(value)) return false;\n      return true;\n    },\n    invalidMessage: language.inv_url,\n    messageKey: \"url\"\n  };\n  //#endregion net\n\n  //#region security\n  /* Checks if the field has a strong password */\n  configuration.validators[\"password\"] = {\n    name: \"password\",\n    validatorFunction: function (value, form, field, options, lang) {\n      const min = parseInt(field.getAttribute(\"data-fv-min_strength\") ?? \"5\", 10);\n      const strength = checkPasswordStrength(value).strength;\n      if (strength >= min) return true;\n      return false;\n    },\n    invalidMessage: language.inv_strength,\n    messageKey: \"password\"\n  };\n\n  /**\n   * Set the invalid confirmation value message\n   * @param {string} custom Custom value name\n   * @param {Lang} lang Language\n   * @returns {string} Confirmation message\n   */\n  function setConfirmationMessage(custom, lang) {\n    if (custom.length > 0) {\n      return lang.inv_confirmation.replace(/\\x5B.+\\x5D/g, custom);\n    } else {\n      return lang.inv_confirmation.replace(\"[\", \"\").replace(\"]\", \"\");\n    }\n  }\n\n  /* Checks if the field value matches the target value */\n  configuration.validators[\"confirmation\"] = {\n    name: \"confirmation\",\n    validatorFunction: function (value, form, field, options, lang) {\n      const target = field.getAttribute(\"data-fv-target\") ?? \"\";\n      if (target.trim() === \"\") return false;\n      const custom = field.getAttribute(\"data-fv-custom_value_message\") ?? \"\";\n      const targetValue = document.querySelector(target)?.value;\n      if (targetValue !== value) {\n        this.invalidMessage = setConfirmationMessage(custom, lang);\n        return false;\n      }\n      return true;\n    },\n    invalidMessage: language.notConfirmed,\n    messageKey: \"confirmation\"\n  };\n\n  /* Checks if the field value has a valid credit/debit card number */\n  configuration.validators[\"credit_card\"] = {\n    name: \"credit_card\",\n    validatorFunction: function (value, form, field, options, lang) {\n      if (/\\D/.test(value)) return false;\n      let card = \"unknown\";\n      let min = 16;\n      let max = 19;\n      const allowing = (field.getAttribute(\"data-fv-allowed_cards\") ?? Object.keys(cardInfo).join(\",\")).split(/[,|-]+\\s*|\\s+/);\n      allowing.filter(c => Object.keys(cardInfo).includes(c.toUpperCase()));\n      for (const c of allowing) {\n        for (const e of cardInfo[c].first) {\n          if (value.startsWith(e.toString())) {\n            card = c;\n            min = cardInfo[c].length.min;\n            max = cardInfo[c].length.max;\n            break;\n          }\n        }\n        if (card !== \"unknown\") break;\n      }\n      field.setAttribute(\"data-fv-card\", card);\n      const digits = value.split(\"\").map(Number);\n      if (digits.length < min || digits.length > max) return false;\n      return luhn(digits) === 0;\n    },\n    invalidMessage: language.inv_credit_card,\n    messageKey: \"credit_card\"\n  };\n\n  /* Checks if the field value has a valid CVV number */\n  configuration.validators[\"cvv\"] = {\n    name: \"cvv\",\n    validatorFunction: function (value, form, field, options, lang) {\n      if (/\\D/.test(value)) return false;\n      const target = field.getAttribute(\"data-fv-target\") ?? \"\";\n      if (target.trim() === \"\") return false;\n      const creditCard = document.querySelector(target)?.getAttribute(\"data-fv-card\");\n      if (!creditCard) return false;\n      if (creditCard !== \"unknown\") {\n        return cardInfo[creditCard].cvv === value.length;\n      } else {\n        return value.length < 3 || value.length > 4;\n      }\n    },\n    invalidMessage: language.inv_cvv,\n    messageKey: \"cvv\"\n  };\n  //#endregion security\n\n  //#region utils\n  /**\n   * Check if the format is correct\n   * @param {string} format Date format\n   * @param {string} separator Date format separator\n   * @returns {boolean} True if is correct\n   */\n  function validateDateFormat(format, separator) {\n    if (/[A-Z0-9]/.test(separator)) return false;\n    const count = (RegExp(new RegExp(`\\\\${separator}`)).exec(format) ?? []).length;\n    if (format.replace(separator, \"\").length != format.length - count) return false;\n    if (new RegExp(`[^YMD${separator}]`).test(format)) return false;\n    const fParts = format.split(separator);\n    switch (fParts.length) {\n      case 3:\n        if (!fParts.includes(\"YYYY\") && !fParts.includes(\"MM\") && !fParts.includes(\"DD\")) return false;\n        break;\n      case 2:\n        if (!fParts.includes(\"YYYY\") && !fParts.includes(\"MM\")) return false;\n        break;\n      case 1:\n        if (!fParts.includes(\"YYYY\")) return false;\n        break;\n      default:\n        return false;\n    }\n    return true;\n  }\n\n  /**\n   * Prepare the regexp for check the date format\n   * @param {string} format Date format\n   * @param {string} separator Date format separator\n   * @returns {string} Regexp based in the date format\n   */\n  function dateRegex(format, separator) {\n    return \"^\" + format.split(separator).map(part => {\n      if (part.includes(\"YYYY\")) return `\\\\d{4}`;else return `\\\\d{2}`;\n    }).join(`\\\\${separator}`) + \"$\";\n  }\n\n  /**\n   * Checks if the date matches the date format.\n  \n   * ** Only supports date with number format.\n   * @param {string} date Date\n   * @param {string} format Number date format: (DD) for day, (MM) for month, (YYYY) for year\n   * @returns {string} Returns invalid, ok if is valid or no if the format is incorrect\n   */\n  function checkDateFormat(date, format) {\n    const separator = format.toUpperCase().replace(/[DMY]/g, \"\").charAt(0);\n    if (!validateDateFormat(format.toUpperCase(), separator)) return \"no\";\n    const regex = dateRegex(format.toUpperCase(), separator);\n    if (!new RegExp(regex).test(date)) return \"invalid\";\n    const dParts = date.split(separator),\n      fParts = format.toUpperCase().split(separator);\n    const day = parseInt(dParts[fParts.indexOf(\"DD\")], 10),\n      month = parseInt(dParts[fParts.indexOf(\"MM\")], 10),\n      year = parseInt(dParts[fParts.indexOf(\"YYYY\")], 10);\n    if (year < 0 || year > 9999) return \"invalid\";\n    if (fParts.length > 1) if (month && (month < 1 || month > 12)) return \"invalid\";\n    if (fParts.length == 3) {\n      if (day && (day < 1 || day > new Date(year, month - 1, 0).getDate())) return \"invalid\";\n    }\n    return \"ok\";\n  }\n\n  /**\n   * Splits the time into an array\n   * @param {string} tf Time to split\n   * @returns {string[]} [HH,mm,ss,sss?]\n   */\n  function splitTime(tf) {\n    const ms = tf.split(\".\"),\n      r = [...ms[0].split(\":\")];\n    if (ms[1]) r.push(ms[1]);\n    return r;\n  }\n\n  /**\n   * Prepare the regexp for check the time format\n   * @param {string} format Time format\n   * @returns {string} Regexp based in the time format\n   */\n  function timeRegex(format) {\n    return \"^\" + format.replace(\"A\", \"\").split(\":\").map(part => {\n      if (part.includes(\".\")) return `\\\\d{2}\\\\x2E\\\\d{3}`;\n      return `\\\\d{2}`;\n    }).join(`\\\\x3A`) + (format.lastIndexOf(\"A\") > -1 ? \"(a\\\\s?m|p\\\\s?m|a.\\\\s?m.|p.\\\\s?m.)\" : \"\") + \"$\";\n  }\n\n  /**\n   * Checks if the time matches the time format.\n   * A valid format could be: HH:mm:ss.sssA HH:mm:ssA HH:mmA\n   * @param {string} time Time\n   * @param {string} format Time format: (HH) for Hours, (mm) for minutes, (ss) for seconds, (sss) for milliseconds, (A) for AM/PM\n   * @returns {string} Returns invalid, ok if is valid or no if the format is incorrect\n   */\n  function checkTimeFormat(time, format) {\n    if (!/^(HH\\x3Amm)((\\x3Ass)|(\\x3Ass\\x2Esss))?(A)?$/.test(format)) return \"no\";\n    const regex = timeRegex(format);\n    if (!new RegExp(regex, \"i\").test(time)) return \"invalid\";\n    const tParts = splitTime(time.replace(/a\\s?m|p\\s?m|a.\\s?m.|p.\\s?m./i, \"\")),\n      fParts = splitTime(format.replace(\"A\", \"\"));\n    const hours = parseInt(tParts[fParts.indexOf(\"HH\")], 10),\n      minutes = parseInt(tParts[fParts.indexOf(\"mm\")], 10),\n      seconds = parseInt(tParts[fParts.indexOf(\"ss\")], 10),\n      milliseconds = parseInt(tParts[fParts.indexOf(\"sss\")], 10),\n      h24_h12 = format.search(/A/) == -1 ? 23 : 12;\n    if (hours < 0 || hours > h24_h12) return \"invalid\";\n    if (minutes < 0 || minutes > 59) return \"invalid\";\n    if (seconds && (seconds < 0 || seconds > 59)) return \"invalid\";\n    if (milliseconds && (milliseconds < 0 || milliseconds > 999)) return \"invalid\";\n    return \"ok\";\n  }\n\n  /**\n   * Checks if a number matches with a specific range\n   * @param {number} value Number to check\n   * @param {string} range Accepted range\n   * @returns {string} Returns ok or the unfulfilled range\n   */\n  function checkNumberRange(value, range) {\n    if (range.includes(\"::\") && (range.includes(\"max\") || range.includes(\"min\"))) return [\"no\"];\n    const match = RegExp(/^(min|max)?((?:-?)\\d+(?:\\x2E\\d+)?)(?:\\x3A\\x3A((?:-?)\\d+(?:\\x2E\\d+)?))?$/).exec(range);\n    if (!match) return [\"no\"];\n    const [, minOrMax, num1, num2] = match,\n      min = minOrMax === \"min\",\n      max = minOrMax === \"max\",\n      number1 = parseFloat(num1),\n      number2 = num2 ? parseFloat(num2) : undefined;\n    if (min && value < number1) return [\"min\", num1];\n    if (max && value > number1) return [\"max\", num1];\n    if (number2 !== undefined && (value < number1 || value > number2)) return [\"range\", num1, num2];\n    if (!min && !max && number2 === undefined && value !== number1) return [\"equal\", num1];\n    return [\"ok\"];\n  }\n\n  /**\n   * Checks if a number satisfies with the step\n   * @param {number} value Number to check\n   * @param {string} step Step\n   * @returns {string[]} Returns ok or the unfulfilled step\n   */\n  function checkNumberStep(value, step) {\n    const regex = /^-?\\d+(\\x2E\\d+)?$/;\n    if (!regex.test(step)) return [\"no\"];\n    const s = parseFloat(step);\n    if (value % s !== 0) return [\"step\", step];\n    return [\"ok\"];\n  }\n\n  /**\n   * Checks if the range value matches with the allowed numbers\n   * @param {string[]} allow Allowed numbers options\n   * @param {string} rangeVal Range value\n   * @returns {string[]} Returns no if no match\n   */\n  function checkRangeAllowed(allow, rangeVal) {\n    let r = [\"ok\"];\n    if (allow.includes(\"noPositive\") && !rangeVal.includes(\"-\")) r = [\"no\"];\n    if (!allow.includes(\"negative\") && !allow.includes(\"noPositive\") && rangeVal.includes(\"-\")) r = [\"no\"];\n    if (!allow.includes(\"decimal\") && rangeVal.includes(\".\")) r = [\"no\"];\n    return r;\n  }\n\n  /**\n   * Checks if the step value matches with the allowed numbers\n   * @param {string[]} allow Allowed numbers options\n   * @param {string} stepVal Step value\n   * @returns {string[]} Returns no if no match\n   */\n  function checkStepAllowed(allow, stepVal) {\n    let s = [\"ok\"];\n    if (allow.includes(\"noPositive\") && !stepVal.includes(\"-\")) s = [\"no\"];\n    if (!allow.includes(\"negative\") && !allow.includes(\"noPositive\") && stepVal.includes(\"-\")) s = [\"no\"];\n    if (!allow.includes(\"decimal\") && stepVal.includes(\".\")) s = [\"no\"];\n    return s;\n  }\n\n  /**\n   * Check if the number match the range or the step\n   * @param {string[]} allow Allowed numbers options\n   * @param {number} value Number to check\n   * @param {string} rangeVal The range\n   * @param {string} stepVal The step\n   * @returns {string[][]} The response of range and step check\n   */\n  function checkRangeStep(allow, value, rangeVal, stepVal) {\n    let check = [],\n      r = [\"ok\"],\n      s = [\"ok\"];\n    if (allow.includes(\"range\")) {\n      r = checkRangeAllowed(allow, rangeVal);\n      if (r[0] == \"ok\") r = checkNumberRange(value, rangeVal);\n    }\n    if (allow.includes(\"step\")) {\n      s = checkStepAllowed(allow, stepVal);\n      if (s[0] == \"ok\") s = checkNumberStep(value, stepVal);\n    }\n    check = [[...r], [...s]];\n    return check;\n  }\n\n  /**\n   * Checks if the string length matches with a specific range\n   * @param {number} value Length to check\n   * @param {string} range Accepted range\n   * @returns {string} Returns ok or the unfulfilled range\n   */\n  function checkStringLength(value, range) {\n    if (range.includes(\"::\") && (range.includes(\"max\") || range.includes(\"min\"))) return [\"no\"];\n    const match = RegExp(/^(min|max)?(\\d+)(?:\\x3A\\x3A(\\d+))?$/).exec(range);\n    if (!match) return [\"no\"];\n    const [, minOrMax, num1, num2] = match,\n      min = minOrMax === \"min\",\n      max = minOrMax === \"max\",\n      number1 = parseInt(num1, 10),\n      number2 = num2 ? parseInt(num2, 10) : undefined;\n    if (min && value < number1) return [\"min\", num1];\n    if (max && value > number1) return [\"max\", num1];\n    if (number2 !== undefined && (value < number1 || value > number2)) return [\"range\", num1, num2];\n    if (!min && !max && number2 === undefined && value !== number1) return [\"equal\", num1];\n    return [\"ok\"];\n  }\n\n  /**\n   * Convert a number to currency format\n   * @param {string} value Number to convert\n   * @param {Lang} lang Form Validator language\n   * @param {?(string|string[])} [locale] List of language and region codes (for more information see \"BCP 47 language tags\")\n   * @param {?string} [currency] Currency code (for more information se \"ISO 4217 standard\")\n   * @param {?number} [decimals] Number of fixed decimal numbers to be displayed\n   * @returns {string} Converted number\n   */\n  function currencyFormat(value, lang, locale, currency, decimals) {\n    if (!/^\\d+(\\.\\d+)?$/.test(value)) return value;\n    if (!decimals) {\n      const prt = value.split(\".\");\n      decimals = prt.length;\n    }\n    locale = !locale ? lang.locale : locale;\n    currency = !currency ? lang.currencyCode : currency;\n    decimals = Math.abs(decimals) > 100 ? 100 : Math.abs(decimals);\n    try {\n      return parseFloat(value).toLocaleString(locale, {\n        style: \"currency\",\n        currency: currency,\n        minimumFractionDigits: decimals\n      });\n    } catch {\n      return parseFloat(value).toFixed(decimals);\n    }\n  }\n\n  /**\n   * Converts the first letter of the text to uppercase\n   * @param {string} str Text to convert\n   * @returns {string} Converted text\n   */\n  function sentenceCase(str) {\n    return str.charAt(0).toLocaleUpperCase() + str.slice(1);\n  }\n\n  /**\n   * Converts the first letter of each word in the text to uppercase\n   * @param {string} str Text to convert\n   * @returns {string} Converted text\n   */\n  function capitalizedWords(str) {\n    return str.split(/\\s/g).map(v => sentenceCase(v)).join(\" \");\n  }\n\n  /**\n   * Converts the text in camelCase or pascalCase\n   * @param {string} str Text to convert\n   * @param {boolean} p Indicates whether the text will be converted to pascalCase (true) or camelCase (false)\n   * @returns {string} Converted text\n   */\n  function camel_pascal(str, p) {\n    str = capitalizedWords(str).replace(/\\s/g, \"\");\n    if (!p) str = str.charAt(0).toLocaleLowerCase() + str.slice(1);\n    return str;\n  }\n\n  /**\n   * Returns the not accepted fields\n   * @param {boolean} acceptHidden Whether or not to accept hidden fields\n   * @param {boolean} acceptIgnored Whether or not to accept ignored fields\n   * @returns {string} List of non accepted fields selector\n   */\n  function notAccept(acceptHidden, acceptIgnored) {\n    const hidden = ',[type=\"hidden\"]',\n      ignore = ',[ignored=\"true\"]',\n      notAccept = '[type=\"image\"],[type=\"submit\"],[type=\"button\"],[type=\"reset\"]';\n    let not = notAccept;\n    if (acceptHidden) not += hidden;\n    if (acceptIgnored) not += ignore;\n    return not;\n  }\n\n  /**\n   * Trigger the callbacks when a message is showed\n   * @param {boolean} isValid Validation state\n   * @param {Options} options Validation options\n   * @param {ValidationField} field The validated field\n   * @param {string} message The validation message\n   */\n  function triggerMessageCallback(isValid, options, form, field, message) {\n    if (isValid && options.validMessageCallback) {\n      options.validMessageCallback(form, field, message, options);\n    } else if (!isValid && options.invalidMessageCallback) {\n      options.invalidMessageCallback(form, field, message, options);\n    }\n  }\n\n  /**\n   * Escapes all characters that may have conflicts in a regex\n   * @param {string} str String to escape\n   * @returns {string} Scaped string\n   */\n  function escapeRegExp(str) {\n    return str.replace(/[.*+?^${}()|\\x5B\\x5D\\x2F\\x5C]/g, \"\\\\$&\");\n  }\n\n  /**\n   * Check the password strength and character conditions\n   * @param {string} password Password to check\n   * @returns {{\n   *   strength: number;\n   *   check: string[];\n   * }} Password check\n   */\n  function checkPasswordStrength(password) {\n    let strength = 0;\n    const check = [];\n    if (/[A-Z]/.test(password)) {\n      strength++;\n      check.push(\"UC\");\n    }\n    if (/[a-z]/.test(password)) {\n      strength++;\n      check.push(\"LC\");\n    }\n    if (options.passwordSpecialChars.test(password)) {\n      strength++;\n      check.push(\"SC\");\n    }\n    if (/\\d/.test(password)) {\n      strength++;\n      check.push(\"NC\");\n    }\n    if (password.length < 8) strength--;\n    if (password.length >= 8) check.push(\"L\");\n    if (password.length >= 12) strength++;\n    if (/\\s/.test(password)) strength = 1;\n    return {\n      strength: strength,\n      check: check\n    };\n  }\n\n  /**\n   * Lhun algorithm\n   * @param {number[]} digits digits to calculate\n   * @returns {number} Calculated digit\n   */\n  function luhn(digits) {\n    let sum = 0;\n    digits.slice().reverse().forEach((digit, i) => {\n      if (i % 2 == 0) {\n        digit *= 2;\n        if (digit > 9) digit -= 9;\n      }\n      sum += digit;\n    });\n    return sum % 10;\n  }\n\n  /**\n   * Module 11 algorithm\n   * @param {number[]} digits digits to calculate\n   * @returns {number} Calculated digit\n   */\n  function module11(digits) {\n    let sum = 0;\n    let factor = 2;\n    digits.slice().reverse().forEach(digit => {\n      sum += digit * factor;\n      factor++;\n      if (factor > 7) factor = 2;\n    });\n    return sum % 11;\n  }\n\n  /**\n   * Convert the user provided size to bytes\n   * @param {string} size Size with string size type\n   * @returns {number} Size in bytes\n   */\n  function sizeStringToBytes(size) {\n    size = size.toUpperCase();\n    if (size.endsWith(\"GB\")) {\n      return parseInt(size.slice(0, -2), 10) * 1024 * 1024 * 1024;\n    } else if (size.endsWith(\"MB\")) {\n      return parseInt(size.slice(0, -2), 10) * 1024 * 1024;\n    } else if (size.endsWith(\"KB\")) {\n      return parseInt(size.slice(0, -2), 10) * 1024;\n    } else if (size.endsWith(\"B\")) {\n      return parseInt(size.slice(0, -1), 10);\n    } else {\n      return parseInt(size, 10);\n    }\n  }\n\n  /**\n   * Returns the image dimensions\n   * @param {File} file Image file\n   * @returns {Promise<number[]>} Number array Promise of the dimensions (width, height)\n   */\n  function getImageDimensions(file) {\n    return new Promise(resolve => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = function (e) {\n        if (e.target) {\n          const image = new Image();\n          image.src = e.target.result;\n          image.onload = function () {\n            resolve([image.width, image.height]);\n          };\n        } else resolve([0, 0]);\n      };\n    });\n  }\n  //#endregion utils\n\n  //#region dom\n  /**\n   * Restricts the number of characters in a TextArea and displays the information\n   * @param {HTMLTextAreaElement} TextArea TextArea to limit\n   * @param {number} max Max number of character to write\n   * @param {string} info Type of information showed\n   */\n  function textAreaLengthRestriction(TextArea, max, info) {\n    if (TextArea.hasAttribute(\"data-fv-length_restriction\")) return;\n    const container = document.createElement(\"div\");\n    container.classList.add(\"fv-textAreaLength\");\n    let remaining;\n    const characterCount = function () {\n      let count = TextArea.value.length;\n      if (count >= max) {\n        count = max;\n        TextArea.value = TextArea.value.substring(0, max);\n      }\n      remaining = max - count;\n      if (remaining < 0) remaining = 0;\n      if (info) switch (info) {\n        case \"both\":\n          container.innerText = `${count}(${remaining})/${max}`;\n          break;\n        case \"remaining\":\n          container.innerText = `${remaining}/${max}`;\n          break;\n        case \"count\":\n        default:\n          container.innerText = `${count}/${max}`;\n          break;\n      }\n      position();\n    };\n    container.style.backgroundColor = window.getComputedStyle(document.getElementsByTagName(\"body\")[0]).backgroundColor;\n    const position = function () {\n      let left = TextArea.getBoundingClientRect().width - container.getBoundingClientRect().width - 20;\n      left = left < 8 ? 8 : left;\n      container.style.marginLeft = `${left}px`;\n      container.style.marginTop = `-${container.getBoundingClientRect().height / 2}px`;\n    };\n    TextArea.before(container);\n    TextArea.setAttribute(\"data-fv-length_restriction\", \"\");\n    TextArea.addEventListener(\"input\", characterCount);\n    TextArea.dispatchEvent(new Event(\"input\"));\n    new ResizeObserver(position).observe(TextArea);\n  }\n\n  /**\n   * Set the input suggestions\n   * @param {HTMLInputElement} input Input element where suggestions will be shown\n   * @param {string[]} words List of words to suggest\n   * @param {Suggestion} settings Custom options for suggestion's DataList Element\n   */\n  function inputSuggestion(input, words, settings) {\n    if (input.hasAttribute(\"data-fv-suggestions\")) return;\n    if (words.filter(w => w.length > 0).length == 0) return;\n    let currentFocus = -1;\n    const datalist = document.createElement(\"datalist\");\n    datalist.classList.add(\"fv-suggestions\");\n    datalist.classList.add(settings.containerClass);\n    datalist.style.maxHeight = settings.maxHeight;\n    datalist.style.display = \"none\";\n    datalist.setAttribute(\"target\", `#${input.id}`);\n    datalist.style.backgroundColor = window.getComputedStyle(document.getElementsByTagName(\"body\")[0]).backgroundColor;\n    input.setAttribute(\"autocomplete\", \"off\");\n    input.setAttribute(\"list\", \"\");\n    const fillDatalist = function (words) {\n      currentFocus = -1;\n      while (datalist.firstChild) datalist.removeChild(datalist.firstChild);\n      for (const word of words) {\n        const option = document.createElement(\"option\");\n        option.value = word;\n        option.innerText = word;\n        option.classList.add(settings.optionClass);\n        option.onclick = function () {\n          datalist.style.display = \"none\";\n          input.value = option.value;\n        };\n        datalist.appendChild(option);\n      }\n      if (datalist.options.length > 0) {\n        datalist.style.display = \"block\";\n        datalist.scrollTo(0, 0);\n      } else {\n        datalist.style.display = \"none\";\n      }\n    };\n    input.addEventListener(\"blur\", function () {\n      const no = document.querySelector(`datalist.fv-suggestions[target=\"#${input.id}\"] option:hover`);\n      if (no) return;\n      datalist.style.display = \"none\";\n    });\n    input.addEventListener(\"dblclick\", function () {\n      fillDatalist(words);\n    });\n    input.addEventListener(\"input\", function () {\n      datalist.style.display = \"none\";\n      if (input.value.trim().length == 0) return;\n      setTimeout(() => {\n        const regexp = new RegExp(escapeRegExp(input.value), \"i\");\n        const match = words.filter(word => regexp.test(word));\n        if (match.length > 0) fillDatalist(match);\n      }, 200);\n    });\n    input.addEventListener(\"keydown\", function (e) {\n      if (datalist.style.display == \"block\" && datalist.options) {\n        if (e.key == \"Escape\") {\n          e.preventDefault();\n          datalist.style.display = \"none\";\n        }\n        if (e.key == \"ArrowUp\") {\n          e.preventDefault();\n          currentFocus--;\n          simulateScroll();\n        }\n        if (e.key == \"ArrowDown\") {\n          e.preventDefault();\n          currentFocus++;\n          simulateScroll();\n        }\n        addActive();\n        if (e.key == \"Enter\") {\n          e.preventDefault();\n          datalist.options[currentFocus].click();\n        }\n      }\n    });\n    const addActive = function () {\n      const selected = document.querySelector(\"datalist.fv-suggestions option.active\");\n      if (selected) selected.classList.remove(\"active\");\n      if (currentFocus >= datalist.options.length) currentFocus = 0;\n      if (currentFocus < 0) currentFocus = datalist.options.length - 1;\n      datalist.options[currentFocus].classList.add(\"active\");\n      return true;\n    };\n    const simulateScroll = function () {\n      currentFocus = currentFocus <= -1 ? 0 : currentFocus;\n      currentFocus = currentFocus > datalist.options.length - 1 ? datalist.options.length - 1 : currentFocus;\n      const c = Math.floor(parseInt(datalist.style.maxHeight, 10) / datalist.options[0].offsetHeight);\n      datalist.scrollTo(0, datalist.options[0].offsetHeight * (currentFocus - c + 1));\n    };\n    input.after(datalist);\n    input.setAttribute(\"data-fv-suggestions\", \"\");\n    new ResizeObserver(() => {\n      datalist.style.width = `${input.getBoundingClientRect().width}px`;\n    }).observe(input);\n  }\n\n  /**\n   * Show password strength info\n   * @param {HTMLInputElement} input Input type password\n   * @param {Options} options Validation options\n   */\n  function passwordInfo(input, options) {\n    if (input.hasAttribute(\"data-fv-password_info\")) return;\n    if (input.type != \"password\") return;\n    const container = document.createElement(\"div\");\n    const additionalClass = options.passwordInfoClass ?? \"\";\n    container.classList.add(\"fv-password\", additionalClass);\n    container.style.display = \"none\";\n    container.setAttribute(\"target\", `#${input.id}`);\n    const content = `<div class=\"tittle\">${language.passwordConditionsTitle}</div>\n<div class=\"condition UC\">${language.passwordConditionUppercase}</div>\n<div class=\"condition LC\">${language.passwordConditionLowercase}</div>\n<div class=\"condition SC\">${language.passwordConditionSpecialChars}</div>\n<div class=\"condition NC\">${language.passwordConditionNumericChars}</div>\n<div class=\"condition L\">${language.passwordConditionLength}</div>\n<div class=\"strength-text\"></div>\n<div class=\"strength-bar\"></div>`;\n    container.innerHTML = content;\n    input.after(container);\n    input.setAttribute(\"data-fv-password_info\", \"\");\n    const strengthBar = document.querySelector(`div.fv-password[target=\"#${input.id}\"] div.strength-bar`),\n      strength = document.querySelector(`div.fv-password[target=\"#${input.id}\"] div.strength-text`);\n    input.addEventListener(\"blur\", function () {\n      container.style.display = \"none\";\n    });\n    input.addEventListener(\"input\", function () {\n      container.style.display = \"block\";\n      strengthBar.classList.remove(\"very-strong\", \"strong\", \"normal\", \"weak\", \"very-weak\");\n      strength.innerHTML = \"\";\n      document.querySelectorAll(`div.fv-password[target=\"#${input.id}\"] div.condition`).forEach(condition => {\n        condition.classList.remove(\"check\", \"no-check\");\n      });\n      if (input.value.length == 0) return;\n      const p = checkPasswordStrength(input.value);\n      const checkList = p.check;\n      const strengthLevel = p.strength;\n      [\"UC\", \"LC\", \"SC\", \"NC\", \"L\"].forEach(c => {\n        document.querySelector(`div.fv-password[target=\"#${input.id}\"] div.condition.${c}`)?.classList.add(checkList.includes(c) ? \"check\" : \"no-check\");\n      });\n      switch (strengthLevel) {\n        case 5:\n          strength.innerHTML = language.passwordStrengthVeryStrong;\n          strengthBar.classList.add(\"very-strong\");\n          break;\n        case 4:\n          strength.innerHTML = language.passwordStrengthStrong;\n          strengthBar.classList.add(\"strong\");\n          break;\n        case 3:\n          strength.innerHTML = language.passwordStrengthNormal;\n          strengthBar.classList.add(\"normal\");\n          break;\n        case 2:\n          strength.innerHTML = language.passwordStrengthWeak;\n          strengthBar.classList.add(\"weak\");\n          break;\n        case 1:\n        default:\n          strength.innerHTML = language.passwordStrengthVeryWeak;\n          strengthBar.classList.add(\"very-weak\");\n          break;\n      }\n      input.setAttribute(\"data-fv-password_strength\", strengthLevel.toString());\n      const left = (parseFloat(window.getComputedStyle(input).width) - parseFloat(window.getComputedStyle(container).width)) / 2;\n      container.style.marginLeft = `${left}px`;\n    });\n  }\n\n  /**\n   * Set the field help message\n   * @param {ValidationField} field The field to attach the message\n   * @param {string} message The message to show\n   */\n  function fieldHelpMessage(field, message) {\n    const span = document.createElement(\"span\"),\n      name = field.getAttribute(\"name\");\n    if (!name) return;\n    span.classList.add(\"fv-help_message\");\n    span.setAttribute(\"for\", name);\n    span.textContent = message;\n    span.style.display = \"none\";\n    if (field.hasAttribute(\"data-fv-suggestions\")) {\n      const dt = document.querySelector(`datalist.fv-suggestions[target=\"#${field.id}\"]`);\n      dt.after(span);\n    } else if (field.hasAttribute(\"data-fv-password_info\")) {\n      const pi = document.querySelector(`div.fv-password[target=\"#${field.id}`);\n      pi.after(span);\n    } else field.after(span);\n  }\n\n  /**\n   * Get the parent of the field\n   * @param {ValidationField} field The field element\n   * @param {Options} options Validation options\n   * @param {HTMLFormElement} form The validated field parent form\n   * @returns {HTMLElement | null} Parent element or null if the parent is the form\n   */\n  function getFieldParent(field, form, options) {\n    let parent = null;\n    const p = form.querySelector(options.parentField.trim());\n    if (p) parent = p ?? field.parentElement;\n    if (parent?.nodeName == \"FORM\") parent = null;\n    return parent;\n  }\n\n  /**\n   * Get the invalid message for the validator\n   * @param {ValidationField} field The validated field\n   * @param {Validator} validator The validator\n   * @param {Options} options Validation options\n   * @param {Lang} language Form Validator language\n   * @returns {string} Invalid message\n   */\n  function getInvalidMessage(field, validator, options, language) {\n    let message = field.getAttribute(`${options.fieldInvalidMessageAttribute}-${validator.messageKey ?? validator.name}`);\n    if (!message) {\n      message = field.getAttribute(options.fieldInvalidMessageAttribute);\n      if (!message) message = validator.invalidMessage;\n    }\n    return message;\n  }\n\n  /**\n   * Get the valid message for the validator\n   * @param {ValidationField} field The validated field\n   * @param {Validator} validator The validator\n   * @param {Options} options Validation options\n   * @returns {string} Valid message\n   */\n  function getValidMessage(field, validator, options) {\n    let message = field.getAttribute(`${options.fieldValidMessageAttribute}-${validator.messageKey ?? validator.name}`);\n    if (!message) {\n      message = field.getAttribute(options.fieldValidMessageAttribute);\n      if (!message) message = validator.validMessage ?? \"\";\n    }\n    return message;\n  }\n\n  /**\n   * Sets the styles for the field and their parent\n   * @param {ValidationField} field The validated field\n   * @param {HTMLFormElement} form The validated field parent form\n   * @param {Options} options Validation options\n   * @param {boolean} valid_invalid True if is valid, false if is invalid\n   */\n  function setStyles(field, form, options, valid_invalid) {\n    let fieldClass, fieldRemove, parentClass, parentRemove, labelClass, labelRemove;\n    if (valid_invalid) {\n      fieldClass = options.validClass;\n      fieldRemove = options.invalidClass;\n      parentClass = \"Valid\";\n      parentRemove = \"Invalid\";\n      labelClass = options.validLabelClass;\n      labelRemove = options.invalidLabelClass;\n    } else {\n      fieldClass = options.invalidClass;\n      fieldRemove = options.validClass;\n      parentClass = \"Invalid\";\n      parentRemove = \"Valid\";\n      labelClass = options.invalidLabelClass;\n      labelRemove = options.validLabelClass;\n    }\n    document.querySelectorAll(`[name=${field.name}]`).forEach(f => {\n      f.classList.remove(fieldRemove);\n      f.classList.add(fieldClass);\n      const parent = getFieldParent(f, form, options);\n      if (parent) {\n        parent.classList.remove(parentRemove);\n        parent.classList.add(parentClass);\n      }\n      const name = [\"checkbox\", \"radio\"].includes(field.type) ? field.id : field.name;\n      const label = document.querySelector(`label[for=${name}]`);\n      if (label) {\n        label.classList.remove(labelRemove);\n        label.classList.add(labelClass);\n      }\n    });\n  }\n\n  /**\n   * Removes the field style and its parent\n   * @param {ValidationField} field The validated field\n   * @param {HTMLFormElement} form The validated field parent form\n   * @param {Options} options Validation options\n   */\n  function removeStyles(field, form, options) {\n    document.querySelectorAll(`[name=${field.name}]`).forEach(f => {\n      f.classList.remove(options.invalidClass);\n      f.classList.remove(options.validClass);\n      const parent = getFieldParent(f, form, options);\n      if (parent) {\n        parent.classList.remove(\"Valid\");\n        parent.classList.remove(\"Invalid\");\n      }\n      const name = [\"checkbox\", \"radio\"].includes(field.type) ? field.id : field.name;\n      const label = document.querySelector(`label[for=${name}]`);\n      if (label) {\n        label.classList.remove(options.validLabelClass);\n        label.classList.remove(options.invalidLabelClass);\n      }\n    });\n  }\n\n  /**\n   * Sets the field inline validation message\n   * @param {ValidationField} field The validated field\n   * @param {HTMLFormElement} form The validated field parent form\n   * @param {Options} options Validation options\n   * @param {Configuration} configuration Validation configuration\n   * @param {Lang} language Form Validator language\n   * @param {boolean} valid_invalid True if is valid, false if is invalid\n   * @param {(Validator | AsyncValidator)} validator The validator\n   */\n  function setInlineMessage(field, form, options, configuration, language, valid_invalid, validator) {\n    const span = document.createElement(\"span\"),\n      parent = getFieldParent(field, form, options),\n      fieldName = form.querySelector(`label[for=\"${field.name}\"]`)?.textContent ?? field.name;\n    let message;\n    span.classList.add(options.inlineMessageClass);\n    span.setAttribute(\"for-field\", field.name);\n    if (valid_invalid) {\n      span.classList.add(options.validMessageClass);\n      message = getValidMessage(field, validator, options);\n      configuration.validMessages[form.id][fieldName] = message;\n    } else {\n      span.classList.add(options.invalidMessageClass);\n      message = getInvalidMessage(field, validator, options, language);\n      configuration.invalidMessages[form.id][fieldName] = message;\n    }\n    if (message.length == 0) return;\n    span.innerText = message;\n    span.style.display = \"block\";\n    if (parent) {\n      parent.insertAdjacentElement(\"beforeend\", span);\n    } else {\n      field.after(span);\n    }\n    triggerMessageCallback(valid_invalid, options, form, field, message);\n  }\n\n  /**\n   * Sets the field top validation message\n   * @param {ValidationField} field The validated field\n   * @param {HTMLFormElement} form The validated field parent form\n   * @param {Options} options Validation options\n   * @param {Configuration} configuration Validation configuration\n   * @param {Lang} language Form Validator language\n   * @param {boolean} valid_invalid True if is valid, false if is invalid\n   * @param {(Validator | AsyncValidator)} validator The validator\n   */\n  function setTopMessage(field, form, options, configuration, language, valid_invalid, validator) {\n    let message;\n    const fieldName = form.querySelector(`label[for=\"${field.name}\"]`)?.textContent ?? field.name;\n    const validView = options.topMessagesTemplate.replace(\"{topMessagesClass}\", options.topMessagesClass).replace(\"{formID}\", form.id).replace(\"{title}\", language.validTitle).replace(\"{valid_invalid}\", options.validMessagesClass).replace(\"{vi}\", \"valid\"),\n      invalidView = options.topMessagesTemplate.replace(\"{topMessagesClass}\", options.topMessagesClass).replace(\"{formID}\", form.id).replace(\"{title}\", language.invalidTitle).replace(\"{valid_invalid}\", options.invalidMessagesClass).replace(\"{vi}\", \"invalid\");\n    if (valid_invalid) {\n      message = getValidMessage(field, validator, options);\n      configuration.validMessages[form.id][fieldName] = message;\n    } else {\n      message = getInvalidMessage(field, validator, options, language);\n      configuration.invalidMessages[form.id][fieldName] = message;\n    }\n    let validMessages = \"\",\n      invalidMessages = \"\";\n    for (const key in configuration.validMessages[form.id]) {\n      if (configuration.validMessages[form.id][key].trim().length > 0) validMessages += `<li for=\"${key}\"><strong>${key}</strong> ${configuration.validMessages[form.id][key]}</li>`;\n    }\n    for (const key in configuration.invalidMessages[form.id]) {\n      if (configuration.invalidMessages[form.id][key].length > 0) invalidMessages += `<li for=\"${key}\"><strong>${key}</strong> ${configuration.invalidMessages[form.id][key]}</li>`;\n    }\n    if (!valid_invalid && invalidMessages.length > 0) form.insertAdjacentHTML(\"afterbegin\", invalidView.replace(\"{fields&messagesList}\", invalidMessages));else if (valid_invalid && validMessages.length > 0) form.insertAdjacentHTML(\"afterbegin\", validView.replace(\"{fields&messagesList}\", validMessages));\n    triggerMessageCallback(valid_invalid, options, form, field, message);\n  }\n\n  /**\n   * Removes the field message\n   * @param {ValidationField} field The validated field\n   * @param {HTMLFormElement} form The validated field parent form\n   */\n  function removeInlineMessages(field, form) {\n    const span = form.querySelector(`span[for-field=\"${field.name}\"]`);\n    if (span) span.remove();\n  }\n\n  /**\n   * Remove all the top messages\n   * @param {HTMLFormElement} form The validated fields parent form\n   * @param {Configuration} configuration Validation configuration\n   */\n  function removeTopMessage(form, configuration) {\n    configuration.validMessages[form.id] = {};\n    configuration.invalidMessages[form.id] = {};\n    form.querySelectorAll(\"div[data-fv-top-valid],div[data-fv-top-invalid]\").forEach(div => div.remove());\n  }\n\n  /**\n   * Sync the top messages with the inline messages\n   * @param {ValidationField} field The validated field\n   * @param {HTMLFormElement} form The validated field parent form\n   * @param {Configuration} configuration Validation configuration\n   * @param {boolean} valid_invalid True if is valid, false if is invalid\n   */\n  function syncTopMessages(field, form, configuration, valid_invalid) {\n    const fieldName = form.querySelector(`label[for=\"${field.name}\"]`)?.textContent ?? field.name;\n    if (!valid_invalid && configuration.validMessages[form.id][fieldName]) {\n      delete configuration.validMessages[form.id][fieldName];\n      form.querySelector(`div[data-fv-top-valid] li[for=\"${fieldName}\"]`)?.remove();\n    } else if (valid_invalid && configuration.invalidMessages[form.id][fieldName]) {\n      delete configuration.invalidMessages[form.id][fieldName];\n      form.querySelector(`div[data-fv-top-invalid] li[for=\"${fieldName}\"]`)?.remove();\n    }\n    if (form.querySelectorAll(`div[data-fv-top-valid] li`).length == 0) form.querySelector(`div[data-fv-top-valid]`)?.remove();\n    if (form.querySelectorAll(`div[data-fv-top-invalid] li`).length == 0) form.querySelector(`div[data-fv-top-invalid]`)?.remove();\n  }\n\n  /**\n   * Sets the field validation message\n   * @param {ValidationField} field The validated field\n   * @param {HTMLFormElement} form The validated field parent form\n   * @param {Options} options Validation options\n   * @param {Configuration} configuration Validation configuration\n   * @param {Lang} language Form Validator language\n   * @param {boolean} valid_invalid True if is valid, false if is invalid\n   * @param {(Validator | AsyncValidator)} validator The validator\n   */\n  function setMessage(field, form, options, configuration, language, valid_invalid, validator) {\n    const isHidden = field.type == \"hidden\" || window.getComputedStyle(field).display == \"none\";\n    syncTopMessages(field, form, configuration, valid_invalid);\n    removeInlineMessages(field, form);\n    if (valid_invalid && options.validMessagesPosition == \"top\") {\n      form.querySelector(`div[data-fv-top-valid]`)?.remove();\n      setTopMessage(field, form, options, configuration, language, valid_invalid, validator);\n    } else if (valid_invalid && options.validMessagesPosition == \"inline\" && !isHidden) {\n      setInlineMessage(field, form, options, configuration, language, valid_invalid, validator);\n    }\n    if (!valid_invalid && options.invalidMessagesPosition == \"top\") {\n      form.querySelector(`div[data-fv-top-invalid]`)?.remove();\n      setTopMessage(field, form, options, configuration, language, valid_invalid, validator);\n    } else if (!valid_invalid && options.invalidMessagesPosition == \"inline\" && !isHidden) {\n      setInlineMessage(field, form, options, configuration, language, valid_invalid, validator);\n    }\n  }\n\n  /**\n   * Remove all styles and messages\n   * @param {HTMLFormElement} form The validated fields parent form\n   * @param {Options} options Validation options\n   * @param {Configuration} configuration Validation configuration\n   */\n  function formReset(form, options, configuration) {\n    const fields = form.querySelectorAll('textarea, select, input:not([type=\"submit\"],[type=\"button\"],[type=\"reset\"])');\n    fields.forEach(field => {\n      removeStyles(field, form, options);\n      removeInlineMessages(field, form);\n    });\n    removeTopMessage(form, configuration);\n  }\n\n  /**\n   * Toggles the visibility of the help messages\n   * @param {ValidationField} field Field owner of the help message\n   * @param {HTMLFormElement} form Form to search fields\n   * @param {Options} options Validation options\n   * @param {Boolean} show Show or hide de message\n   */\n  function toggleHelpMessage(field, form, options, show) {\n    if (options.showHelpMessagesOnFocus) {\n      const name = field.name ?? \"\",\n        span = form.querySelector(`span.fv-help_message[for=\"${name}\"]`);\n      if (span) {\n        span.style.display = show ? \"block\" : \"none\";\n      }\n    }\n  }\n\n  /**\n   * Adds the valid class in all no validated fields\n   * @param {HTMLFormElement} form Form to search fields\n   * @param {Options} options Validation options\n   */\n  function addValidStyleInAllFields(form, options) {\n    if (!options.addValidClassOnAll) return;\n    const fields = form.querySelectorAll(`textarea:not(.${options.validClass}, .${options.invalidClass}), input:not(.${options.validClass}, .${options.invalidClass}), select:not(.${options.validClass}, .${options.invalidClass})`);\n    fields.forEach(field => setStyles(field, form, options, true));\n  }\n  //#endregion dom\n\n  //#region FormValidator\n  /**\n   * FormValidator class definition\n   * @class FormValidate\n   */\n  class FormValidate {\n    constructor(opt, lang) {\n      this.conf = configuration;\n      this.conf.language = {\n        ...language,\n        ...lang\n      };\n      this.opt = {\n        ...options,\n        ...opt\n      };\n      this.lang = this.conf.language;\n    }\n\n    /**\n     * Triggers the FormValidator events of the fields\n     * @param {string} event Event name\n     * @param {HTMLFormElement} form  Parent form\n     * @param {ValidationField} field Validating field\n     * @param {boolean} state Validation result (false in event beforeValidation or afterValidation)\n     * @param {Options} options Validation options\n     */\n    triggerEvent(event, form, field, state, options) {\n      let fns = [];\n      switch (event) {\n        case \"beforeValidate\":\n          fns = configuration.onBeforeValidate[field.name];\n          break;\n        case \"valid\":\n          fns = configuration.onValid[field.name];\n          break;\n        case \"invalid\":\n          fns = configuration.onInvalid[field.name];\n          break;\n        case \"afterValidate\":\n          fns = configuration.onAfterValidate[field.name];\n          break;\n      }\n      if (fns) fns.forEach(fn => {\n        fn(form, field, state, options);\n      });\n    }\n\n    /**\n     * Triggers all validators set in the fields\n     * @param {ValidationField} field Field to validate\n     * @param {HTMLFormElement} form Parent form\n     * @param {Options} options Validation options\n     * @param {Configuration} config Validation configuration\n     * @param {string} event Event to check if must be triggered\n     * @returns {boolean} Returns true only if pass all validations\n     */\n    validateField(field, form, options, config, event) {\n      this.triggerEvent(\"beforeValidate\", form, field, false, options);\n      const list = this.searchSyncValidators(field, options, config),\n        value = field.value,\n        valid_invalid = [];\n      for (const validator of list) {\n        if (config.validators[validator]) {\n          if (event == \"input\" && !(config.validators[validator].validateOnInput ?? options.validateOnInput)) continue;\n          const r = config.validators[validator].validatorFunction(value, form, field, options, this.lang);\n          if (r) this.triggerEvent(\"valid\", form, field, true, options);else this.triggerEvent(\"invalid\", form, field, false, options);\n          valid_invalid.push(r);\n          removeStyles(field, form, options);\n          setStyles(field, form, options, r);\n          setMessage(field, form, options, config, this.lang, r, config.validators[validator]);\n        } else {\n          console.error(`FormValidator: Failed to trigger the validator: ${validator}, can not be found.`);\n        }\n        if (valid_invalid.includes(false)) break;\n      }\n      this.triggerEvent(\"afterValidate\", form, field, !valid_invalid.includes(false), options);\n      return !valid_invalid.includes(false);\n    }\n\n    /**\n     * Triggers all async validators set in the fields\n     * @param {ValidationField} field Field to validate\n     * @param {HTMLFormElement} form Parent form\n     * @param {Options} options Validation options\n     * @param {Configuration} config Validation configuration\n     * @param {string} event Event to check if must be triggered\n     * @returns {Promise<boolean>} Returns a true promise only if pass all validations\n     */\n    async validateFieldAsync(field, form, options, config, event) {\n      this.triggerEvent(\"beforeValidate\", form, field, false, options);\n      const list = this.searchAsyncValidators(field, options, config),\n        value = field.value;\n      const valid_invalid = [];\n      for (const validator of list) {\n        if (config.asyncValidators[validator]) {\n          if (event == \"input\" && !(config.asyncValidators[validator].validateOnInput ?? options.validateOnInput)) continue;\n          const r = await config.asyncValidators[validator].validatorFunction(value, form, field, options, this.lang);\n          if (r) this.triggerEvent(\"valid\", form, field, true, options);else this.triggerEvent(\"invalid\", form, field, false, options);\n          valid_invalid.push(r);\n          removeStyles(field, form, options);\n          setStyles(field, form, options, r);\n          setMessage(field, form, options, config, this.lang, r, config.asyncValidators[validator]);\n        } else {\n          console.error(`FormValidator: Failed to trigger the validator: ${validator}, can not be found.`);\n        }\n        if (valid_invalid.includes(false)) break;\n      }\n      this.triggerEvent(\"afterValidate\", form, field, !valid_invalid.includes(false), options);\n      return !valid_invalid.includes(false);\n    }\n\n    /**\n     * Triggers all validators set in the fields\n     * @param {HTMLFormElement} form Parent form\n     * @param {string} not List of inputs attributes not to be validated\n     * @param {Options} options Validation options\n     * @param {Configuration} config Validation configuration\n     * @param {string} event Event to check if must be triggered\n     * @returns {boolean} Returns true only if pass all validations\n     */\n    validateAllFields(form, not, options, config, event) {\n      const fields = form.querySelectorAll(`textarea, select, input:not(${not})`),\n        valid = [];\n      fields.forEach(field => {\n        if (this.validateFieldController(field, \"submit\", options)) valid.push(this.validateField(field, form, options, config, event));\n      });\n      if (valid.length == 0) valid.push(true);\n      return !valid.includes(false);\n    }\n\n    /**\n     * Triggers all async validators set in the fields\n     * @param {HTMLFormElement} form Parent form\n     * @param {string} not List of inputs attributes not to be validated\n     * @param {Options} options Validation options\n     * @param {Configuration} config Validation configuration\n     * @param {string} event Event to check if must be triggered\n     * @returns {Promise<boolean>} Returns a true promise only if pass all validations\n     */\n    async validateAllFieldsAsync(form, not, options, config, event) {\n      const fields = form.querySelectorAll(`textarea, select, input:not(${not})`),\n        valid = [];\n      for (const element of Array.from(fields)) {\n        const field = element;\n        if (this.validateFieldController(field, \"submit\", options)) valid.push(await this.validateFieldAsync(field, form, options, config, event));\n      }\n      if (valid.length == 0) valid.push(true);\n      return !valid.includes(false);\n    }\n\n    /**\n     * Triggers all modifiers set in the fields\n     * @param {(HTMLInputElement | HTMLTextAreaElement)} field Field to modify the value\n     * @param {HTMLFormElement} form Form to search fields\n     * @param {string} event Event type name\n     * @param {Options} options Validation options\n     * @param {Configuration} config Validation configuration\n     */\n    modifyField(field, form, event, options, config) {\n      const modifiersList = field.getAttribute(options.fieldModifyAttribute),\n        isForModifier = field instanceof HTMLInputElement && ![\"search\", \"checkbox\", \"radio\", \"file\"].includes(field.type) || field instanceof HTMLTextAreaElement;\n      if (!isForModifier) return;\n      const list = !modifiersList ? [] : modifiersList.split(/[,|-]+\\s*|\\s+/);\n      let value = field.value;\n      for (const modifier of list) {\n        if (config.modifiers[modifier]) {\n          if (event == \"input\" && !(config.modifiers[modifier].modifyOnInput ?? options.modifyOnInput)) continue;\n          value = config.modifiers[modifier].modifierFunction(value, form, field, options, this.lang);\n        } else {\n          console.error(`FormValidator: Failed to trigger the modifier: ${modifier}, can not be found.`);\n        }\n      }\n      field.value = value;\n    }\n\n    /**\n     * Set the dependant validation\n     * @param {HTMLFormElement} form Form to search target field\n     * @param {ValidationField} field Field to check if it must be dependant\n     * @param {Options} options Validation options\n     * @param {Configuration} config Validation configuration\n     */\n    setDependantValidation(form, field, options, config) {\n      const depending = field.getAttribute(\"data-fv-depends-on\");\n      if (!depending) return;\n      const target = form.querySelector(`[name=${depending}]`);\n      if (target) {\n        field.setAttribute(\"data-fv-skip\", \"true\");\n        const validators = field.getAttribute(options.fieldValidateAttribute) ?? \"\";\n        if (!validators.includes(\"required\")) field.setAttribute(options.fieldValidateAttribute, validators + \"required\");\n        target.setAttribute(\"data-fv-dependant\", depending);\n        const fEvent = field instanceof HTMLSelectElement ? \"change\" : \"input\";\n        const value = field.getAttribute(\"data-fv-depends-on-value\") ?? \"\";\n        field.addEventListener(fEvent, function () {\n          field.setAttribute(\"data-fv-skip\", \"true\");\n          removeStyles(field, form, options);\n          removeInlineMessages(field, field.form);\n          if (config.validMessages[form.id][field.name]) delete config.validMessages[form.id][field.name];\n          if (config.invalidMessages[form.id][field.name]) delete config.invalidMessages[form.id][field.name];\n          document.querySelector(`.${options.topMessagesClass} li[for=${field.name}]`)?.remove();\n          if (target.value.trim().length > 0) field.setAttribute(\"data-fv-skip\", \"false\");\n          if (value.length > 0) if (value != target.value) field.setAttribute(\"data-fv-skip\", \"true\");\n        });\n        const tEvent = field instanceof HTMLSelectElement ? \"change\" : \"input\";\n        const _self = this;\n        target.addEventListener(tEvent, function () {\n          removeStyles(field, form, options);\n          removeInlineMessages(field, field.form);\n          if (config.validMessages[form.id][field.name]) delete config.validMessages[form.id][field.name];\n          if (config.invalidMessages[form.id][field.name]) delete config.invalidMessages[form.id][field.name];\n          document.querySelector(`.${options.topMessagesClass} li[for=${field.name}]`)?.remove();\n          if (field.classList.contains(options.validClass) || field.classList.contains(options.invalidClass)) _self.validateField(field, form, options, config, tEvent);\n        });\n      } else {\n        console.error(`FormValidator: Failed to set the dependant validation on ${field.name}, the target field ${depending} can not be found.`);\n      }\n    }\n\n    /**\n     * Set the optional validation\n     * @param {HTMLFormElement} form Form to search target field\n     * @param {ValidationField} field Field to check if it must be optional\n     * @param {Options} options Validation options\n     * @param {Configuration} config Validation configuration\n     */\n    setOptionalValidation(form, field, options, config) {\n      if (field.hasAttribute(\"data-fv-depends-on\")) return;\n      const optional = field.getAttribute(\"data-fv-optional\") ?? \"\";\n      if (optional == \"true\") {\n        field.setAttribute(\"data-fv-skip\", \"true\");\n        const validators = field.getAttribute(options.fieldValidateAttribute) ?? \"\";\n        if (!validators.includes(\"required\")) field.setAttribute(options.fieldValidateAttribute, validators + \"required\");\n        const event = field instanceof HTMLSelectElement ? \"change\" : \"input\";\n        field.addEventListener(event, function () {\n          if (field.value.trim().length > 0) field.setAttribute(\"data-fv-skip\", \"false\");else {\n            field.setAttribute(\"data-fv-skip\", \"true\");\n            removeStyles(field, form, options);\n            removeInlineMessages(field, field.form);\n            if (config.validMessages[form.id][field.name]) delete config.validMessages[form.id][field.name];\n            if (config.invalidMessages[form.id][field.name]) delete config.invalidMessages[form.id][field.name];\n            document.querySelector(`.${options.topMessagesClass} li[for=${field.name}]`)?.remove();\n          }\n        });\n      }\n    }\n\n    /**\n     * Controls if the field could be validated\n     * @param {ValidationField} field Field to check the type\n     * @param {string} event Event to check if must be triggered\n     * @param {Options} options Validation options\n     * @returns {boolean} True if could be validated\n     */\n    validateFieldController(field, event, options) {\n      const isIgnored = field.getAttribute(\"data-fv-ignored\") ?? \"false\";\n      const isSkipped = field.getAttribute(\"data-fv-skip\") ?? \"false\";\n      if (isIgnored == \"true\" || isSkipped == \"true\") return false;\n      const isCheckOrRadio = field instanceof HTMLInputElement && [\"checkbox\", \"radio\"].includes(field.type);\n      let validate = false;\n      switch (event) {\n        case \"click\":\n          if (isCheckOrRadio && options.validateCheckboxRadioOnClick) validate = true;\n          break;\n        case \"blur\":\n          if (options.validateOnBlur) validate = true;\n          break;\n        default:\n          validate = true;\n          break;\n      }\n      return validate;\n    }\n\n    /**\n     * Adds the DOM features to the field\n     * @param {HTMLFormElement} form Parent form\n     * @param {ValidationField} field Target field\n     * @param {Options} options Validation options\n     */\n    domFieldsFeatures(form, field, options) {\n      const fieldsToIgnore = form.querySelectorAll(notAccept(false, false));\n      if (field instanceof HTMLInputElement && Array.from(fieldsToIgnore).includes(field)) return;\n      if (field instanceof HTMLInputElement) {\n        if (options.addSuggestions) {\n          const suggestions = field.getAttribute(options.suggestionAttribute) ?? \"\";\n          inputSuggestion(field, suggestions.split(/[,|-]+\\s*|\\s+/), options.suggestionConfig);\n        }\n        if (options.addPasswordInfo) {\n          passwordInfo(field, options);\n        }\n      }\n      if (field instanceof HTMLTextAreaElement) {\n        const restriction = field.getAttribute(options.lengthRestrictAttribute);\n        if (restriction) textAreaLengthRestriction(field, parseInt(restriction, 10), options.lengthRestrictInfo);\n      }\n      if (options.showHelpMessagesOnFocus) {\n        const message = field.getAttribute(options.fieldHelpMessageAttribute);\n        if (message) {\n          fieldHelpMessage(field, message);\n        }\n      }\n    }\n\n    /**\n     * Adds an ignore attribute to the field if it is in the ignore list\n     * @param {HTMLFormElement} form Parent form\n     * @param {ValidationField} field Target field\n     * @param {Options} options Validation options\n     */\n    ignoreField(form, field, options) {\n      const fieldsToIgnore = form.querySelectorAll(notAccept(false, false));\n      if (field instanceof HTMLInputElement && Array.from(fieldsToIgnore).includes(field)) return;\n      let list = [];\n      const name = field.getAttribute(\"name\") ?? \"\";\n      if (Array.isArray(options.ignoredFieldsNames)) {\n        list = options.ignoredFieldsNames;\n      } else if (typeof options.ignoredFieldsNames == \"string\") {\n        list = options.ignoredFieldsNames.split(/[,|-]+\\s*|\\s+/);\n      }\n      if (list.indexOf(name) > -1) {\n        field.setAttribute(\"data-fv-ignored\", \"true\");\n      } else {\n        field.setAttribute(\"data-fv-ignored\", \"false\");\n      }\n      field.setAttribute(\"data-fv-skip\", \"false\");\n    }\n\n    /**\n     * Search for async validators in the validator list of the field\n     * @param {ValidationField} field Target field\n     * @param {Options} options Validation options\n     * @param {Configuration} config Validation configuration\n     * @returns {string[]} Async validators list\n     */\n    searchAsyncValidators(field, options, config) {\n      const asyncValidators = Object.keys(config.asyncValidators),\n        validatorsList = field.getAttribute(options.fieldValidateAttribute),\n        list = !validatorsList ? [] : validatorsList.split(/[,|-]+\\s*|\\s+/);\n      return asyncValidators.filter(asyncValidator => list.includes(asyncValidator));\n    }\n\n    /**\n     * Search for sync validators in the validator list of the field\n     * @param {ValidationField} field Target field\n     * @param {Options} options Validation options\n     * @param {Configuration} config Validation configuration\n     * @returns {string[]} Sync validators list\n     */\n    searchSyncValidators(field, options, config) {\n      const syncValidators = Object.keys(config.validators),\n        validatorsList = field.getAttribute(options.fieldValidateAttribute),\n        list = !validatorsList ? [] : validatorsList.split(/[,|-]+\\s*|\\s+/);\n      return syncValidators.filter(syncValidator => list.includes(syncValidator));\n    }\n\n    /**\n     * Adds the event listeners to the field\n     * @param {HTMLFormElement} form Parent form\n     * @param {ValidationField} field Target field\n     * @param {Options} options Validation options\n     * @param {Configuration} config Validation configuration\n     */\n    addEventListenersToFormFields(form, field, options, config) {\n      const fieldsToIgnore = form.querySelectorAll(notAccept(options.validateHiddenFields, false));\n      if (field instanceof HTMLInputElement && Array.from(fieldsToIgnore).includes(field)) return;\n      field.addEventListener(\"focus\", () => {\n        toggleHelpMessage(field, form, options, true);\n      });\n      field.addEventListener(\"click\", async () => {\n        toggleHelpMessage(field, form, options, true);\n        if (this.validateFieldController(field, \"click\", options)) {\n          if (!this.validateField(field, form, options, config, \"click\")) return;\n          await this.validateFieldAsync(field, form, options, config, \"click\");\n        }\n      });\n      field.addEventListener(\"blur\", async () => {\n        toggleHelpMessage(field, form, options, false);\n        if (field instanceof HTMLInputElement || field instanceof HTMLTextAreaElement) this.modifyField(field, form, \"blur\", options, config);\n        if (this.validateFieldController(field, \"blur\", options)) {\n          if (!this.validateField(field, form, options, config, \"blur\")) return;\n          await this.validateFieldAsync(field, form, options, config, \"blur\");\n        }\n      });\n      field.addEventListener(\"input\", async () => {\n        if (field instanceof HTMLInputElement || field instanceof HTMLTextAreaElement) this.modifyField(field, form, \"input\", options, config);\n        if (this.validateFieldController(field, \"input\", options)) {\n          if (!this.validateField(field, form, options, config, \"input\")) return;\n          await this.validateFieldAsync(field, form, options, config, \"input\");\n        }\n      });\n      if (field instanceof HTMLSelectElement) field.addEventListener(\"change\", async () => {\n        if (!this.validateField(field, form, options, config, \"change\")) return;\n        await this.validateFieldAsync(field, form, options, config, \"change\");\n      });\n    }\n\n    /**\n     * Add the event listeners to the form\n     * @param {HTMLFormElement} form Parent form\n     * @param {Options} options Validation options\n     * @param {Configuration} config Validation configuration\n     */\n    addEventListenersToForm(form, options, config) {\n      form.addEventListener(\"submit\", async e => {\n        e.preventDefault();\n        let isValid = this.validateAllFields(form, notAccept(options.validateHiddenFields, false), options, config, \"submit\");\n        if (isValid) isValid = await this.validateAllFieldsAsync(form, notAccept(options.validateHiddenFields, false), options, config, \"submit\");\n        form.setAttribute(\"valid-state\", isValid ? \"validForm\" : \"invalidForm\");\n        if (!isValid) {\n          if (options.scrollToTopOnInvalid) form.scrollIntoView({\n            behavior: \"smooth\"\n          });\n          e.stopImmediatePropagation();\n        }\n        addValidStyleInAllFields(form, options);\n      });\n      form.addEventListener(\"reset\", () => {\n        formReset(form, options, config);\n        form.removeAttribute(\"valid-state\");\n      });\n    }\n\n    /**\n     * Set up modifiers and validators in all fields of all configured forms\n     * @param {Options} options Validation options\n     * @param {Configuration} config Validation configuration\n     */\n    setUpFV(options, config) {\n      const form = options.form.split(/[,|-]+\\s*|\\s+/).map(f => `#${f}`).join(\",\");\n      let forms = document.querySelectorAll(form);\n      if (!forms) forms = document.querySelectorAll(\"form\");\n      forms.forEach(form => {\n        config.validMessages[form.id] = {};\n        config.invalidMessages[form.id] = {};\n        form.classList.add(\"fv\");\n        form.noValidate = true;\n        this.addEventListenersToForm(form, options, config);\n        const fields = form.querySelectorAll(\"input, textarea, select\");\n        fields.forEach(field => {\n          this.domFieldsFeatures(form, field, options);\n          this.ignoreField(form, field, options);\n          this.setDependantValidation(form, field, options, config);\n          this.setOptionalValidation(form, field, options, config);\n          this.addEventListenersToFormFields(form, field, options, config);\n        });\n      });\n    }\n\n    /**\n     * Set suggestions to the specified input\n     * @param {HTMLInputElement} input Input element or input name\n     * @param {string[]} words Array of words to suggest\n     * @param {?Suggestion} [config] Suggestion list config\n     */\n    setSuggestions(input, words, config) {\n      let i = null;\n      if (!(input instanceof HTMLInputElement)) {\n        i = document.querySelector(`[name=${input}]`);\n        if (i) input = i;else {\n          console.error(`FormValidator: Failed to set the suggestions, the input '${input}' can not be found.`);\n          return;\n        }\n      }\n      if (!config) config = options.suggestionConfig;\n      inputSuggestion(input, words, config);\n    }\n\n    /**\n     * Set the text length restriction to the specified textarea\n     * @param {(string | HTMLTextAreaElement)} TextArea Textarea element or textarea name\n     * @param {number} max Text max length\n     * @param {?string} [info] Type of info to show (count, both, remaining)\n     */\n    setTextAreaLengthRestriction(TextArea, max, info) {\n      let t = null;\n      if (!(TextArea instanceof HTMLTextAreaElement)) {\n        t = document.querySelector(`[name=${TextArea}]`);\n        if (t) TextArea = t;else {\n          console.error(`FormValidator: Failed to set the text length restriction, the textarea '${TextArea}' can not be found.`);\n          return;\n        }\n      }\n      if (!info) info = \"count\";\n      if (![\"count\", \"both\", \"remaining\"].includes(info)) return;\n      textAreaLengthRestriction(TextArea, max, info);\n    }\n\n    /**\n     * Set the password info to the input type password\n     * @param {(string | HTMLInputElement)} input Input element or input name\n     */\n    setPasswordInfo(input) {\n      let i = null;\n      if (!(input instanceof HTMLInputElement)) {\n        i = document.querySelector(`[name=${input}]`);\n        if (i) input = i;else {\n          console.error(`FormValidator: Failed to set the password info, the input '${input}' can not be found.`);\n          return;\n        }\n      }\n      passwordInfo(input, options);\n    }\n\n    /**\n     * Validates the specified fields of the specified forms\n     * @param {?string} [form] Form or forms id to validate (comma separated)\n     * @param {?Options} [options] Validation options\n     */\n    validate(form, options) {\n      const opt = {\n          ...this.opt,\n          ...options\n        },\n        conf = this.conf;\n      let f;\n      if (!form) {\n        f = opt.form;\n      } else {\n        f = form ?? \"\";\n        f = f.trim().length > 0 ? f : opt.form;\n      }\n      opt.form = f;\n      this.setUpFV(opt, conf);\n    }\n\n    /**\n     * Sets the validation attributes on the form's fields then validates\n     * @param {JSONConfig} json Form's Validation configuration\n     * @param {?Options} [options] Validation options\n     */\n    fromJSON(json, options) {\n      const forms = Object.keys(json);\n      if (forms.length == 0) return;\n      const frm = json[0];\n      if (!frm) return;\n      const form = document.querySelector(Object.keys(json)[0]);\n      if (!form) {\n        console.error(`FormValidator: Failed to set the validation config on the from, '${Object.keys(json)[0]}' can not be found.`);\n        return;\n      }\n      const opt = {\n          ...this.opt,\n          ...options\n        },\n        conf = this.conf;\n      opt.form = Object.keys(json)[0];\n      for (const fld in frm) {\n        const field = form.querySelector(fld);\n        if (!field) {\n          console.error(`FormValidator: Failed to set the validation on the field, '${fld}' can not be found.`);\n          continue;\n        }\n        const element = frm[fld];\n        if (element.validators) field.setAttribute(opt.fieldValidateAttribute, element.validators);\n        if (element.modifiers) field.setAttribute(opt.fieldModifyAttribute, element.modifiers);\n        for (const dt in element.dataFV) {\n          const data = element.dataFV[dt];\n          const dt_fv = dt.includes(\"data-fv-\") ? dt : `data-fv-${dt}`;\n          field.setAttribute(dt_fv, data);\n        }\n      }\n      this.setUpFV(opt, conf);\n    }\n\n    /**\n     * Adds an Form Validator event to the field\n     * @param {string} event Event name\n     * @param {string} field Field id\n     * @param {ValidatorEvent} eventFunction Event function\n     */\n    addFormValidationEvent(event, field, eventFunction) {\n      const element = document.getElementById(field);\n      if (element) {\n        switch (event) {\n          case \"beforeValidate\":\n            configuration.onBeforeValidate[element.name].push(eventFunction);\n            break;\n          case \"valid\":\n            configuration.onValid[element.name].push(eventFunction);\n            break;\n          case \"invalid\":\n            configuration.onInvalid[element.name].push(eventFunction);\n            break;\n          case \"afterValidate\":\n            configuration.onAfterValidate[element.name].push(eventFunction);\n            break;\n          default:\n            console.error(`FormValidator: Failed to add the event, '${event}' is not a valid event.`);\n            break;\n        }\n      } else {\n        console.error(`FormValidator: Failed to add the event,  the field named '${field}' cant not be found.`);\n      }\n    }\n\n    /**\n     * Adds a validator to the global config\n     * @param {Validator} validator Validator config\n     */\n    addValidator(validator) {\n      const list = Object.keys(this.conf.validators);\n      if (list.includes(validator.name)) {\n        console.error(`FormValidator: Failed to add the validator, the name '${validator.name}' is already in use.`);\n        return;\n      }\n      this.conf.validators[validator.name] = validator;\n    }\n\n    /**\n     * Adds an async validator to the global config\n     * @param {AsyncValidator} validator Validator config\n     */\n    addAsyncValidator(validator) {\n      const list = Object.keys(this.conf.asyncValidators);\n      if (list.includes(validator.name)) {\n        console.error(`FormValidator: Failed to add the validator, the name '${validator.name}' is already in use.`);\n        return;\n      }\n      this.conf.asyncValidators[validator.name] = validator;\n    }\n\n    /**\n     * Adds a modifier to the global config\n     * @param {Modifier} modifier Modifier config\n     */\n    addModifier(modifier) {\n      const list = Object.keys(this.conf.modifiers);\n      if (list.includes(modifier.name)) {\n        console.error(`FormValidator: Failed to add the modifier, the name '${modifier.name}' is already in use.`);\n        return;\n      }\n      this.conf.modifiers[modifier.name] = modifier;\n    }\n\n    /**\n     * Restricts typed characters of the input\n     * @param {(string | HTMLInputElement)} input Input element or input id to restrict\n     * @param {string} type Accepted types of characters (numbers, letters, text, all, none)\n     * @param {?string} [reject] Additional rejected characters\n     * @param {?string} [accept] Additional accepted characters\n     */\n    restrict(input, type, reject, accept) {\n      let i = null;\n      if (!(input instanceof HTMLInputElement)) {\n        i = document.querySelector(`#${input}`);\n        if (i) input = i;else {\n          console.error(`FormValidator: Failed to set the characters restriction on the input, '${input}' can not be found.`);\n          return;\n        }\n      }\n      if (reject) reject = escapeRegExp(reject);\n      if (accept) accept = escapeRegExp(accept);\n      let acceptRegexp;\n      switch (type) {\n        case \"numbers\":\n          acceptRegexp = new RegExp(`[0-9${accept ?? \"\"}]`);\n          break;\n        case \"letters\":\n          acceptRegexp = new RegExp(`[a-zA-Z${accept ?? \"\"}]`);\n          break;\n        case \"text\":\n          acceptRegexp = new RegExp(`[a-zA-Z0-9\\\\s\\\\,\\\\;\\\\.${accept ?? \"\"}]`);\n          break;\n        case \"none\":\n          acceptRegexp = new RegExp(`[${accept ?? \"\"}]`);\n          break;\n        default:\n          acceptRegexp = /[.]/;\n          break;\n      }\n      const acceptDefault = [\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\", \"Enter\", \"Backspace\", \"Delete\", \"Control\", \"Shift\", \"CapsLock\", \"Tab\", \"AltGraph\", \"Home\", \"End\", \"PageUp\", \"PageDown\"];\n      const rejectRegexp = new RegExp(`[${reject}]`);\n      input.addEventListener(\"keydown\", function (e) {\n        if (!acceptDefault.includes(e.key) && (!acceptRegexp.test(e.key) || rejectRegexp.test(e.key))) e.preventDefault();\n      });\n      input.addEventListener(\"input\", function (e) {\n        if (!acceptRegexp.test(input.value) || rejectRegexp.test(input.value)) input.value = input.value.replace(new RegExp(`[^${acceptRegexp.source}]`, \"g\"), \"\");\n        input.value = input.value.replace(new RegExp(`[${rejectRegexp.source}]`, \"g\"), \"\");\n      });\n    }\n  }\n\n  /**\n   * Validates form field contents before submission.\n   * @param {?Options} [options] Form validation options\n   * @param {?Lang} [lang] Form validation language\n   * @returns {FormValidate} Form validation\n   */\n  function FormValidator(options, lang) {\n    return new FormValidate(options, lang);\n  }\n  //#endregion FormValidator\n});\n//# sourceMappingURL=FormValidator.js.map\n"],"names":["global","factory","define","amd","exports","mod","FormValidator","globalThis","self","this","_exports","Object","defineProperty","value","options","ignoredFieldsNames","validMessageClass","invalidMessageClass","validClass","invalidClass","validLabelClass","invalidLabelClass","inlineMessageClass","topMessagesClass","validMessagesClass","invalidMessagesClass","validMessagesPosition","invalidMessagesPosition","topMessagesTemplate","scrollToTopOnInvalid","lang","FormValidate","addValidClassOnAll","validateHiddenFields","validMessageCallback","undefined","invalidMessageCallback","form","parentField","fieldModifyAttribute","fieldValidateAttribute","fieldInvalidMessageAttribute","fieldValidMessageAttribute","fieldHelpMessageAttribute","modifyOnInput","validateOnInput","validateOnBlur","validateCheckboxRadioOnClick","showHelpMessagesOnFocus","addSuggestions","suggestionConfig","maxHeight","containerClass","optionClass","suggestionAttribute","lengthRestrictAttribute","lengthRestrictInfo","passwordSpecialChars","addPasswordInfo","passwordInfoClass","language","locale","currencyCode","dateFormat","timeFormat","validTitle","invalidTitle","notConfirmed","inv_required","inv_date","inv_time","inv_telephone","inv_ipv4","inv_ipv6","inv_domain","inv_email","inv_url","inv_numbers","inv_numberMax","inv_numberMin","inv_numberRange","inv_numberEqual","inv_numberStep","inv_lengthMax","inv_lengthMin","inv_lengthRange","inv_lengthEqual","inv_letters","inv_regexp","inv_alphanumeric","inv_color","inv_file_size","inv_file_type","inv_file_extension","inv_image_dimension","inv_image_heigh","inv_image_width","inv_image_ratio","inv_credit_card","inv_cvv","inv_confirmation","inv_security_answer","inv_strength","passwordConditionsTitle","passwordConditionUppercase","passwordConditionLowercase","passwordConditionSpecialChars","passwordConditionNumericChars","passwordConditionLength","passwordStrengthVeryWeak","passwordStrengthWeak","passwordStrengthNormal","passwordStrengthStrong","passwordStrengthVeryStrong","configuration","validators","asyncValidators","modifiers","stopValidation","onBeforeValidate","onValid","onInvalid","onAfterValidate","validMessages","invalidMessages","telephoneFormats","EC","cardInfo","AMEX","first","length","min","max","cvv","VISA","MAST","DISC","lengthMessage","name","modifierFunction","toLowerCase","toUpperCase","capitalizedWords","sentenceCase","camel_pascal","input","d","getAttribute","currency","decimals","parseInt","hasAttribute","setAttribute","addEventListener","test","currencyFormat","prt","split","Math","abs","parseFloat","toLocaleString","style","minimumFractionDigits","toFixed","trim","trimStart","trimEnd","validatorFunction","field","check","date","format","separator","replace","charAt","count","RegExp","exec","fParts","includes","regex","map","part","join","dParts","day","indexOf","month","year","Date","getDate","invalidMessage","messageKey","time","lastIndexOf","tParts","splitTime","hours","minutes","seconds","milliseconds","h24_h12","search","HTMLInputElement","type","querySelectorAll","setLengthMessage","file","multiple","setNumberMessage","let","val","checkbox","files","document","HTMLSelectElement","selectedOptions","range","match","minOrMax","num1","num2","number1","number2","allow","step","rangeVal","stepVal","r","s","escapeRegExp","flags","RGB","RGBA","HSL","HSLA","CMYK","HEX","colors","push","tot","digits","Number","province_code","substring","checker","pop","luhn","toCheck","slice","sum","factor","reverse","forEach","digit","sizeSTR","maxSize","size","endsWith","Array","from","typeList","every","extensionList","async","dimension","width","height","dim","await","getImageDimensions","IPv4Regex","IPv6Regex","IPv6Zone","IPv6Prefix","zerosRule","ip","segments","flatMap","p","filter","startsWith","Reduced0","zeros","domainRegex","labels","subdomains","equal","i","Ipv4NoGroups","IPv6NoGroups","domainNoGroups","emailRegex","domainPart","email","parts","localPart","unreserved","sub_delimiters","percentEncoded","URLRegex","tf","ms","str","toLocaleUpperCase","v","toLocaleLowerCase","notAccept","acceptHidden","acceptIgnored","not","triggerMessageCallback","isValid","message","checkPasswordStrength","password","strength","Promise","resolve","reader","FileReader","readAsDataURL","onload","e","target","image","Image","src","result","textAreaLengthRestriction","TextArea","info","container","createElement","classList","add","remaining","backgroundColor","window","getComputedStyle","getElementsByTagName","position","left","getBoundingClientRect","marginLeft","marginTop","before","innerText","dispatchEvent","Event","ResizeObserver","observe","inputSuggestion","words","settings","w","fillDatalist","currentFocus","datalist","firstChild","removeChild","word","option","onclick","display","appendChild","scrollTo","addActive","id","querySelector","setTimeout","regexp","key","preventDefault","simulateScroll","click","selected","remove","c","floor","offsetHeight","after","passwordInfo","additionalClass","content","innerHTML","strengthBar","condition","checkList","strengthLevel","toString","getFieldParent","parent","parentElement","nodeName","getInvalidMessage","validator","getValidMessage","validMessage","setStyles","valid_invalid","fieldClass","fieldRemove","parentClass","parentRemove","labelClass","labelRemove","f","label","removeStyles","setInlineMessage","span","fieldName","textContent","insertAdjacentElement","setTopMessage","validView","invalidView","insertAdjacentHTML","removeInlineMessages","setMessage","isHidden","toggleHelpMessage","show","custom","card","allowing","keys","creditCard","constructor","opt","conf","triggerEvent","event","state","fns","fn","validateField","config","list","searchSyncValidators","console","error","validateFieldAsync","searchAsyncValidators","validateAllFields","fields","valid","validateFieldController","validateAllFieldsAsync","element","modifyField","modifiersList","HTMLTextAreaElement","modifier","setDependantValidation","depending","fEvent","tEvent","_self","contains","setOptionalValidation","isIgnored","isSkipped","isCheckOrRadio","validate","domFieldsFeatures","fieldsToIgnore","suggestions","restriction","ignoreField","isArray","validatorsList","asyncValidator","syncValidators","syncValidator","addEventListenersToFormFields","addEventListenersToForm","scrollIntoView","behavior","stopImmediatePropagation","div","removeAttribute","setUpFV","forms","noValidate","setSuggestions","setTextAreaLengthRestriction","t","setPasswordInfo","fromJSON","json","frm","fld","dt","dataFV","data","dt_fv","addFormValidationEvent","eventFunction","getElementById","addValidator","addAsyncValidator","addModifier","restrict","reject","accept","acceptRegexp","acceptDefault","rejectRegexp","source"],"mappings":"AAAA,CAAA,SAAWA,EAAQC,GACK,YAAlB,OAAOC,QAAyBA,OAAOC,IACzCD,OAAO,CAAC,WAAYD,CAAO,EACC,aAAnB,OAAOG,QAChBH,EAAQG,OAAO,GAKfH,GAHII,EAAM,CACRD,QAAS,EACX,GACYA,OAAO,EACnBJ,EAAOM,cAAgBD,EAAID,QAAQE,cAEtC,EAAwB,aAAtB,OAAOC,WAA6BA,WAA6B,aAAhB,OAAOC,KAAuBA,KAAOC,KAAM,SAAUC,GAGvGC,OAAOC,eAAeF,EAAU,aAAc,CAC5CG,MAAO,CAAA,CACT,CAAC,EAGD,IAAMC,EAAU,CACdC,mBAAoB,GACpBC,kBAAmB,iBACnBC,oBAAqB,mBACrBC,WAAY,WACZC,aAAc,aACdC,gBAAiB,eACjBC,kBAAmB,cACnBC,mBAAoB,SACpBC,iBAAkB,QAClBC,mBAAoB,gBACpBC,qBAAsB,eACtBC,sBAAuB,SACvBC,wBAAyB,SACzBC,oBAAqB,2IACrBC,qBAAsB,EAjBxBnB,EAASJ,cA2mFT,SAAuBQ,EAASgB,GAC9B,OAAO,IAAIC,EAAajB,EAASgB,CAAI,CACvC,GA3lFEE,mBAAoB,CAAA,EACpBC,qBAAsB,CAAA,EACtBC,qBAAsBC,KAAAA,EACtBC,uBAAwBD,KAAAA,EACxBE,KAAM,OACNC,YAAa,YACbC,qBAAsB,oBACtBC,uBAAwB,qBACxBC,6BAA8B,sBAC9BC,2BAA4B,oBAC5BC,0BAA2B,mBAC3BC,cAAe,CAAA,EACfC,gBAAiB,CAAA,EACjBC,eAAgB,CAAA,EAChBC,6BAA8B,CAAA,EAC9BC,wBAAyB,CAAA,EACzBC,eAAgB,CAAA,EAChBC,iBAAkB,CAChBC,UAAW,QACXC,eAAgB,0BAChBC,YAAa,sBACf,EACAC,oBAAqB,sBACrBC,wBAAyB,sBACzBC,mBAAoB,QACpBC,qBAAsB,qDACtBC,gBAAiB,CAAA,EACjBC,kBAAmB,MACrB,EACMC,EAAW,CACfC,OAAQ,QACRC,aAAc,MACdC,WAAY,aACZC,WAAY,WACZC,WAAY,mBACZC,aAAc,qBACdC,aAAc,0BACdC,aAAc,eACdC,SAAU,uBACVC,SAAU,uBACVC,cAAe,+BACfC,SAAU,+BACVC,SAAU,+BACVC,WAAY,yBACZC,UAAW,iCACXC,QAAS,sBACTC,YAAa,yBACbC,cAAe,uCACfC,cAAe,0CACfC,gBAAiB,gCACjBC,gBAAiB,4BACjBC,eAAgB,2BAChBC,cAAe,0FACfC,cAAe,0FACfC,gBAAiB,yFACjBC,gBAAiB,+EACjBC,YAAa,sDACbC,WAAY,wBACZC,iBAAkB,mEAClBC,UAAW,+BACXC,cAAe,0CACfC,cAAe,gCACfC,mBAAoB,0CACpBC,oBAAqB,qCACrBC,gBAAiB,2CACjBC,gBAAiB,2CACjBC,gBAAiB,mCACjBC,gBAAiB,mCACjBC,QAAS,2BACTC,iBAAkB,6BAClBC,oBAAqB,yCACrBC,aAAc,iCACdC,wBAAyB,yBACzBC,2BAA4B,uBAC5BC,2BAA4B,uBAC5BC,8BAA+B,wBAC/BC,8BAA+B,wBAC/BC,wBAAyB,yBACzBC,yBAA0B,sBAC1BC,qBAAsB,iBACtBC,uBAAwB,mBACxBC,uBAAwB,mBACxBC,2BAA4B,uBAC9B,EACMC,EAAgB,CACpBC,WAAY,GACZC,gBAAiB,GACjBC,UAAW,GACXC,eAAgB,CAAA,EAChBC,iBAAkB,GAClBC,QAAS,GACTC,UAAW,GACXC,gBAAiB,GACjBC,cAAe,GACfC,gBAAiB,GACjBhE,SAAUA,CACZ,EACMiE,EAAmB,CACvBC,GAAI,CAAC,0DAA2D,uCAClE,EACMC,EAAW,CACfC,KAAM,CACJC,MAAO,CAAC,GACRC,OAAQ,CACNC,IAAK,GACLC,IAAK,EACP,EACAC,IAAK,CACP,EACAC,KAAM,CACJL,MAAO,CAAC,GACRC,OAAQ,CACNC,IAAK,GACLC,IAAK,EACP,EACAC,IAAK,CACP,EACAE,KAAM,CACJN,MAAO,CAAC,EAAG,GACXC,OAAQ,CACNC,IAAK,GACLC,IAAK,EACP,EACAC,IAAK,CACP,EACAG,KAAM,CACJP,MAAO,CAAC,GACRC,OAAQ,CACNC,IAAK,GACLC,IAAK,EACP,EACAC,IAAK,CACP,CACF,EAqKII,GAhKJvB,EAAcG,UAAiB,MAAI,CACjCqB,KAAM,QACNC,iBAAkB,SAAU9H,GAC1B,OAAOA,EAAM+H,YAAY,CAC3B,CACF,EAGA1B,EAAcG,UAAiB,MAAI,CACjCqB,KAAM,QACNC,iBAAkB,SAAU9H,GAC1B,OAAOA,EAAMgI,YAAY,CAC3B,CACF,EAGA3B,EAAcG,UAAmB,QAAI,CACnCqB,KAAM,UACNC,iBACSG,CAEX,EAGA5B,EAAcG,UAAoB,SAAI,CACpCqB,KAAM,WACNC,iBACSI,CAEX,EAGA7B,EAAcG,UAAiB,MAAI,CACjCqB,KAAM,QACNC,iBAAkB,SAAU9H,GAC1B,OAAOmI,EAAanI,EAAO,CAAA,CAAK,CAClC,EACA+B,cAAe,CAAA,CACjB,EAGAsE,EAAcG,UAAkB,OAAI,CAClCqB,KAAM,SACNC,iBAAkB,SAAU9H,GAC1B,OAAOmI,EAAanI,EAAO,CAAA,CAAI,CACjC,EACA+B,cAAe,CAAA,CACjB,EAGAsE,EAAcG,UAAoB,SAAI,CACpCqB,KAAM,WACNC,iBAAkB,SAAU9H,EAAOwB,EAAM4G,GACvC,IAAMC,EAAID,EAAME,aAAa,kBAAkB,EACzCtF,EAASoF,EAAME,aAAa,gBAAgB,GAAKhH,KAAAA,EACrDiH,EAAWH,EAAME,aAAa,kBAAkB,GAAKhH,KAAAA,EACrDkH,EAAWH,EAAII,SAASJ,CAAC,EAAI/G,KAAAA,EAW/B,GAVK8G,EAAMM,aAAa,2BAA2B,GACjDN,EAAMO,aAAa,4BAA6B3I,CAAK,EAEvDoI,EAAMQ,iBAAiB,QAAS,KAC9BR,EAAMpI,MAAQoI,EAAME,aAAa,2BAA2B,GAAKtI,CACnE,CAAC,EACDoI,EAAMQ,iBAAiB,QAAS,KAC9BR,EAAMO,aAAa,4BAA6BP,EAAMpI,KAAK,CAC7D,CAAC,EACDA,EAAQoI,EAAME,aAAa,2BAA2B,EAClD,SAASO,KAAK7I,CAAK,EAAG,OAAOA,EAC1B8I,IAu/BDC,EAHc/I,EAp/BEA,EAo/BKiB,EAp/BE8B,EAq/B/B,GAAI,CAAC,gBAAgB8F,KAAK7I,CAAK,EAAG,OAAOA,EACpCwI,IACGO,EAAM/I,EAAMgJ,MAAM,GAAG,EAC3BR,EAAWO,EAAI1B,QAEjBrE,EAAUA,GAAS/B,EAAK+B,OACxBuF,EAAYA,GAAWtH,EAAKgC,aAC5BuF,EAAgC,IAArBS,KAAKC,IAAIV,CAAQ,EAAU,IAAMS,KAAKC,IAAIV,CAAQ,EAC7D,IACE,OAAOW,WAAWnJ,CAAK,EAAEoJ,eAAepG,EAAQ,CAC9CqG,MAAO,WACPd,SAAUA,EACVe,sBAAuBd,CACzB,CAAC,CAGH,CAFE,MACA,OAAOW,WAAWnJ,CAAK,EAAEuJ,QAAQf,CAAQ,CAC3C,CApgCA,EACAzG,cAAe,CAAA,CACjB,EAGAsE,EAAcG,UAAgB,KAAI,CAChCqB,KAAM,OACNC,iBAAkB,SAAU9H,GAC1B,OAAOA,EAAMwJ,KAAK,CACpB,EACAzH,cAAe,CAAA,CACjB,EAGAsE,EAAcG,UAAqB,UAAI,CACrCqB,KAAM,YACNC,iBAAkB,SAAU9H,GAC1B,OAAOA,EAAMyJ,UAAU,CACzB,EACA1H,cAAe,CAAA,CACjB,EAGAsE,EAAcG,UAAsB,WAAI,CACtCqB,KAAM,aACNC,iBAAkB,SAAU9H,GAC1B,OAAOA,EAAM0J,QAAQ,CACvB,EACA3H,cAAe,CAAA,CACjB,EAKAsE,EAAcC,WAAiB,KAAI,CACjCuB,KAAM,OACN8B,kBAAmB,SAAU3J,EAAOwB,EAAMoI,EAAO3J,EAASgB,GAElD4I,EAmxBV,SAAyBC,EAAMC,GAC7B,IAAMC,EAAYD,EAAO/B,YAAY,EAAEiC,QAAQ,SAAU,EAAE,EAAEC,OAAO,CAAC,EACrE,GAAI,CA5CN,SAA4BH,EAAQC,GAClC,GAAI,WAAWnB,KAAKmB,CAAS,EAAG,OAChC,IAAMG,GAASC,OAAO,IAAIA,OAAO,KAAKJ,CAAW,CAAC,EAAEK,KAAKN,CAAM,GAAK,IAAI1C,OACxE,GAAI0C,EAAOE,QAAQD,EAAW,EAAE,EAAE3C,QAAU0C,EAAO1C,OAAS8C,EAAO,OACnE,GAAI,IAAIC,eAAeJ,IAAY,EAAEnB,KAAKkB,CAAM,EAAG,OACnD,IAAMO,EAASP,EAAOf,MAAMgB,CAAS,EACrC,OAAQM,EAAOjD,QACb,KAAK,EACH,GAAKiD,EAAOC,SAAS,MAAM,GAAMD,EAAOC,SAAS,IAAI,GAAMD,EAAOC,SAAS,IAAI,EAC/E,MADkF,OAEpF,KAAK,EACH,GAAKD,EAAOC,SAAS,MAAM,GAAMD,EAAOC,SAAS,IAAI,EACrD,MADwD,OAE1D,KAAK,EACH,GAAKD,EAAOC,SAAS,MAAM,EAC3B,MAD8B,OAEhC,QACE,MACJ,CACA,OAAO,CACT,EAwB0BR,EAAO/B,YAAY,EAAGgC,CAAS,EAAG,MAAO,KACjE,IAAMQ,EAjBR,SAAmBT,EAAQC,GACzB,MAAO,IAAMD,EAAOf,MAAMgB,CAAS,EAAES,IAAIC,GACnCA,EAAKH,SAAS,MAAM,EAAU,SAAqB,QACxD,EAAEI,KAAK,KAAKX,CAAW,EAAI,GAC9B,EAa0BD,EAAO/B,YAAY,EAAGgC,CAAS,EACvD,GAAI,CAAC,IAAII,OAAOI,CAAK,EAAE3B,KAAKiB,CAAI,EAAG,MAAO,UACpCc,EAASd,EAAKd,MAAMgB,CAAS,EACjCM,EAASP,EAAO/B,YAAY,EAAEgB,MAAMgB,CAAS,EACzCa,EAAMpC,SAASmC,EAAON,EAAOQ,QAAQ,IAAI,GAAI,EAAE,EACnDC,EAAQtC,SAASmC,EAAON,EAAOQ,QAAQ,IAAI,GAAI,EAAE,EACjDE,EAAOvC,SAASmC,EAAON,EAAOQ,QAAQ,MAAM,GAAI,EAAE,EACpD,GAAIE,EAAO,GAAY,KAAPA,EAAa,MAAO,UACpC,GAAoB,EAAhBV,EAAOjD,QAAgB0D,IAAUA,EAAQ,GAAa,GAARA,GAAa,MAAO,UACtE,GAAqB,GAAjBT,EAAOjD,QACLwD,IAAQA,EAAM,GAAKA,EAAM,IAAII,KAAKD,EAAMD,EAAQ,EAAG,CAAC,EAAEG,QAAQ,GAAI,MAAO,UAE/E,MAAO,IACT,EAnyBkClL,EADf4J,EAAMtB,aAAa,qBAAqB,GAAKrH,EAAKiC,UACtB,EAC3C,MAAa,MAAT2G,GACFjK,KAAKuL,eAAiBlK,EAAKqC,aACpB,CAAA,GAEI,WAATuG,IACFjK,KAAKuL,eAAiBlK,EAAKuC,SACpB,CAAA,EAGX,EACA2H,eAAgBpI,EAASO,aACzB8H,WAAY,MACd,EAGA/E,EAAcC,WAAiB,KAAI,CACjCuB,KAAM,OACN8B,kBAAmB,SAAU3J,EAAOwB,EAAMoI,EAAO3J,EAASgB,GAElD4I,EAgzBV,SAAyBwB,EAAMtB,GAC7B,GAAI,CAAC,8CAA8ClB,KAAKkB,CAAM,EAAG,MAAO,KACxE,IAAMS,EAhBR,SAAmBT,GACjB,MAAO,IAAMA,EAAOE,QAAQ,IAAK,EAAE,EAAEjB,MAAM,GAAG,EAAEyB,IAAIC,GAC9CA,EAAKH,SAAS,GAAG,EAAU,oBACxB,QACR,EAAEI,KAAK,OAAO,GAA+B,CAAC,EAA3BZ,EAAOuB,YAAY,GAAG,EAAS,oCAAsC,IAAM,GACjG,EAW0BvB,CAAM,EAC9B,GAAI,CAAC,IAAIK,OAAOI,EAAO,GAAG,EAAE3B,KAAKwC,CAAI,EAAG,MAAO,UAC/C,IAAME,EAASC,EAAUH,EAAKpB,QAAQ,+BAAgC,EAAE,CAAC,EACvEK,EAASkB,EAAUzB,EAAOE,QAAQ,IAAK,EAAE,CAAC,EACtCwB,EAAQhD,SAAS8C,EAAOjB,EAAOQ,QAAQ,IAAI,GAAI,EAAE,EACrDY,EAAUjD,SAAS8C,EAAOjB,EAAOQ,QAAQ,IAAI,GAAI,EAAE,EACnDa,EAAUlD,SAAS8C,EAAOjB,EAAOQ,QAAQ,IAAI,GAAI,EAAE,EACnDc,EAAenD,SAAS8C,EAAOjB,EAAOQ,QAAQ,KAAK,GAAI,EAAE,EACzDe,EAAgC,CAAC,GAAvB9B,EAAO+B,OAAO,GAAG,EAAU,GAAK,GAC5C,OAAIL,EAAQ,GAAaI,EAARJ,GACbC,EAAU,GAAe,GAAVA,GACfC,IAAYA,EAAU,GAAe,GAAVA,IAC3BC,IAAiBA,EAAe,GAAoB,IAAfA,GAA4B,UAC9D,IACT,EAh0BkC5L,EADf4J,EAAMtB,aAAa,qBAAqB,GAAKrH,EAAKkC,UACtB,EAC3C,MAAa,MAAT0G,GACFjK,KAAKuL,eAAiBlK,EAAKqC,aACpB,CAAA,GAEI,WAATuG,IACFjK,KAAKuL,eAAiBlK,EAAKwC,SACpB,CAAA,EAGX,EACA0H,eAAgBpI,EAASO,aACzB8H,WAAY,MACd,EAKA/E,EAAcC,WAAqB,SAAI,CACrCuB,KAAM,WACN8B,kBAAmB,SAAU3J,EAAOwB,EAAMoI,EAAO3J,EAASgB,GACxD,IAAM4G,EAAO+B,EAAMtB,aAAa,MAAM,EACtC,OAAIsB,aAAiBmC,kBAAkC,YAAdnC,EAAMoC,KAC2C,EAAjFxK,EAAKyK,iDAAiDpE,aAAgB,EAAER,OACtEuC,aAAiBmC,kBAAkC,SAAdnC,EAAMoC,KACiC,EAA9ExK,EAAKyK,8CAA8CpE,aAAgB,EAAER,OAE/C,EAAtBrH,EAAMwJ,KAAK,EAAEnC,MAExB,EACA8D,eAAgBpI,EAASQ,aACzB6H,WAAY,UACd,EACoBrI,EAASO,cAS7B,SAAS4I,EAAiBC,EAAMC,EAAUvC,GACxC,OAAIsC,EAAavE,EAAcqC,QAAQ,eAAgB,EAAE,EAAEA,QAAQ,KAAM,EAAE,EAAEA,QAAQ,eAAgB,EAAE,EAAEA,QAAQ,eAAgB,EAAE,EAAWmC,GAAYvC,EAAcjC,EAAcqC,QAAQ,eAAgB,EAAE,EAAEA,QAAQ,KAAM,EAAE,EAAEA,QAAQ,eAAgB,EAAE,EAAEA,QAAQ,KAAM,EAAE,EAAcrC,EAAcqC,QAAQ,eAAgB,EAAE,EAAEA,QAAQ,KAAM,EAAE,EAAEA,QAAQ,eAAgB,EAAE,EAAEA,QAAQ,KAAM,EAAE,CACxY,CA6DA,SAASoC,EAAiBxC,EAAO5I,GAC/B,OAAQ4I,EAAM,IACZ,IAAK,MACH,OAAO5I,EAAKgD,cAAcgG,QAAQ,QAASJ,EAAM,EAAE,EACrD,IAAK,MACH,OAAO5I,EAAKiD,cAAc+F,QAAQ,QAASJ,EAAM,EAAE,EACrD,IAAK,QACH,OAAO5I,EAAKkD,gBAAgB8F,QAAQ,UAAcJ,EAAM,GAAT,KAAgBA,EAAM,EAAI,EAC3E,IAAK,QACH,OAAO5I,EAAKmD,gBAAgB6F,QAAQ,UAAWJ,EAAM,EAAE,EACzD,IAAK,OACH,OAAO5I,EAAKoD,eAAe4F,QAAQ,SAAUJ,EAAM,EAAE,EACvD,QACE,OAAO5I,EAAK+C,WAChB,CACF,CAzEAqC,EAAcC,WAAmB,OAAI,CACnCuB,KAAM,SACN8B,kBAAmB,SAAU3J,EAAOwB,EAAMoI,EAAO3J,EAASgB,GACxD,IAAMoG,EAASuC,EAAMtB,aAAa,gBAAgB,EAClD,GAAI,CAACjB,EAEH,OADAzH,KAAKuL,eAAiBlK,EAAKqC,aACpB,CAAA,EAETgJ,IAAIC,EAAMvM,EAAMqH,OACd8E,EAAO,CAAA,EACPC,EAAW,CAAA,EACXI,EAAW,CAAA,EACT5C,aAAiBmC,kBAAkC,QAAdnC,EAAMoC,MAAkBpC,EAAM6C,QACrEN,EAAO,CAAA,EACPI,EAAM3C,EAAM6C,MAAMpF,QAEhBuC,aAAiBmC,kBAAkC,YAAdnC,EAAMoC,OAC7CO,EAAMG,SAAST,+BAA+BrC,EAAM/B,eAAe,EAAER,OACrEmF,EAAW,CAAA,GAET5C,aAAiB+C,mBAAqB/C,EAAMlB,aAAa,UAAU,IACrE0D,EAAW,CAAA,EACXG,EAAM3C,EAAMgD,gBAAgBvF,QAE9B,IAAMwC,EAy1BV,SAA2B7J,EAAO6M,GAChC,GAAIA,EAAMtC,SAAS,IAAI,IAAMsC,EAAMtC,SAAS,KAAK,GAAKsC,EAAMtC,SAAS,KAAK,GAAI,MAAO,CAAC,MAChFuC,EAAQ1C,OAAO,qCAAqC,EAAEC,KAAKwC,CAAK,EACtE,GAAI,CAACC,EAAO,MAAO,CAAC,MACpB,GAAM,CAAA,CAAGC,EAAUC,EAAMC,GAAQH,EAC/BxF,EAAmB,QAAbyF,EACNxF,EAAmB,QAAbwF,EACNG,EAAUzE,SAASuE,EAAM,EAAE,EAC3BG,EAAUF,EAAOxE,SAASwE,EAAM,EAAE,EAAI3L,KAAAA,EACxC,OAAIgG,GAAOtH,EAAQkN,EAAgB,CAAC,MAAOF,GACvCzF,GAAe2F,EAARlN,EAAwB,CAAC,MAAOgN,GAC3B1L,KAAAA,IAAZ6L,IAA0BnN,EAAQkN,GAAmBC,EAARnN,GAAyB,CAAC,QAASgN,EAAMC,GACrF3F,GAAQC,GAAmBjG,KAAAA,IAAZ6L,GAAyBnN,IAAUkN,EAChD,CAAC,MAD+D,CAAC,QAASF,EAEnF,EAv2BoCT,EAAKlF,CAAM,EAC3C,OAAQwC,EAAM,IACZ,IAAK,MAGH,OAFAjC,EAAgB3G,EAAKqD,cAAc2F,QAAQ,QAASJ,EAAM,EAAE,EAC5DjK,KAAKuL,eAAiBe,EAAiBC,EAAMC,EAAUI,CAAQ,EACxD,CAAA,EACT,IAAK,MAGH,OAFA5E,EAAgB3G,EAAKsD,cAAc0F,QAAQ,QAASJ,EAAM,EAAE,EAC5DjK,KAAKuL,eAAiBe,EAAiBC,EAAMC,EAAUI,CAAQ,EACxD,CAAA,EACT,IAAK,QAGH,OAFA5E,EAAgB3G,EAAKuD,gBAAgByF,QAAQ,QAASJ,EAAM,EAAE,EAAEI,QAAQ,QAASJ,EAAM,EAAE,EACzFjK,KAAKuL,eAAiBe,EAAiBC,EAAMC,EAAUI,CAAQ,EACxD,CAAA,EACT,IAAK,QAGH,OAFA5E,EAAgB3G,EAAKwD,gBAAgBwF,QAAQ,UAAWJ,EAAM,EAAE,EAChEjK,KAAKuL,eAAiBe,EAAiBC,EAAMC,EAAUI,CAAQ,EACxD,CAAA,EACT,IAAK,KAEH,OADA5M,KAAKuL,eAAiBlK,EAAKqC,aACpB,CAAA,CACX,CACA,MAAO,CAAA,CACT,EACA6H,eAAgBvD,EAChBwD,WAAY,QACd,EA0BA/E,EAAcC,WAAoB,QAAI,CACpCuB,KAAM,UACN8B,kBAAmB,SAAU3J,EAAOwB,EAAMoI,EAAO3J,EAASgB,GACxD,IAKQ4L,EALFO,GAASxD,EAAMtB,aAAa,uBAAuB,GAAK,IAAIU,MAAM,eAAe,EACvF,MAAA,EAAIoE,EAAM7C,SAAS,YAAY,GAAMvK,CAAAA,EAAMuK,SAAS,GAAG,GAClD6C,CAAAA,EAAM7C,SAAS,UAAU,GAAM6C,CAAAA,EAAM7C,SAAS,YAAY,GAAKvK,EAAMuK,SAAS,GAAG,GACjF6C,CAAAA,EAAM7C,SAAS,SAAS,GAAKvK,EAAMuK,SAAS,GAAG,GAChD,CAAA,oBAAoB1B,KAAK7I,CAAK,IAC1B6M,EAAQjD,EAAMtB,aAAa,uBAAuB,GAAK,GAC3D+E,EAAOzD,EAAMtB,aAAa,sBAAsB,GAAK,IACrDuB,EAqwBR,SAAwBuD,EAAOpN,EAAOsN,EAAUC,GAC9CjB,IACEkB,EAAI,CAAC,MACLC,EAAI,CAAC,MACHL,EAAM7C,SAAS,OAAO,GAEZ,OADZiD,EAnCJ,SAA2BJ,EAAOE,GAChChB,IAAIkB,EAAI,CAAC,MACLJ,EAAM7C,SAAS,YAAY,GAAK,CAAC+C,EAAS/C,SAAS,GAAG,IAAGiD,EAAI,CAAC,OAC7DJ,EAAM7C,SAAS,UAAU,GAAM6C,EAAM7C,SAAS,YAAY,GAAK+C,CAAAA,EAAS/C,SAAS,GAAG,IAAGiD,EAAI,CAAC,OAC7F,CAACJ,EAAM7C,SAAS,SAAS,GAAK+C,EAAS/C,SAAS,GAAG,IAAGiD,EAAI,CAAC,OAC/D,OAAOA,CACT,EA6B0BJ,EAAOE,CAAQ,GAC/B,KAAYE,EAxEtB,SAA0BxN,EAAO6M,GAC/B,GAAIA,EAAMtC,SAAS,IAAI,IAAMsC,EAAMtC,SAAS,KAAK,GAAKsC,EAAMtC,SAAS,KAAK,GAAI,MAAO,CAAC,MAChFuC,EAAQ1C,OAAO,yEAAyE,EAAEC,KAAKwC,CAAK,EAC1G,GAAI,CAACC,EAAO,MAAO,CAAC,MACpB,GAAM,CAAA,CAAGC,EAAUC,EAAMC,GAAQH,EAC/BxF,EAAmB,QAAbyF,EACNxF,EAAmB,QAAbwF,EACNG,EAAU/D,WAAW6D,CAAI,EACzBG,EAAUF,EAAO9D,WAAW8D,CAAI,EAAI3L,KAAAA,EACtC,OAAIgG,GAAOtH,EAAQkN,EAAgB,CAAC,MAAOF,GACvCzF,GAAe2F,EAARlN,EAAwB,CAAC,MAAOgN,GAC3B1L,KAAAA,IAAZ6L,IAA0BnN,EAAQkN,GAAmBC,EAARnN,GAAyB,CAAC,QAASgN,EAAMC,GACrF3F,GAAQC,GAAmBjG,KAAAA,IAAZ6L,GAAyBnN,IAAUkN,EAChD,CAAC,MAD+D,CAAC,QAASF,EAEnF,EA0D2ChN,EAAOsN,CAAQ,GAEpDF,EAAM7C,SAAS,MAAM,GAEX,OADZkD,EAzBJ,SAA0BL,EAAOG,GAC/BjB,IAAImB,EAAI,CAAC,MACLL,EAAM7C,SAAS,YAAY,GAAK,CAACgD,EAAQhD,SAAS,GAAG,IAAGkD,EAAI,CAAC,OAC5DL,EAAM7C,SAAS,UAAU,GAAM6C,EAAM7C,SAAS,YAAY,GAAKgD,CAAAA,EAAQhD,SAAS,GAAG,IAAGkD,EAAI,CAAC,OAC5F,CAACL,EAAM7C,SAAS,SAAS,GAAKgD,EAAQhD,SAAS,GAAG,IAAGkD,EAAI,CAAC,OAC9D,OAAOA,CACT,EAmByBL,EAAOG,CAAO,GAC7B,KAAYE,EAtDtB,SAAyBzN,EAAOqN,GAE9B,GAAI,CADU,oBACHxE,KAAKwE,CAAI,EAAG,MAAO,CAAC,MAC/B,IAAMI,EAAItE,WAAWkE,CAAI,EACzB,OAAIrN,EAAQyN,GAAM,EAAU,CAAC,OAAQJ,GAC9B,CAAC,KACV,EAgD0CrN,EAAOuN,CAAO,GAGtD,MADQ,CAAC,CAAC,GAAGC,GAAI,CAAC,GAAGC,GAEvB,EAnxB+BL,EAAOjE,WAAWnJ,CAAK,EAAG6M,EAAOQ,CAAI,GACpD,GAAG,IAAqB,MAAfxD,EAAM,GAAG,IAC1BjK,KAAKuL,eAAiBkB,EAAiBxC,EAAM,GAAI5I,CAAI,EAC9C,GAEL4I,EAAM,GAAG,IAAqB,MAAfA,EAAM,GAAG,KAC1BjK,KAAKuL,eAAiBkB,EAAiBxC,EAAM,GAAI5I,CAAI,EAC9C,IAIb,EACAkK,eAAgBpI,EAASiB,YACzBoH,WAAY,SACd,EAGA/E,EAAcC,WAAoB,QAAI,CACpCuB,KAAM,UACN8B,kBAAmB,SAAU3J,EAAOwB,EAAMoI,EAAO3J,EAASgB,GAClDmM,EAAQxD,EAAMtB,aAAa,uBAAuB,GAAK,GAE7D,MAAKkC,CAAAA,CADS,IAAIJ,eAAesD,EAAaN,CAAK,OAAQ,GAAG,EACnDvE,KAAK7I,CAAK,IACC,GAAhBoN,EAAM/F,OAAazH,KAAKuL,eAAiBpI,EAAS2B,YAAYuF,QAAQ,aAAc,EAAE,EAAOrK,KAAKuL,eAAiBpI,EAAS2B,YAAYuF,QAAQ,IAAK,EAAE,EAAEA,QAAQ,IAAK,EAAE,EAAEA,QAAQ,aAAcmD,CAAK,EAClM,CAAA,EAGX,EACAjC,eAAgBpI,EAASO,aACzB8H,WAAY,SACd,EAYA/E,EAAcC,WAAyB,aAAI,CACzCuB,KAAM,eACN8B,kBAAmB,SAAU3J,EAAOwB,EAAMoI,EAAO3J,EAASgB,GAClDmM,EAAQxD,EAAMtB,aAAa,uBAAuB,GAAK,GAE7D,MAAKkC,CAAAA,CADS,IAAIJ,kBAAkBsD,EAAaN,CAAK,OAAQ,GAAG,EACtDvE,KAAK7I,CAAK,IACnBJ,KAAKuL,eAVW,IADUiC,EAWmBA,GAVvC/F,OAAoBtE,EAAS6B,iBAAiBqF,QAAQ,cAAe,EAAE,EAAclH,EAAS6B,iBAAiBqF,QAAQ,IAAK,EAAE,EAAEA,QAAQ,IAAK,EAAE,EAAEA,QAAQ,cAAemD,CAAK,EAW5K,CAAA,EAGX,EACAjC,eAAgBpI,EAASO,aACzB8H,WAAY,cACd,EAGA/E,EAAcC,WAAkB,MAAI,CAClCuB,KAAM,QACN8B,kBAAmB,SAAU3J,EAAOwB,EAAMoI,EAAO3J,EAASgB,GACxD,IAAMuJ,EAAQZ,EAAMtB,aAAa,eAAe,GAAK,GAC/CqF,EAAQ/D,EAAMtB,aAAa,eAAe,GAAKhH,KAAAA,EACrD,MAAKkJ,CAAAA,CAAAA,GACE,IAAIJ,OAAOI,EAAOmD,CAAK,EAAE9E,KAAK7I,CAAK,CAC5C,EACAmL,eAAgBpI,EAAS4B,WACzByG,WAAY,OACd,EAGA/E,EAAcC,WAAsB,UAAI,CACtCuB,KAAM,YACN8B,kBAAmB,SAAU3J,EAAOwB,EAAMoI,EAAO3J,EAASgB,GAClD8I,EAASH,EAAMtB,aAAa,0BAA0B,GAAK,KACjE,MAAItB,CAAAA,CAAAA,EAAiB+C,IAAgB,IAAIK,OAAOpD,EAAiB+C,GAAQY,KAAK,GAAG,EAAEV,QAAQ,MAAO,EAAE,CAAC,EAAEpB,KAAK7I,CAAK,CAEnH,EACAmL,eAAgBpI,EAASW,cACzB0H,WAAY,WACd,EAGA,IAAMwC,EAAM,sIACNC,EAAO,sKACPC,EAAM,iHACNC,EAAO,gJACPC,EAAO,0IACPC,EAAM,8EAGZ5H,EAAcC,WAAkB,MAAI,CAClCuB,KAAM,QACN8B,kBAAmB,SAAU3J,EAAOwB,EAAMoI,EAAO3J,EAASgB,GACxD,IAAMiN,EAAStE,EAAMtB,aAAa,gBAAgB,GAAK,GACjDkC,EAAQ,GAQd,OAP4B,GAAxB0D,EAAO1E,KAAK,EAAEnC,OAAamD,EAAM2D,SAASP,OAASC,OAAUC,OAASC,OAAUC,OAAUC,IAAM,GAC9FC,EAAOpC,OAAO,QAAQ,GAAGtB,EAAM2D,SAASP,OAASC,IAAO,EACxDK,EAAOpC,OAAO,QAAQ,GAAGtB,EAAM2D,SAASL,OAASC,IAAO,EACxDG,EAAOpC,OAAO,OAAO,GAAGtB,EAAM2D,SAASH,IAAO,EAC9CE,EAAOpC,OAAO,YAAY,GAAGtB,EAAM2D,SAASF,IAAM,GAGpDpE,CAAAA,CADU,IAAIO,OAAsB,EAAfI,EAAMnD,OAAamD,EAAMG,KAAK,GAAG,EAAIH,EAAM,GAAI,GAAG,EACjE3B,KAAK7I,CAAK,CAEtB,EACAmL,eAAgBpI,EAAS8B,UACzBuG,WAAY,OACd,EAKA/E,EAAcC,WAAsB,UAAI,CACtCuB,KAAM,YACN8B,kBAAmB,SAAU3J,EAAOwB,EAAMoI,EAAO3J,EAASgB,GACxD,IAQAmN,EARA,MAAI,CAAA,KAAKvF,KAAK7I,CAAK,GACC,IAAhBA,EAAMqH,QAEV,EAAiB,IADXgH,EAASrO,EAAMgJ,MAAM,EAAE,EAAEyB,IAAI6D,MAAM,GAC9B,IAEU,IADfC,EAAgB9F,SAASzI,EAAMwO,UAAU,EAAG,CAAC,CAAC,IACV,GAAhBD,GAAuC,IAAjBA,IAC1CE,EAAUJ,EAAOK,IAAI,EACvBN,EAAMO,EAAKN,CAAM,GAEdD,EADU,GAAXK,EAAe,GAAKL,EAAMA,KACjBK,GACjB,EACAtD,eAAgB,oCAChBC,WAAY,WACd,EAgBA/E,EAAcC,WAAmB,OAAI,CACnCuB,KAAM,SACN8B,kBAAmB,SAAU3J,EAAOwB,EAAMoI,EAAO3J,GAC/C,GAAI,KAAK4I,KAAK7I,CAAK,EAAG,MAAO,CAAA,EAC7B,GAAoB,IAAhBA,EAAMqH,OAAc,MAAO,CAAA,EAC/B,IAAMgH,EAASrO,EAAMgJ,MAAM,EAAE,EAAEyB,IAAI6D,MAAM,EACzC,GAAiB,GAAbD,EAAO,IAAwB,GAAbA,EAAO,GAAS,MAAO,CAAA,EAC7C,IAAME,EAAgB9F,SAASzI,EAAMwO,UAAU,EAAG,CAAC,CAAC,EACpD,GAAqB,GAAjBD,GAAsC,GAAhBA,GAAuC,IAAjBA,EAAqB,MAAO,CAAA,EAC5E,IAAMK,EAAUP,EAAOQ,MAAM,EAAG,EAAE,EAC5BhF,EAAQwE,EAAO,GAAK,EAAI,GAAK,GACnC,GAnByBrO,EAmBAA,GAnBRqO,EAmBAA,GAlBR,GAAK,GAA4B,OAAvBrO,EAAMwO,UAAU,EAAE,GACtB,GAAbH,EAAO,IAAkC,OAAvBrO,EAAMwO,UAAU,EAAE,GACvB,GAAbH,EAAO,IAAiC,QAAtBrO,EAAMwO,UAAU,CAAC,EAgBJ,MAAO,CAAA,EACvB,GAAbH,EAAO,IAASO,EAAQF,IAAI,EAChC,IAAMD,EAAUG,EAAQF,IAAI,EACxBN,GAAMC,EAAO,GAAK,EAAIM,EA0yB9B,SAAkBN,GAChB/B,IAAIwC,EAAM,EACNC,EAAS,EAMb,OALAV,EAAOQ,MAAM,EAAEG,QAAQ,EAAEC,QAAQC,IAC/BJ,GAAOI,EAAQH,EAEF,EADbA,EAAAA,IACgBA,EAAS,EAC3B,CAAC,EACMD,EAAM,EACf,GAnzBmCT,CAAM,EAErC,OADiB,GAAXI,EAAe5E,EAAQuE,EAAMA,KACpBK,CACjB,EACAtD,eAAgB,gCAChBC,WAAY,QACd,EAKA/E,EAAcC,WAAsB,UAAI,CACtCuB,KAAM,YACN8B,kBAAmB,SAAU3J,EAAOwB,EAAMoI,EAAO3J,EAASgB,GACxD,GAAI2I,aAAiBmC,kBAAkC,QAAdnC,EAAMoC,KAAgB,CAC7D,IAAMS,EAAQ7C,EAAM6C,MACpB,GAAIA,EAAO,CACT,IAGWN,EAHLgD,EAAUvF,EAAMtB,aAAa,uBAAuB,GAAK,MACzD8G,GAyyBZC,GADyBA,EAxyBeF,GAyyB5BnH,YAAY,GACfsH,SAAS,IAAI,EACqB,KAAlC7G,SAAS4G,EAAKR,MAAM,EAAG,CAAC,CAAC,EAAG,EAAE,EAAW,KAAO,KAC9CQ,EAAKC,SAAS,IAAI,EACc,KAAlC7G,SAAS4G,EAAKR,MAAM,EAAG,CAAC,CAAC,EAAG,EAAE,EAAW,KACvCQ,EAAKC,SAAS,IAAI,EACc,KAAlC7G,SAAS4G,EAAKR,MAAM,EAAG,CAAC,CAAC,EAAG,EAAE,EAC5BQ,EAAKC,SAAS,GAAG,EACnB7G,SAAS4G,EAAKR,MAAM,EAAG,CAAC,CAAC,EAAG,EAAE,EAE9BpG,SAAS4G,EAAM,EAAE,EAlzBpB/C,IAAIzC,EAAQ,CAAA,EACZ,IAAWsC,KAAQoD,MAAMC,KAAK/C,CAAK,EACjC,GAAIN,EAAKkD,KAAOD,EAAS,CACvBvF,EAAQ,CAAA,EACR,KACF,CAKF,OAHKA,IACHjK,KAAKuL,eAAiBlK,EAAK6D,cAAcmF,QAAQ,QAASkF,CAAO,GAE5DtF,CACT,CACF,CA2xBJ,IAA2BwF,EA1xBvB,MAAO,CAAA,CACT,EACAlE,eAAgBpI,EAASO,aACzB8H,WAAY,WACd,EAGA/E,EAAcC,WAAsB,UAAI,CACtCuB,KAAM,YACN8B,kBAAmB,SAAU3J,EAAOwB,EAAMoI,EAAO3J,EAASgB,GACxD,GAAI2I,aAAiBmC,kBAAmC,SAAfnC,EAAMoC,KAAiB,CAC9D,IAAMS,EAAQ7C,EAAM6C,MACpB,GAAIA,EAAO,CACT,IAAMgD,GAAY7F,EAAMtB,aAAa,mBAAmB,GAAK,IAAIU,MAAM,eAAe,EAChFa,EAAQ0F,MAAMC,KAAK/C,CAAK,EAAEiD,MAAMvD,GAAQsD,EAASlF,SAAS4B,EAAKH,IAAI,CAAC,EAI1E,OAHKnC,IACHjK,KAAKuL,eAAiBlK,EAAK8D,cAAckF,QAAQ,aAAcwF,EAAS9E,KAAK,IAAI,IAAI,GAEhFd,CACT,CACF,CACA,MAAO,CAAA,CACT,EACAsB,eAAgBpI,EAASO,aACzB8H,WAAY,WACd,EAGA/E,EAAcC,WAA2B,eAAI,CAC3CuB,KAAM,iBACN8B,kBAAmB,SAAU3J,EAAOwB,EAAMoI,EAAO3J,EAASgB,GACxD,GAAI2I,aAAiBmC,kBAAmC,SAAfnC,EAAMoC,KAAiB,CAC9D,IAAMS,EAAQ7C,EAAM6C,MACpB,GAAIA,EAAO,CACT,IAAMkD,GAAiB/F,EAAMtB,aAAa,wBAAwB,GAAK,IAAIU,MAAM,eAAe,EAC1Fa,EAAQ0F,MAAMC,KAAK/C,CAAK,EAAEiD,MAAMvD,GAAQwD,EAAcpF,SAAS4B,EAAKtE,KAAKgH,MAAM1C,EAAKtE,KAAKyD,YAAY,GAAG,EAAI,CAAC,CAAC,CAAC,EAIrH,OAHKzB,IACHjK,KAAKuL,eAAiBlK,EAAK+D,mBAAmBiF,QAAQ,kBAAmB0F,EAAchF,KAAK,IAAI,IAAI,GAE/Fd,CACT,CACF,CACA,MAAO,CAAA,CACT,EACAsB,eAAgBpI,EAASO,aACzB8H,WAAY,gBACd,EAGA/E,EAAcE,gBAAiC,gBAAI,CACjDsB,KAAM,kBACN8B,kBAAmBiG,eAAgB5P,EAAOwB,EAAMoI,EAAO3J,EAASgB,GAC9D,GAAI,EAAE2I,aAAiBmC,kBAAmC,SAAfnC,EAAMoC,MAAkB,MAAO,CAAA,EAC1E,IAAM6D,EAAYjG,EAAMtB,aAAa,yBAAyB,GAAK,GACnE,GAAgC,IAA5BuH,EAAUrG,KAAK,EAAEnC,OAAc,MAAO,CAAA,EACpCoF,EAAQ7C,EAAM6C,MACpB,GAAI,CAACA,EAAO,MAAO,CAAA,EACnB,IAEWN,EAFL,CAAC2D,EAAOC,GAAUF,EAAU7G,MAAM,GAAG,EAAEyB,IAAI6D,MAAM,EACvDhC,IAAIzC,EAAQ,CAAA,EACZ,IAAWsC,KAAQoD,MAAMC,KAAK/C,CAAK,EAAG,CACpC,GAAI,CAACN,EAAKH,KAAKzB,SAAS,OAAO,EAAG,CAChC3K,KAAKuL,eAAiBlK,EAAK8D,cAAckF,QAAQ,SAAU,SAAS,EACpEJ,EAAQ,CAAA,EACR,KACF,CACA,IAAMmG,EAAMC,MAAMC,EAAmB/D,CAAI,EAEzC,GAAI,EADJtC,EAAQmG,EAAI,IAAMF,GAASE,EAAI,IAAMD,GACzB,CACVnQ,KAAKuL,eAAiBlK,EAAKgE,oBAC3B,KACF,CACF,CACA,OAAO4E,CACT,EACAsB,eAAgBpI,EAASO,aACzB8H,WAAY,iBACd,EAGA/E,EAAcE,gBAA8B,aAAI,CAC9CsB,KAAM,eACN8B,kBAAmBiG,eAAgB5P,EAAOwB,EAAMoI,EAAO3J,EAASgB,GAC9D,GAAI,EAAE2I,aAAiBmC,kBAAmC,SAAfnC,EAAMoC,MAAkB,MAAO,CAAA,EAC1E,IAAM+D,EAASnG,EAAMtB,aAAa,sBAAsB,GAAK,GAC7D,GAA6B,IAAzByH,EAAOvG,KAAK,EAAEnC,OAAc,MAAO,CAAA,EACvC,IAGW8E,EAHLM,EAAQ7C,EAAM6C,MACpB,GAAI,CAACA,EAAO,MAAO,CAAA,EACnBH,IAAIzC,EAAQ,CAAA,EACZ,IAAWsC,KAAQoD,MAAMC,KAAK/C,CAAK,EAAG,CACpC,GAAI,CAACN,EAAKH,KAAKzB,SAAS,OAAO,EAAG,CAChC3K,KAAKuL,eAAiBlK,EAAK8D,cAAckF,QAAQ,SAAU,SAAS,EACpEJ,EAAQ,CAAA,EACR,KACF,CACA,IAAMmG,EAAMC,MAAMC,EAAmB/D,CAAI,EAEzC,GAAI,EADJtC,EAAQmG,EAAI,IAAM7G,WAAW4G,CAAM,GACvB,CACVnQ,KAAKuL,eAAiBlK,EAAKiE,gBAAgB+E,QAAQ,QAAS8F,CAAM,EAClE,KACF,CACF,CACA,OAAOlG,CACT,EACAsB,eAAgBpI,EAASO,aACzB8H,WAAY,cACd,EAGA/E,EAAcE,gBAA6B,YAAI,CAC7CsB,KAAM,cACN8B,kBAAmBiG,eAAgB5P,EAAOwB,EAAMoI,EAAO3J,EAASgB,GAC9D,GAAI,EAAE2I,aAAiBmC,kBAAmC,SAAfnC,EAAMoC,MAAkB,MAAO,CAAA,EAC1E,IAAM8D,EAAQlG,EAAMtB,aAAa,qBAAqB,GAAK,GAC3D,GAA4B,IAAxBwH,EAAMtG,KAAK,EAAEnC,OAAc,MAAO,CAAA,EACtC,IAGW8E,EAHLM,EAAQ7C,EAAM6C,MACpB,GAAI,CAACA,EAAO,MAAO,CAAA,EACnBH,IAAIzC,EAAQ,CAAA,EACZ,IAAWsC,KAAQoD,MAAMC,KAAK/C,CAAK,EAAG,CACpC,GAAI,CAACN,EAAKH,KAAKzB,SAAS,OAAO,EAAG,CAChC3K,KAAKuL,eAAiBlK,EAAK8D,cAAckF,QAAQ,SAAU,SAAS,EACpEJ,EAAQ,CAAA,EACR,KACF,CACA,IAAMmG,EAAMC,MAAMC,EAAmB/D,CAAI,EAEzC,GAAI,EADJtC,EAAQmG,EAAI,IAAM7G,WAAW2G,CAAK,GACtB,CACVlQ,KAAKuL,eAAiBlK,EAAKkE,gBAAgB8E,QAAQ,QAAS6F,CAAK,EACjE,KACF,CACF,CACA,OAAOjG,CACT,EACAsB,eAAgBpI,EAASO,aACzB8H,WAAY,aACd,EAKA,IAAM+E,EAAY,iFAEMA,EAGxB9J,EAAcC,WAAiB,KAAI,CACjCuB,KAAM,OACN8B,kBAAmB,SAAU3J,EAAOwB,EAAMoI,EAAO3J,EAASgB,GAExD,MAAIuJ,CAAAA,CADU,IAAIJ,OAAO,6GAAmB,EAClCvB,KAAK7I,CAAK,CAEtB,EACAmL,eAAgBpI,EAASY,SACzByH,WAAY,MACd,EAGMgF,EAAY,8YAClB,IAAMC,EAAW,iCACXC,EAAa,mCACyBH,EAAYE,EAC+UA,EAClWA,EAAWC,EA8BhDjK,EAAcC,WAAiB,KAAI,CACjCuB,KAAM,OACN8B,kBAAmB,SAAU3J,EAAOwB,EAAMoI,EAAO3J,EAASgB,GAClDsP,EAAwD,QAA5C3G,EAAMtB,aAAa,oBAAoB,EAEzD,GADc,IAAI8B,OAAO,y+BAAa,EAC5BvB,KAAK7I,CAAK,EAAG,CACrB,GAAI,CAAC,IAAIoK,OAAO+F,CAAS,EAAEtH,KAAK7I,CAAK,IAEnCA,GADAA,EAAQA,EAAMiK,QAAQ,IAAIG,OAAOkG,EAAWzB,MAAM,EAAG,CAAC,CAAC,CAAC,EAAG,EAAE,GAC/C5E,QAAQ,IAAIG,OAAOiG,EAASxB,MAAM,EAAG,CAAC,CAAC,CAAC,EAAG,EAAE,EACvD0B,GAHN,CA5BSC,EA+BqBxQ,EA5BlC,GAAsB,GADLyQ,EADAD,EAAGxH,MAAM,IAAI,EAAE0H,QAAQC,GAAKA,EAAE3H,MAAM,GAAG,CAAC,EAAE4H,OAAOnD,GAAgB,EAAXA,EAAEpG,MAAU,GACzDuJ,OAAOnD,GAAK,aAAa5E,KAAK4E,CAAC,CAAC,EAC7CpG,OAAY,MAAO,CAAA,EAChC,GAAI,gBAAgBwB,KAAK2H,CAAE,EAAG,MAAO,CAAA,EAErC,GADmBC,EAASG,OAAOnD,GAAW,MAANA,GAAa,CAACA,EAAEoD,WAAW,GAAG,CAAC,EACxDxJ,QAAUoJ,EAASpJ,OAAQ,MAAO,CAAA,EACjD,GAAI,WAAWwB,KAAK2H,CAAE,EAAG,CACvB,GAAI,sCAAsC3H,KAAK2H,CAAE,EAAG,MAAO,CAAA,EAC3D,IAAMM,EAAW,EAAIL,EAASpJ,OACxB0J,EAAQN,EAAShG,IAAIgD,GAAU,KAALA,EAAWA,EAAI,GAAG,EAAE9C,KAAK,EAAE,EAC3D,GAAI,IAAIP,YAAuB,EAAX0G,KAAgB,EAAEjI,KAAKkI,CAAK,EAAG,MAAO,CAAA,EAC1D,GAAI,QAAQlI,KAAKkI,CAAK,EAGpB,GAFqBP,EAAG1F,QAAQ,IAAI,EAChBiG,EAAMjF,OAAO,OAAO,EACR,MAAO,CAAA,CAE3C,CAeI,CACA,MAAO,CAAA,CACT,CACA,MAAO,CAAA,CACT,EACAX,eAAgBpI,EAASa,SACzBwH,WAAY,MACd,EAGA,IAAM4F,EAAc,wFAGpB3K,EAAcC,WAAmB,OAAI,CACnCuB,KAAM,SACN8B,kBAAmB,SAAU3J,EAAOwB,EAAMoI,EAAO3J,EAASgB,GACxD,GAAmB,IAAfjB,EAAMqH,OAAc,MAAO,CAAA,EAC/B,GAAI,YAAYwB,KAAK7I,CAAK,EAAG,MAAO,CAAA,EAEpC,GAAI,CADU,IAAIoK,WAAW4G,KAAgB,GAAG,EACrCnI,KAAK7I,CAAK,EAAG,MAAO,CAAA,EAE/B,IAAMiR,GADmBjR,EAArBA,EAAMsP,SAAS,GAAG,EAAWtP,EAAM6O,MAAM,EAAG,CAAC,CAAC,EACnC7O,GAAMgJ,MAAM,GAAG,EAE9B,GADYiI,EAAOvC,IAAI,GACd5C,OAAO,QAAQ,EAAG,MAAO,CAAA,EAC5BoF,EAAaD,EAEnB,GADAC,EAAWN,OAAOnD,GAAK,WAAW5E,KAAK4E,CAAC,CAAC,EACrCyD,EAAW7J,QAAU4J,EAAO5J,OAAQ,MAAO,CAAA,EAC/CiF,IAAI6E,EAAQ,CAAA,EACZ,IAAK7E,IAAI8E,EAAI,EAAGA,GAAKH,EAAO5J,OAAS,EAAG+J,CAAC,GACvC,GAAIH,EAAOG,GAAGpJ,YAAY,GAAKiJ,EAAOG,EAAI,GAAGpJ,YAAY,EAAG,CAC1DmJ,EAAQ,CAAA,EACR,KACF,CAEF,MAAO,CAACA,CACV,EACAhG,eAAgBpI,EAASc,WACzBuH,WAAY,QACd,EACA,IAAMiG,EAAelB,EAAUlG,QAAQ,OAAQ,QAAQ,EACjDqH,EAAelB,EAAUnG,QAAQ,oBAAqB,QAAQ,EAAEA,QAAQ,UAAW,WAAW,EAC9FsH,EAAiBP,EAAY/G,QAAQ,KAAM,QAAQ,EAAEA,QAAQ,KAAM,MAAM,EAO/E,IAAMuH,4UADkBR,aAAuBK,wBAAmCC,cAIlFjL,EAAcC,WAAkB,MAAI,CAClCuB,KAAM,QACN8B,kBAAmB,SAAU3J,EAAOwB,EAAMoI,EAAO3J,EAASgB,GACxD,IAQMwQ,EARN,MAAIzR,CAAAA,EAAM6Q,WAAW,GAAG,GACpB7Q,CAAAA,EAAMsP,SAAS,GAAG,GACtB,EAAmB,IAAftP,EAAMqH,SACJmD,EAAQ,IAAIJ,WAAWoH,KAAe,GAAG,EAE1CE,EADCA,EAAQtH,OAAOI,CAAK,EAAEH,KAAKrK,CAAK,MAIhCyR,GAFAE,EAAQ,CAAC,GAAGD,IAEO,GACF,IAFjBE,EAAYD,EAAM,IAEVtK,SACVuK,EAAUtC,SAAS,GAAG,GAAKsC,EAAUrH,SAAS,IAAI,GACjDkH,CAAAA,EAAWlH,SAAS,GAAG,GAAQlE,CAAAA,EAAcC,WAAmB,OAAEqD,kBAAkB8H,EAAYjQ,EAAMoI,EAAO3J,EAASgB,CAAI,EAEjI,EACAkK,eAAgBpI,EAASe,UACzBsH,WAAY,OACd,EACA,IAGMyG,EAAa,6BACbC,EAAiB,0DACjBC,EAAiB,uBAMvB,IAAMC,sCAJmCH,IAAaC,WAAwBC,wBAAqCR,gBAA6BD,IAPpHjB,EAASpG,QAAQ,SAAU,YAAY,YAO0HoH,gbA2L7L,SAAS7F,EAAUyG,GACjB,IAAMC,EAAKD,EAAGjJ,MAAM,GAAG,EACrBwE,EAAI,CAAC,GAAG0E,EAAG,GAAGlJ,MAAM,GAAG,GAEzB,OADIkJ,EAAG,IAAI1E,EAAEW,KAAK+D,EAAG,EAAE,EAChB1E,CACT,CAuLA,SAAStF,EAAaiK,GACpB,OAAOA,EAAIjI,OAAO,CAAC,EAAEkI,kBAAkB,EAAID,EAAItD,MAAM,CAAC,CACxD,CAOA,SAAS5G,EAAiBkK,GACxB,OAAOA,EAAInJ,MAAM,KAAK,EAAEyB,IAAI4H,GAAKnK,EAAamK,CAAC,CAAC,EAAE1H,KAAK,GAAG,CAC5D,CAQA,SAASxC,EAAagK,EAAKxB,GAGzB,OAFAwB,EAAMlK,EAAiBkK,CAAG,EAAElI,QAAQ,MAAO,EAAE,EACrCkI,EAAHxB,EACEwB,EADOA,EAAIjI,OAAO,CAAC,EAAEoI,kBAAkB,EAAIH,EAAItD,MAAM,CAAC,CAE/D,CAQA,SAAS0D,EAAUC,EAAcC,GAI/BnG,IAAIoG,EADU,gEAId,OAFIF,IAAcE,GAJH,oBAKXD,IAAeC,GAJR,qBAKJA,CACT,CASA,SAASC,EAAuBC,EAAS3S,EAASuB,EAAMoI,EAAOiJ,GACzDD,GAAW3S,EAAQoB,qBACrBpB,EAAQoB,qBAAqBG,EAAMoI,EAAOiJ,EAAS5S,CAAO,EACjD,CAAC2S,GAAW3S,EAAQsB,wBAC7BtB,EAAQsB,uBAAuBC,EAAMoI,EAAOiJ,EAAS5S,CAAO,CAEhE,CAOA,SAASyN,EAAayE,GACpB,OAAOA,EAAIlI,QAAQ,iCAAkC,MAAM,CAC7D,CAUA,SAAS6I,EAAsBC,GAC7BzG,IAAI0G,EAAW,EACf,IAAMnJ,EAAQ,GAqBd,MApBI,QAAQhB,KAAKkK,CAAQ,IACvBC,CAAQ,GACRnJ,EAAMsE,KAAK,IAAI,GAEb,QAAQtF,KAAKkK,CAAQ,IACvBC,CAAQ,GACRnJ,EAAMsE,KAAK,IAAI,GAEblO,EAAQ2C,qBAAqBiG,KAAKkK,CAAQ,IAC5CC,CAAQ,GACRnJ,EAAMsE,KAAK,IAAI,GAEb,KAAKtF,KAAKkK,CAAQ,IACpBC,CAAQ,GACRnJ,EAAMsE,KAAK,IAAI,GAEb4E,EAAS1L,OAAS,GAAG2L,CAAQ,GACV,GAAnBD,EAAS1L,QAAawC,EAAMsE,KAAK,GAAG,EACjB,IAAnB4E,EAAS1L,QAAc2L,CAAQ,GAE5B,CACLA,SAFuBA,EAArB,KAAKnK,KAAKkK,CAAQ,EAAc,EAExBC,EACVnJ,MAAOA,CACT,CACF,CAOA,SAAS8E,EAAKN,GACZ/B,IAAIwC,EAAM,EAQV,OAPAT,EAAOQ,MAAM,EAAEG,QAAQ,EAAEC,QAAQ,CAACC,EAAOkC,KACnCA,EAAI,GAAK,GAEC,GADZlC,GAAS,KACMA,GAAS,GAE1BJ,GAAOI,CACT,CAAC,EACMJ,EAAM,EACf,CA2CA,SAASoB,EAAmB/D,GAC1B,OAAO,IAAI8G,QAAQC,IACjB,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAAclH,CAAI,EACzBgH,EAAOG,OAAS,SAAUC,GACxB,GAAIA,EAAEC,OAAQ,CACZ,IAAMC,EAAQ,IAAIC,MAClBD,EAAME,IAAMJ,EAAEC,OAAOI,OACrBH,EAAMH,OAAS,WACbJ,EAAQ,CAACO,EAAM3D,MAAO2D,EAAM1D,OAAO,CACrC,CACF,MAAOmD,EAAQ,CAAC,EAAG,EAAE,CACvB,CACF,CAAC,CACH,CAUA,SAASW,EAA0BC,EAAUvM,EAAKwM,GAChD,GAAID,EAASpL,aAAa,4BAA4B,EAAG,OACzD,IAAMsL,EAAYtH,SAASuH,cAAc,KAAK,EAC9CD,EAAUE,UAAUC,IAAI,mBAAmB,EAC3C7H,IAAI8H,EAuBJJ,EAAU3K,MAAMgL,gBAAkBC,OAAOC,iBAAiB7H,SAAS8H,qBAAqB,MAAM,EAAE,EAAE,EAAEH,gBACnF,SAAXI,IACJnI,IACAoI,GAAOA,EADIZ,EAASa,sBAAsB,EAAE7E,MAAQkE,EAAUW,sBAAsB,EAAE7E,MAAQ,IAChF,EAAI,EAAI4E,EACtBV,EAAU3K,MAAMuL,WAAgBF,EAAH,KAC7BV,EAAU3K,MAAMwL,cAAgBb,EAAUW,sBAAsB,EAAE5E,OAAS,KAC7E,CACA+D,EAASgB,OAAOd,CAAS,EACzBF,EAASnL,aAAa,6BAA8B,EAAE,EACtDmL,EAASlL,iBAAiB,QA/BH,WACrB0D,IAAInC,EAAQ2J,EAAS9T,MAAMqH,OAO3B,GANI8C,GAAS5C,IACX4C,EAAQ5C,EACRuM,EAAS9T,MAAQ8T,EAAS9T,MAAMwO,UAAU,EAAGjH,CAAG,IAElD6M,EAAY7M,EAAM4C,GACF,IAAGiK,EAAY,GAC3BL,EAAM,OAAQA,GAChB,IAAK,OACHC,EAAUe,aAAe5K,KAASiK,MAAc7M,EAChD,MACF,IAAK,YACHyM,EAAUe,UAAeX,EAAH,IAAgB7M,EACtC,MAEF,QACEyM,EAAUe,UAAe5K,EAAH,IAAY5C,CAEtC,CACAkN,EAAS,CACX,CAUiD,EACjDX,EAASkB,cAAc,IAAIC,MAAM,OAAO,CAAC,EACzC,IAAIC,eAAeT,CAAQ,EAAEU,QAAQrB,CAAQ,CAC/C,CAQA,SAASsB,EAAgBhN,EAAOiN,EAAOC,GACrC,GAAIlN,EAAMM,aAAa,qBAAqB,EAAG,OAC/C,GAA8C,GAA1C2M,EAAMzE,OAAO2E,GAAgB,EAAXA,EAAElO,MAAU,EAAEA,OAAa,OAW5B,SAAfmO,EAAyBH,GAE7B,IADAI,EAAe,CAAC,EACTC,EAASC,YAAYD,EAASE,YAAYF,EAASC,UAAU,EACpE,IAAK,IAAME,KAAQR,EAAO,CACxB,IAAMS,EAASpJ,SAASuH,cAAc,QAAQ,EAC9C6B,EAAO9V,MAAQ6V,EACfC,EAAOf,UAAYc,EACnBC,EAAO5B,UAAUC,IAAImB,EAAS9S,WAAW,EACzCsT,EAAOC,QAAU,WACfL,EAASrM,MAAM2M,QAAU,OACzB5N,EAAMpI,MAAQ8V,EAAO9V,KACvB,EACA0V,EAASO,YAAYH,CAAM,CAC7B,CAC8B,EAA1BJ,EAASzV,QAAQoH,QACnBqO,EAASrM,MAAM2M,QAAU,QACzBN,EAASQ,SAAS,EAAG,CAAC,GAEtBR,EAASrM,MAAM2M,QAAU,MAE7B,CA9BA1J,IAAImJ,EAAe,CAAC,EACdC,EAAWhJ,SAASuH,cAAc,UAAU,EAsE5CkC,GArENT,EAASxB,UAAUC,IAAI,gBAAgB,EACvCuB,EAASxB,UAAUC,IAAImB,EAAS/S,cAAc,EAC9CmT,EAASrM,MAAM/G,UAAYgT,EAAShT,UACpCoT,EAASrM,MAAM2M,QAAU,OACzBN,EAAS/M,aAAa,SAAU,IAAIP,EAAMgO,EAAI,EAC9CV,EAASrM,MAAMgL,gBAAkBC,OAAOC,iBAAiB7H,SAAS8H,qBAAqB,MAAM,EAAE,EAAE,EAAEH,gBACnGjM,EAAMO,aAAa,eAAgB,KAAK,EACxCP,EAAMO,aAAa,OAAQ,EAAE,EAsB7BP,EAAMQ,iBAAiB,OAAQ,WAClB8D,SAAS2J,kDAAkDjO,EAAMgO,mBAAmB,IAE/FV,EAASrM,MAAM2M,QAAU,OAC3B,CAAC,EACD5N,EAAMQ,iBAAiB,WAAY,WACjC4M,EAAaH,CAAK,CACpB,CAAC,EACDjN,EAAMQ,iBAAiB,QAAS,WAC9B8M,EAASrM,MAAM2M,QAAU,OACQ,GAA7B5N,EAAMpI,MAAMwJ,KAAK,EAAEnC,QACvBiP,WAAW,KACT,IAAMC,EAAS,IAAInM,OAAOsD,EAAatF,EAAMpI,KAAK,EAAG,GAAG,EACxD,IAAM8M,EAAQuI,EAAMzE,OAAOiF,GAAQU,EAAO1N,KAAKgN,CAAI,CAAC,EACjC,EAAf/I,EAAMzF,QAAYmO,EAAa1I,CAAK,CAC1C,EAAG,GAAG,CACR,CAAC,EACD1E,EAAMQ,iBAAiB,UAAW,SAAU2K,GACZ,SAA1BmC,EAASrM,MAAM2M,SAAsBN,EAASzV,UACnC,UAATsT,EAAEiD,MACJjD,EAAEkD,eAAe,EACjBf,EAASrM,MAAM2M,QAAU,QAEd,WAATzC,EAAEiD,MACJjD,EAAEkD,eAAe,EACjBhB,CAAY,GACZiB,EAAe,GAEJ,aAATnD,EAAEiD,MACJjD,EAAEkD,eAAe,EACjBhB,CAAY,GACZiB,EAAe,GAEjBP,EAAU,EACG,SAAT5C,EAAEiD,OACJjD,EAAEkD,eAAe,EACjBf,EAASzV,QAAQwV,GAAckB,MAAM,EAG3C,CAAC,EACiB,WAChB,IAAMC,EAAWlK,SAAS2J,cAAc,uCAAuC,EAK/E,OAJIO,GAAUA,EAAS1C,UAAU2C,OAAO,QAAQ,GACHpB,EAAzCA,GAAgBC,EAASzV,QAAQoH,OAAuB,EACxDoO,GAAe,IAAGA,EAAeC,EAASzV,QAAQoH,OAAS,GAC/DqO,EAASzV,QAAQwV,GAAcvB,UAAUC,IAAI,QAAQ,EAC9C,CAAA,CACT,GACMuC,EAAiB,WAErBjB,GADAA,EAAeA,GAAgB,CAAC,EAAI,EAAIA,GACVC,EAASzV,QAAQoH,OAAS,EAAIqO,EAASzV,QAAQoH,OAAS,EAAIoO,EAC1F,IAAMqB,EAAI7N,KAAK8N,MAAMtO,SAASiN,EAASrM,MAAM/G,UAAW,EAAE,EAAIoT,EAASzV,QAAQ,GAAG+W,YAAY,EAC9FtB,EAASQ,SAAS,EAAGR,EAASzV,QAAQ,GAAG+W,cAAgBvB,EAAeqB,EAAI,EAAE,CAChF,EACA1O,EAAM6O,MAAMvB,CAAQ,EACpBtN,EAAMO,aAAa,sBAAuB,EAAE,EAC5C,IAAIuM,eAAe,KACjBQ,EAASrM,MAAMyG,MAAW1H,EAAMuM,sBAAsB,EAAE7E,MAAjC,IACzB,CAAC,EAAEqF,QAAQ/M,CAAK,CAClB,CAOA,SAAS8O,EAAa9O,EAAOnI,GAC3B,GAAImI,CAAAA,EAAMM,aAAa,uBAAuB,GAC5B,YAAdN,EAAM4D,KAAV,CACA,IAAMgI,EAAYtH,SAASuH,cAAc,KAAK,EACxCkD,EAAkBlX,EAAQ6C,mBAAqB,GAI/CsU,GAHNpD,EAAUE,UAAUC,IAAI,cAAegD,CAAe,EACtDnD,EAAU3K,MAAM2M,QAAU,OAC1BhC,EAAUrL,aAAa,SAAU,IAAIP,EAAMgO,EAAI,yBACRrT,EAAS2C;4BACxB3C,EAAS4C;4BACT5C,EAAS6C;4BACT7C,EAAS8C;4BACT9C,EAAS+C;2BACV/C,EAASgD;;mCAGhCiO,EAAUqD,UAAYD,EACtBhP,EAAM6O,MAAMjD,CAAS,EACrB5L,EAAMO,aAAa,wBAAyB,EAAE,EAC9C,IAAM2O,EAAc5K,SAAS2J,0CAA0CjO,EAAMgO,uBAAuB,EAClGpD,EAAWtG,SAAS2J,0CAA0CjO,EAAMgO,wBAAwB,EAC9FhO,EAAMQ,iBAAiB,OAAQ,WAC7BoL,EAAU3K,MAAM2M,QAAU,MAC5B,CAAC,EACD5N,EAAMQ,iBAAiB,QAAS,WAO9B,GANAoL,EAAU3K,MAAM2M,QAAU,QAC1BsB,EAAYpD,UAAU2C,OAAO,cAAe,SAAU,SAAU,OAAQ,WAAW,EACnF7D,EAASqE,UAAY,GACrB3K,SAAST,6CAA6C7D,EAAMgO,oBAAoB,EAAEnH,QAAQsI,IACxFA,EAAUrD,UAAU2C,OAAO,QAAS,UAAU,CAChD,CAAC,EACyB,GAAtBzO,EAAMpI,MAAMqH,OAAhB,CACA,IAAMsJ,EAAImC,EAAsB1K,EAAMpI,KAAK,EAC3C,IAAMwX,EAAY7G,EAAE9G,MACd4N,EAAgB9G,EAAEqC,SAIxB,OAHA,CAAC,KAAM,KAAM,KAAM,KAAM,KAAK/D,QAAQ6H,IACpCpK,SAAS2J,0CAA0CjO,EAAMgO,sBAAsBU,CAAG,GAAG5C,UAAUC,IAAIqD,EAAUjN,SAASuM,CAAC,EAAI,QAAU,UAAU,CACjJ,CAAC,EACOW,GACN,KAAK,EACHzE,EAASqE,UAAYtU,EAASqD,2BAC9BkR,EAAYpD,UAAUC,IAAI,aAAa,EACvC,MACF,KAAK,EACHnB,EAASqE,UAAYtU,EAASoD,uBAC9BmR,EAAYpD,UAAUC,IAAI,QAAQ,EAClC,MACF,KAAK,EACHnB,EAASqE,UAAYtU,EAASmD,uBAC9BoR,EAAYpD,UAAUC,IAAI,QAAQ,EAClC,MACF,KAAK,EACHnB,EAASqE,UAAYtU,EAASkD,qBAC9BqR,EAAYpD,UAAUC,IAAI,MAAM,EAChC,MAEF,QACEnB,EAASqE,UAAYtU,EAASiD,yBAC9BsR,EAAYpD,UAAUC,IAAI,WAAW,CAEzC,CACA/L,EAAMO,aAAa,4BAA6B8O,EAAcC,SAAS,CAAC,EAClEhD,GAAQvL,WAAWmL,OAAOC,iBAAiBnM,CAAK,EAAE0H,KAAK,EAAI3G,WAAWmL,OAAOC,iBAAiBP,CAAS,EAAElE,KAAK,GAAK,EACzHkE,EAAU3K,MAAMuL,WAAgBF,EAAH,IAhCM,CAiCrC,CAAC,CA9DmC,CA+DtC,CA+BA,SAASiD,EAAe/N,EAAOpI,EAAMvB,GACnCqM,IAAIsL,EAAS,KACPjH,EAAInP,EAAK6U,cAAcpW,EAAQwB,YAAY+H,KAAK,CAAC,EAGvD,OADgCoO,EAAR,SADjBA,EAAHjH,EAAYA,GAAK/G,EAAMiO,cACvBD,IAAQE,SAA6B,KAClCF,CACT,CAUA,SAASG,EAAkBnO,EAAOoO,EAAW/X,GAC3CqM,IAAIuG,EAAUjJ,EAAMtB,aAAgBrI,EAAQ2B,6BAAX,KAA2CoW,EAAU5M,YAAc4M,EAAUnQ,KAAM,EAKpH,OAJKgL,GAAAA,EAAAA,GACOjJ,EAAMtB,aAAarI,EAAQ2B,4BAA4B,IACzCoW,EAAU7M,cAGtC,CASA,SAAS8M,EAAgBrO,EAAOoO,EAAW/X,GACzCqM,IAAIuG,EAAUjJ,EAAMtB,aAAgBrI,EAAQ4B,2BAAX,KAAyCmW,EAAU5M,YAAc4M,EAAUnQ,KAAM,EAKlH,OAJKgL,GAAAA,EAAAA,GACOjJ,EAAMtB,aAAarI,EAAQ4B,0BAA0B,KACvCmW,EAAUE,cAAgB,GAGtD,CASA,SAASC,EAAUvO,EAAOpI,EAAMvB,EAASmY,GACvC9L,IAAI+L,EAAYC,EAAaC,EAAaC,EAAcC,EAAYC,EAOlEA,EANEN,GACFC,EAAapY,EAAQI,WACrBiY,EAAcrY,EAAQK,aACtBiY,EAAc,QACdC,EAAe,UACfC,EAAaxY,EAAQM,gBACPN,EAAQO,oBAEtB6X,EAAapY,EAAQK,aACrBgY,EAAcrY,EAAQI,WACtBkY,EAAc,UACdC,EAAe,QACfC,EAAaxY,EAAQO,kBACPP,EAAQM,iBAExBmM,SAAST,0BAA0BrC,EAAM/B,OAAO,EAAEoH,QAAQ0J,IACxDA,EAAEzE,UAAU2C,OAAOyB,CAAW,EAC9BK,EAAEzE,UAAUC,IAAIkE,CAAU,EACpBT,EAASD,EAAegB,EAAGnX,EAAMvB,CAAO,EAC1C2X,IACFA,EAAO1D,UAAU2C,OAAO2B,CAAY,EACpCZ,EAAO1D,UAAUC,IAAIoE,CAAW,GAE5B1Q,EAAO,CAAC,WAAY,SAAS0C,SAASX,EAAMoC,IAAI,EAAIpC,EAAMwM,GAAKxM,EAAM/B,KACrE+Q,EAAQlM,SAAS2J,2BAA2BxO,IAAO,EACrD+Q,IACFA,EAAM1E,UAAU2C,OAAO6B,CAAW,EAClCE,EAAM1E,UAAUC,IAAIsE,CAAU,EAElC,CAAC,CACH,CAQA,SAASI,EAAajP,EAAOpI,EAAMvB,GACjCyM,SAAST,0BAA0BrC,EAAM/B,OAAO,EAAEoH,QAAQ0J,IACxDA,EAAEzE,UAAU2C,OAAO5W,EAAQK,YAAY,EACvCqY,EAAEzE,UAAU2C,OAAO5W,EAAQI,UAAU,EAC/BuX,EAASD,EAAegB,EAAGnX,EAAMvB,CAAO,EAC1C2X,IACFA,EAAO1D,UAAU2C,OAAO,OAAO,EAC/Be,EAAO1D,UAAU2C,OAAO,SAAS,GAE7BhP,EAAO,CAAC,WAAY,SAAS0C,SAASX,EAAMoC,IAAI,EAAIpC,EAAMwM,GAAKxM,EAAM/B,KACrE+Q,EAAQlM,SAAS2J,2BAA2BxO,IAAO,EACrD+Q,IACFA,EAAM1E,UAAU2C,OAAO5W,EAAQM,eAAe,EAC9CqY,EAAM1E,UAAU2C,OAAO5W,EAAQO,iBAAiB,EAEpD,CAAC,CACH,CAYA,SAASsY,EAAiBlP,EAAOpI,EAAMvB,EAASoG,EAAetD,EAAUqV,EAAeJ,GACtF,IAAMe,EAAOrM,SAASuH,cAAc,MAAM,EACxC2D,EAASD,EAAe/N,EAAOpI,EAAMvB,CAAO,EAC5C+Y,EAAYxX,EAAK6U,4BAA4BzM,EAAM/B,QAAQ,GAAGoR,aAAerP,EAAM/B,KACrFyE,IAAIuG,EACJkG,EAAK7E,UAAUC,IAAIlU,EAAQQ,kBAAkB,EAC7CsY,EAAKpQ,aAAa,YAAaiB,EAAM/B,IAAI,EACrCuQ,GACFW,EAAK7E,UAAUC,IAAIlU,EAAQE,iBAAiB,EAC5C0S,EAAUoF,EAAgBrO,EAAOoO,EAAW/X,CAAO,EACnDoG,EAAcS,cAActF,EAAK4U,IAAI4C,GAAanG,IAElDkG,EAAK7E,UAAUC,IAAIlU,EAAQG,mBAAmB,EAC9CyS,EAAUkF,EAAkBnO,EAAOoO,EAAW/X,CAAiB,EAC/DoG,EAAcU,gBAAgBvF,EAAK4U,IAAI4C,GAAanG,GAEhC,GAAlBA,EAAQxL,SACZ0R,EAAKhE,UAAYlC,EACjBkG,EAAK1P,MAAM2M,QAAU,QACjB4B,EACFA,EAAOsB,sBAAsB,YAAaH,CAAI,EAE9CnP,EAAMqN,MAAM8B,CAAI,EAElBpG,EAAuByF,EAAenY,EAASuB,EAAMoI,EAAOiJ,CAAO,EACrE,CAYA,SAASsG,EAAcvP,EAAOpI,EAAMvB,EAASoG,EAAetD,EAAUqV,EAAeJ,GACnF1L,IAAIuG,EACJ,IAYW2D,EAGAA,EAfLwC,EAAYxX,EAAK6U,4BAA4BzM,EAAM/B,QAAQ,GAAGoR,aAAerP,EAAM/B,KACnFuR,EAAYnZ,EAAQc,oBAAoBkJ,QAAQ,qBAAsBhK,EAAQS,gBAAgB,EAAEuJ,QAAQ,WAAYzI,EAAK4U,EAAE,EAAEnM,QAAQ,UAAWlH,EAASK,UAAU,EAAE6G,QAAQ,kBAAmBhK,EAAQU,kBAAkB,EAAEsJ,QAAQ,OAAQ,OAAO,EACvPoP,EAAcpZ,EAAQc,oBAAoBkJ,QAAQ,qBAAsBhK,EAAQS,gBAAgB,EAAEuJ,QAAQ,WAAYzI,EAAK4U,EAAE,EAAEnM,QAAQ,UAAWlH,EAASM,YAAY,EAAE4G,QAAQ,kBAAmBhK,EAAQW,oBAAoB,EAAEqJ,QAAQ,OAAQ,SAAS,EACzPmO,GACFvF,EAAUoF,EAAgBrO,EAAOoO,EAAW/X,CAAO,EACnDoG,EAAcS,cAActF,EAAK4U,IAAI4C,GAAanG,IAElDA,EAAUkF,EAAkBnO,EAAOoO,EAAW/X,CAAiB,EAC/DoG,EAAcU,gBAAgBvF,EAAK4U,IAAI4C,GAAanG,GAEtDvG,IAAIxF,EAAgB,GAClBC,EAAkB,GACpB,IAAWyP,KAAOnQ,EAAcS,cAActF,EAAK4U,IACa,EAA1D/P,EAAcS,cAActF,EAAK4U,IAAII,GAAKhN,KAAK,EAAEnC,SAAYP,eAA6B0P,cAAgBA,cAAgBnQ,EAAcS,cAActF,EAAK4U,IAAII,WAErK,IAAWA,KAAOnQ,EAAcU,gBAAgBvF,EAAK4U,IACM,EAArD/P,EAAcU,gBAAgBvF,EAAK4U,IAAII,GAAKnP,SAAYN,eAA+ByP,cAAgBA,cAAgBnQ,EAAcU,gBAAgBvF,EAAK4U,IAAII,WAEhK,CAAC4B,GAA0C,EAAzBrR,EAAgBM,OAAY7F,EAAK8X,mBAAmB,aAAcD,EAAYpP,QAAQ,wBAAyBlD,CAAe,CAAC,EAAWqR,GAAwC,EAAvBtR,EAAcO,QAAY7F,EAAK8X,mBAAmB,aAAcF,EAAUnP,QAAQ,wBAAyBnD,CAAa,CAAC,EAC1S6L,EAAuByF,EAAenY,EAASuB,EAAMoI,EAAOiJ,CAAO,CACrE,CAOA,SAAS0G,EAAqB3P,EAAOpI,GAC7BuX,EAAOvX,EAAK6U,iCAAiCzM,EAAM/B,QAAQ,EAC7DkR,GAAMA,EAAKlC,OAAO,CACxB,CA2CA,SAAS2C,EAAW5P,EAAOpI,EAAMvB,EAASoG,EAAetD,EAAUqV,EAAeJ,GAChF,IAxBuBpO,EAAOpI,EAAM6E,EAAe+R,EAwB7CqB,EAAyB,UAAd7P,EAAMoC,MAA8D,QAA1CsI,OAAOC,iBAAiB3K,CAAK,EAAEoM,QAxBnDpM,EAyBPA,EAzBoBvD,EAyBPA,EAzBsB+R,EAyBPA,EAxBtCY,GADwBxX,EAyBPA,GAxBA6U,4BAA4BzM,EAAM/B,QAAQ,GAAGoR,aAAerP,EAAM/B,KACrF,CAACuQ,GAAiB/R,EAAcS,cAActF,EAAK4U,IAAI4C,IACzD,OAAO3S,EAAcS,cAActF,EAAK4U,IAAI4C,GAC5CxX,EAAK6U,gDAAgD2C,KAAa,GAAGnC,OAAO,GACnEuB,GAAiB/R,EAAcU,gBAAgBvF,EAAK4U,IAAI4C,KACjE,OAAO3S,EAAcU,gBAAgBvF,EAAK4U,IAAI4C,GAC9CxX,EAAK6U,kDAAkD2C,KAAa,GAAGnC,OAAO,GAEf,GAA7DrV,EAAKyK,iBAAiB,2BAA2B,EAAE5E,QAAa7F,EAAK6U,cAAc,wBAAwB,GAAGQ,OAAO,EACtD,GAA/DrV,EAAKyK,iBAAiB,6BAA6B,EAAE5E,QAAa7F,EAAK6U,cAAc,0BAA0B,GAAGQ,OAAO,EAgB7H0C,EAAqB3P,EAAOpI,CAAI,EAC5B4W,GAAkD,OAAjCnY,EAAQY,uBAC3BW,EAAK6U,cAAc,wBAAwB,GAAGQ,OAAO,EACrDsC,EAAcvP,EAAOpI,EAAMvB,EAASoG,EAAetD,EAAUqV,EAAeJ,CAAS,GAC5EI,GAAkD,UAAjCnY,EAAQY,uBAAqC,CAAC4Y,GACxEX,EAAiBlP,EAAOpI,EAAMvB,EAASoG,EAAetD,EAAUqV,EAAeJ,CAAS,EAErFI,GAAoD,OAAnCnY,EAAQa,wBAGlBsX,GAAoD,UAAnCnY,EAAQa,yBAAwC2Y,GAC3EX,EAAiBlP,EAAOpI,EAAMvB,EAASoG,EAAetD,EAAUqV,EAAeJ,CAAS,GAHxFxW,EAAK6U,cAAc,0BAA0B,GAAGQ,OAAO,EACvDsC,EAAcvP,EAAOpI,EAAMvB,EAASoG,EAAetD,EAAUqV,EAAeJ,CAAS,EAIzF,CAwBA,SAAS0B,EAAkB9P,EAAOpI,EAAMvB,EAAS0Z,GAC3C1Z,EAAQkC,0BACJ0F,EAAO+B,EAAM/B,MAAQ,GACzBkR,EAAOvX,EAAK6U,2CAA2CxO,KAAQ,KAE/DkR,EAAK1P,MAAM2M,QAAU2D,EAAO,QAAU,OAG5C,CA/iCAtT,EAAcC,WAAgB,IAAI,CAChCuB,KAAM,MACN8B,kBAAmB,SAAU3J,EAAOwB,EAAMoI,EAAO3J,EAASgB,GAExD,MAAKuJ,CAAAA,CADS,IAAIJ,WAAW4H,KAAa,GAAG,EAClCnJ,KAAK7I,CAAK,CAEvB,EACAmL,eAAgBpI,EAASgB,QACzBqH,WAAY,KACd,EAKA/E,EAAcC,WAAqB,SAAI,CACrCuB,KAAM,WACN8B,kBAAmB,SAAU3J,EAAOwB,EAAMoI,EAAO3J,EAASgB,GAGxD,OAFYwH,SAASmB,EAAMtB,aAAa,sBAAsB,GAAK,IAAK,EAAE,GACzDwK,EAAsB9S,CAAK,EAAEgT,QAGhD,EACA7H,eAAgBpI,EAAS0C,aACzB2F,WAAY,UACd,EAiBA/E,EAAcC,WAAyB,aAAI,CACzCuB,KAAM,eACN8B,kBAAmB,SAAU3J,EAAOwB,EAAMoI,EAAO3J,EAASgB,GACxD,IAAMuS,EAAS5J,EAAMtB,aAAa,gBAAgB,GAAK,GACvD,MAAsB,KAAlBkL,EAAOhK,KAAK,IACVoQ,EAAShQ,EAAMtB,aAAa,8BAA8B,GAAK,GACjDoE,SAAS2J,cAAc7C,CAAM,GAAGxT,QAChCA,IAClBJ,KAAKuL,gBAjB6BlK,EAiBmBA,EAhBrC,GADU2Y,EAiBmBA,GAhBtCvS,OACFpG,EAAKsE,iBAAiB0E,QAAQ,cAAe2P,CAAM,EAEnD3Y,EAAKsE,iBAAiB0E,QAAQ,IAAK,EAAE,EAAEA,QAAQ,IAAK,EAAE,GAcpD,CAAA,GAGX,EACAkB,eAAgBpI,EAASO,aACzB8H,WAAY,cACd,EAGA/E,EAAcC,WAAwB,YAAI,CACxCuB,KAAM,cACN8B,kBAAmB,SAAU3J,EAAOwB,EAAMoI,EAAO3J,EAASgB,GACxD,GAAI,KAAK4H,KAAK7I,CAAK,EAAG,MAAO,CAAA,EAC7BsM,IAAIuN,EAAO,UACPvS,EAAM,GACNC,EAAM,GACV,IAEWuP,EAFLgD,GAAYlQ,EAAMtB,aAAa,uBAAuB,GAAKxI,OAAOia,KAAK7S,CAAQ,EAAEyD,KAAK,GAAG,GAAG3B,MAAM,eAAe,EACvH8Q,EAASlJ,OAAOkG,GAAKhX,OAAOia,KAAK7S,CAAQ,EAAEqD,SAASuM,EAAE9O,YAAY,CAAC,CAAC,EACpE,IAAW8O,KAAKgD,EAAU,CACxB,IAAK,IAAMvG,KAAKrM,EAAS4P,GAAG1P,MAC1B,GAAIpH,EAAM6Q,WAAW0C,EAAEmE,SAAS,CAAC,EAAG,CAClCmC,EAAO/C,EACPxP,EAAMJ,EAAS4P,GAAGzP,OAAOC,IACzBC,EAAML,EAAS4P,GAAGzP,OAAOE,IACzB,KACF,CAEF,GAAa,YAATsS,EAAoB,KAC1B,CACAjQ,EAAMjB,aAAa,eAAgBkR,CAAI,EACjCxL,EAASrO,EAAMgJ,MAAM,EAAE,EAAEyB,IAAI6D,MAAM,EACzC,MAAID,EAAAA,EAAOhH,OAASC,GAAO+G,EAAOhH,OAASE,IACnB,IAAjBoH,EAAKN,CAAM,CACpB,EACAlD,eAAgBpI,EAASsC,gBACzB+F,WAAY,aACd,EAGA/E,EAAcC,WAAgB,IAAI,CAChCuB,KAAM,MACN8B,kBAAmB,SAAU3J,EAAOwB,EAAMoI,EAAO3J,EAASgB,GACxD,MAAI,CAAA,KAAK4H,KAAK7I,CAAK,GAEG,MADhBwT,EAAS5J,EAAMtB,aAAa,gBAAgB,GAAK,IAC5CkB,KAAK,GAEXwQ,CAAAA,EADCA,EAAatN,SAAS2J,cAAc7C,CAAM,GAAGlL,aAAa,cAAc,KAE3D,YAAf0R,EACK9S,EAAS8S,GAAYxS,MAAQxH,EAAMqH,OAEnCrH,EAAMqH,OAAS,GAAoB,EAAfrH,EAAMqH,OAErC,EACA8D,eAAgBpI,EAASuC,QACzB8F,WAAY,KACd,QAy9BMlK,EACJ+Y,YAAYC,EAAKjZ,GACfrB,KAAKua,KAAO9T,EACZzG,KAAKua,KAAKpX,SAAW,CACnB,GAAGA,EACH,GAAG9B,CACL,EACArB,KAAKsa,IAAM,CACT,GAAGja,EACH,GAAGia,CACL,EACAta,KAAKqB,KAAOrB,KAAKua,KAAKpX,QACxB,CAUAqX,aAAaC,EAAO7Y,EAAMoI,EAAO0Q,EAAOra,GACtCqM,IAAIiO,EAAM,GACV,OAAQF,GACN,IAAK,iBACHE,EAAMlU,EAAcK,iBAAiBkD,EAAM/B,MAC3C,MACF,IAAK,QACH0S,EAAMlU,EAAcM,QAAQiD,EAAM/B,MAClC,MACF,IAAK,UACH0S,EAAMlU,EAAcO,UAAUgD,EAAM/B,MACpC,MACF,IAAK,gBACH0S,EAAMlU,EAAcQ,gBAAgB+C,EAAM/B,KAE9C,CACI0S,GAAKA,EAAItL,QAAQuL,IACnBA,EAAGhZ,EAAMoI,EAAO0Q,EAAOra,CAAO,CAChC,CAAC,CACH,CAWAwa,cAAc7Q,EAAOpI,EAAMvB,EAASya,EAAQL,GAC1Cza,KAAKwa,aAAa,iBAAkB5Y,EAAMoI,EAAO,CAAA,EAAO3J,CAAO,EAC/D,IAGW+X,EAHL2C,EAAO/a,KAAKgb,qBAAqBhR,EAAO3J,EAASya,CAAM,EAC3D1a,EAAQ4J,EAAM5J,MACdoY,EAAgB,GAClB,IAAWJ,KAAa2C,EAAM,CAC5B,GAAID,EAAOpU,WAAW0R,GAAY,CAChC,GAAa,SAATqC,GAAoB,EAAEK,EAAOpU,WAAW0R,GAAWhW,iBAAmB/B,EAAQ+B,iBAAkB,SACpG,IAAMwL,EAAIkN,EAAOpU,WAAW0R,GAAWrO,kBAAkB3J,EAAOwB,EAAMoI,EAAO3J,EAASL,KAAKqB,IAAI,EAC3FuM,EAAG5N,KAAKwa,aAAa,QAAS5Y,EAAMoI,EAAO,CAAA,EAAM3J,CAAO,EAAOL,KAAKwa,aAAa,UAAW5Y,EAAMoI,EAAO,CAAA,EAAO3J,CAAO,EAC3HmY,EAAcjK,KAAKX,CAAC,EACpBqL,EAAajP,EAAOpI,EAAMvB,CAAO,EACjCkY,EAAUvO,EAAOpI,EAAMvB,EAASuN,CAAC,EACjCgM,EAAW5P,EAAOpI,EAAMvB,EAASya,EAAQ9a,KAAKqB,KAAMuM,EAAGkN,EAAOpU,WAAW0R,EAAU,CACrF,MACE6C,QAAQC,yDAAyD9C,sBAA8B,EAEjG,GAAII,EAAc7N,SAAS,CAAA,CAAK,EAAG,KACrC,CAEA,OADA3K,KAAKwa,aAAa,gBAAiB5Y,EAAMoI,EAAO,CAACwO,EAAc7N,SAAS,CAAA,CAAK,EAAGtK,CAAO,EAChF,CAACmY,EAAc7N,SAAS,CAAA,CAAK,CACtC,CAWAwQ,yBAAyBnR,EAAOpI,EAAMvB,EAASya,EAAQL,GACrDza,KAAKwa,aAAa,iBAAkB5Y,EAAMoI,EAAO,CAAA,EAAO3J,CAAO,EAC/D,IAGW+X,EAHL2C,EAAO/a,KAAKob,sBAAsBpR,EAAO3J,EAASya,CAAM,EAC5D1a,EAAQ4J,EAAM5J,MACVoY,EAAgB,GACtB,IAAWJ,KAAa2C,EAAM,CAC5B,GAAID,EAAOnU,gBAAgByR,GAAY,CACrC,GAAa,SAATqC,GAAoB,EAAEK,EAAOnU,gBAAgByR,GAAWhW,iBAAmB/B,EAAQ+B,iBAAkB,SACzG,IAAMwL,EAAIyC,MAAMyK,EAAOnU,gBAAgByR,GAAWrO,kBAAkB3J,EAAOwB,EAAMoI,EAAO3J,EAASL,KAAKqB,IAAI,EACtGuM,EAAG5N,KAAKwa,aAAa,QAAS5Y,EAAMoI,EAAO,CAAA,EAAM3J,CAAO,EAAOL,KAAKwa,aAAa,UAAW5Y,EAAMoI,EAAO,CAAA,EAAO3J,CAAO,EAC3HmY,EAAcjK,KAAKX,CAAC,EACpBqL,EAAajP,EAAOpI,EAAMvB,CAAO,EACjCkY,EAAUvO,EAAOpI,EAAMvB,EAASuN,CAAC,EACjCgM,EAAW5P,EAAOpI,EAAMvB,EAASya,EAAQ9a,KAAKqB,KAAMuM,EAAGkN,EAAOnU,gBAAgByR,EAAU,CAC1F,MACE6C,QAAQC,yDAAyD9C,sBAA8B,EAEjG,GAAII,EAAc7N,SAAS,CAAA,CAAK,EAAG,KACrC,CAEA,OADA3K,KAAKwa,aAAa,gBAAiB5Y,EAAMoI,EAAO,CAACwO,EAAc7N,SAAS,CAAA,CAAK,EAAGtK,CAAO,EAChF,CAACmY,EAAc7N,SAAS,CAAA,CAAK,CACtC,CAWA0Q,kBAAkBzZ,EAAMkR,EAAKzS,EAASya,EAAQL,GAC5C,IAAMa,EAAS1Z,EAAKyK,gDAAgDyG,IAAM,EACxEyI,EAAQ,GAKV,OAJAD,EAAOjM,QAAQrF,IACThK,KAAKwb,wBAAwBxR,EAAO,SAAU3J,CAAO,GAAGkb,EAAMhN,KAAKvO,KAAK6a,cAAc7Q,EAAOpI,EAAMvB,EAASya,EAAQL,CAAK,CAAC,CAChI,CAAC,EACmB,GAAhBc,EAAM9T,QAAa8T,EAAMhN,KAAK,CAAA,CAAI,EAC/B,CAACgN,EAAM5Q,SAAS,CAAA,CAAK,CAC9B,CAWA8Q,6BAA6B7Z,EAAMkR,EAAKzS,EAASya,EAAQL,GACvD,IAEWiB,EAFLJ,EAAS1Z,EAAKyK,gDAAgDyG,IAAM,EACxEyI,EAAQ,GACV,IAAWG,KAAW/L,MAAMC,KAAK0L,CAAM,EAAG,CACxC,IAAMtR,EAAQ0R,EACV1b,KAAKwb,wBAAwBxR,EAAO,SAAU3J,CAAO,GAAGkb,EAAMhN,KAAK8B,MAAMrQ,KAAKmb,mBAAmBnR,EAAOpI,EAAMvB,EAASya,EAAQL,CAAK,CAAC,CAC3I,CAEA,OADoB,GAAhBc,EAAM9T,QAAa8T,EAAMhN,KAAK,CAAA,CAAI,EAC/B,CAACgN,EAAM5Q,SAAS,CAAA,CAAK,CAC9B,CAUAgR,YAAY3R,EAAOpI,EAAM6Y,EAAOpa,EAASya,GACvC,IAAMc,EAAgB5R,EAAMtB,aAAarI,EAAQyB,oBAAoB,EAErE,GADkBkI,aAAiBmC,kBAAoB,CAAC,CAAC,SAAU,WAAY,QAAS,QAAQxB,SAASX,EAAMoC,IAAI,GAAKpC,aAAiB6R,oBACzI,CACA,IAEWC,EAFLf,EAAQa,EAAqBA,EAAcxS,MAAM,eAAe,EAAxC,GAC9BsD,IAAItM,EAAQ4J,EAAM5J,MAClB,IAAW0b,KAAYf,EACjBD,EAAOlU,UAAUkV,GACN,SAATrB,GAAqB,EAACK,EAAOlU,UAAUkV,GAAU3Z,eAAiB9B,EAAQ8B,iBAC9E/B,EAAQ0a,EAAOlU,UAAUkV,GAAU5T,iBAAiB9H,EAAOwB,EAAMoI,EAAO3J,EAASL,KAAKqB,IAAI,GAE1F4Z,QAAQC,wDAAwDY,sBAA6B,EAGjG9R,EAAM5J,MAAQA,CAXY,CAY5B,CASA2b,uBAAuBna,EAAMoI,EAAO3J,EAASya,GAC3C,IAAMkB,EAAYhS,EAAMtB,aAAa,oBAAoB,EACzD,GAAKsT,EAAL,CACA,IAAMpI,EAAShS,EAAK6U,uBAAuBuF,IAAY,EACvD,GAAIpI,EAAQ,CACV5J,EAAMjB,aAAa,eAAgB,MAAM,EACzC,IAAMrC,EAAasD,EAAMtB,aAAarI,EAAQ0B,sBAAsB,GAAK,GAGnEka,GAFDvV,EAAWiE,SAAS,UAAU,GAAGX,EAAMjB,aAAa1I,EAAQ0B,uBAAwB2E,EAAa,UAAU,EAChHkN,EAAO7K,aAAa,oBAAqBiT,CAAS,EACnChS,aAAiB+C,kBAAoB,SAAW,SAC/D,IAAM3M,EAAQ4J,EAAMtB,aAAa,0BAA0B,GAAK,GAW1DwT,GAVNlS,EAAMhB,iBAAiBiT,EAAQ,WAC7BjS,EAAMjB,aAAa,eAAgB,MAAM,EACzCkQ,EAAajP,EAAOpI,EAAMvB,CAAO,EACjCsZ,EAAqB3P,EAAOA,EAAMpI,IAAI,EAClCkZ,EAAO5T,cAActF,EAAK4U,IAAIxM,EAAM/B,OAAO,OAAO6S,EAAO5T,cAActF,EAAK4U,IAAIxM,EAAM/B,MACtF6S,EAAO3T,gBAAgBvF,EAAK4U,IAAIxM,EAAM/B,OAAO,OAAO6S,EAAO3T,gBAAgBvF,EAAK4U,IAAIxM,EAAM/B,MAC9F6E,SAAS2J,kBAAkBpW,EAAQS,2BAA2BkJ,EAAM/B,OAAO,GAAGgP,OAAO,EACpD,EAA7BrD,EAAOxT,MAAMwJ,KAAK,EAAEnC,QAAYuC,EAAMjB,aAAa,eAAgB,OAAO,EAC3D,EAAf3I,EAAMqH,QAAgBrH,GAASwT,EAAOxT,OAAO4J,EAAMjB,aAAa,eAAgB,MAAM,CAC5F,CAAC,EACciB,aAAiB+C,kBAAoB,SAAW,SACzDoP,EAAQnc,KACd4T,EAAO5K,iBAAiBkT,EAAQ,WAC9BjD,EAAajP,EAAOpI,EAAMvB,CAAO,EACjCsZ,EAAqB3P,EAAOA,EAAMpI,IAAI,EAClCkZ,EAAO5T,cAActF,EAAK4U,IAAIxM,EAAM/B,OAAO,OAAO6S,EAAO5T,cAActF,EAAK4U,IAAIxM,EAAM/B,MACtF6S,EAAO3T,gBAAgBvF,EAAK4U,IAAIxM,EAAM/B,OAAO,OAAO6S,EAAO3T,gBAAgBvF,EAAK4U,IAAIxM,EAAM/B,MAC9F6E,SAAS2J,kBAAkBpW,EAAQS,2BAA2BkJ,EAAM/B,OAAO,GAAGgP,OAAO,GACjFjN,EAAMsK,UAAU8H,SAAS/b,EAAQI,UAAU,GAAKuJ,EAAMsK,UAAU8H,SAAS/b,EAAQK,YAAY,IAAGyb,EAAMtB,cAAc7Q,EAAOpI,EAAMvB,EAASya,EAAQoB,CAAM,CAC9J,CAAC,CACH,MACEjB,QAAQC,kEAAkElR,EAAM/B,0BAA0B+T,qBAA6B,CA9BnH,CAgCxB,CASAK,sBAAsBza,EAAMoI,EAAO3J,EAASya,GAC1C,IAMQL,EANJzQ,EAAMlB,aAAa,oBAAoB,GAE3B,SADCkB,EAAMtB,aAAa,kBAAkB,GAAK,MAEzDsB,EAAMjB,aAAa,eAAgB,MAAM,GACnCrC,EAAasD,EAAMtB,aAAarI,EAAQ0B,sBAAsB,GAAK,IACzD4I,SAAS,UAAU,GAAGX,EAAMjB,aAAa1I,EAAQ0B,uBAAwB2E,EAAa,UAAU,EAC1G+T,EAAQzQ,aAAiB+C,kBAAoB,SAAW,QAC9D/C,EAAMhB,iBAAiByR,EAAO,WACI,EAA5BzQ,EAAM5J,MAAMwJ,KAAK,EAAEnC,OAAYuC,EAAMjB,aAAa,eAAgB,OAAO,GAC3EiB,EAAMjB,aAAa,eAAgB,MAAM,EACzCkQ,EAAajP,EAAOpI,EAAMvB,CAAO,EACjCsZ,EAAqB3P,EAAOA,EAAMpI,IAAI,EAClCkZ,EAAO5T,cAActF,EAAK4U,IAAIxM,EAAM/B,OAAO,OAAO6S,EAAO5T,cAActF,EAAK4U,IAAIxM,EAAM/B,MACtF6S,EAAO3T,gBAAgBvF,EAAK4U,IAAIxM,EAAM/B,OAAO,OAAO6S,EAAO3T,gBAAgBvF,EAAK4U,IAAIxM,EAAM/B,MAC9F6E,SAAS2J,kBAAkBpW,EAAQS,2BAA2BkJ,EAAM/B,OAAO,GAAGgP,OAAO,EAEzF,CAAC,EAEL,CASAuE,wBAAwBxR,EAAOyQ,EAAOpa,GACpC,IAAMic,EAAYtS,EAAMtB,aAAa,iBAAiB,GAAK,QACrD6T,EAAYvS,EAAMtB,aAAa,cAAc,GAAK,QACxD,GAAiB,QAAb4T,GAAoC,QAAbC,EAAqB,MAAO,CAAA,EACvD,IAAMC,EAAiBxS,aAAiBmC,kBAAoB,CAAC,WAAY,SAASxB,SAASX,EAAMoC,IAAI,EACrGM,IAAI+P,EAAW,CAAA,EACf,OAAQhC,GACN,IAAK,QACC+B,GAAkBnc,EAAQiC,+BAA8Bma,EAAW,CAAA,GACvE,MACF,IAAK,OACCpc,EAAQgC,iBAAgBoa,EAAW,CAAA,GACvC,MACF,QACEA,EAAW,CAAA,CAEf,CACA,OAAOA,CACT,CAQAC,kBAAkB9a,EAAMoI,EAAO3J,GAC7B,IAjlBA4H,EAilBM0U,EAAiB/a,EAAKyK,iBAAiBsG,EAAU,CAAA,EAAO,CAAA,CAAK,CAAC,EAChE3I,aAAiBmC,kBAAoBwD,MAAMC,KAAK+M,CAAc,EAAEhS,SAASX,CAAK,IAC9EA,aAAiBmC,mBACf9L,EAAQmC,iBACJoa,EAAc5S,EAAMtB,aAAarI,EAAQwC,mBAAmB,GAAK,GACvE2S,EAAgBxL,EAAO4S,EAAYxT,MAAM,eAAe,EAAG/I,EAAQoC,gBAAgB,GAEjFpC,EAAQ4C,kBACVqU,EAAatN,EAAO3J,CAAO,EAG3B2J,aAAiB6R,sBACbgB,EAAc7S,EAAMtB,aAAarI,EAAQyC,uBAAuB,IACrDmR,EAA0BjK,EAAOnB,SAASgU,EAAa,EAAE,EAAGxc,EAAQ0C,kBAAkB,EAErG1C,EAAQkC,0BACJ0Q,EAAUjJ,EAAMtB,aAAarI,EAAQ6B,yBAAyB,KAnmBhD8H,EAqmBDA,EArmBQiJ,EAqmBDA,EApmBxBkG,EAAOrM,SAASuH,cAAc,MAAM,EACxCpM,EAAO+B,EAAMtB,aAAa,MAAM,KAElCyQ,EAAK7E,UAAUC,IAAI,iBAAiB,EACpC4E,EAAKpQ,aAAa,MAAOd,CAAI,EAC7BkR,EAAKE,YAAcpG,EACnBkG,EAAK1P,MAAM2M,QAAU,QACjBpM,EAAMlB,aAAa,qBAAqB,EAC/BgE,SAAS2J,kDAAkDzM,EAAMwM,MAAM,EAEzExM,EAAMlB,aAAa,uBAAuB,EACxCgE,SAAS2J,cAAc,4BAA4BzM,EAAMwM,EAAI,EAEnExM,GAJFqN,MAAM8B,CAAI,GA8lBf,CAQA2D,YAAYlb,EAAMoI,EAAO3J,GACjBsc,EAAiB/a,EAAKyK,iBAAiBsG,EAAU,CAAA,EAAO,CAAA,CAAK,CAAC,EACpE,GAAI3I,EAAAA,aAAiBmC,kBAAoBwD,MAAMC,KAAK+M,CAAc,EAAEhS,SAASX,CAAK,GAAlF,CACA0C,IAAIqO,EAAO,GACL9S,EAAO+B,EAAMtB,aAAa,MAAM,GAAK,GACvCiH,MAAMoN,QAAQ1c,EAAQC,kBAAkB,EAC1Cya,EAAO1a,EAAQC,mBAC+B,UAArC,OAAOD,EAAQC,qBACxBya,EAAO1a,EAAQC,mBAAmB8I,MAAM,eAAe,GAEhC,CAAC,EAAtB2R,EAAK7P,QAAQjD,CAAI,EACnB+B,EAAMjB,aAAa,kBAAmB,MAAM,EAE5CiB,EAAMjB,aAAa,kBAAmB,OAAO,EAE/CiB,EAAMjB,aAAa,eAAgB,OAAO,CAbiD,CAc7F,CASAqS,sBAAsBpR,EAAO3J,EAASya,GACpC,IAAMnU,EAAkBzG,OAAOia,KAAKW,EAAOnU,eAAe,EACxDqW,EAAiBhT,EAAMtB,aAAarI,EAAQ0B,sBAAsB,EAClEgZ,EAAQiC,EAAsBA,EAAe5T,MAAM,eAAe,EAAzC,GAC3B,OAAOzC,EAAgBqK,OAAOiM,GAAkBlC,EAAKpQ,SAASsS,CAAc,CAAC,CAC/E,CASAjC,qBAAqBhR,EAAO3J,EAASya,GACnC,IAAMoC,EAAiBhd,OAAOia,KAAKW,EAAOpU,UAAU,EAClDsW,EAAiBhT,EAAMtB,aAAarI,EAAQ0B,sBAAsB,EAClEgZ,EAAQiC,EAAsBA,EAAe5T,MAAM,eAAe,EAAzC,GAC3B,OAAO8T,EAAelM,OAAOmM,GAAiBpC,EAAKpQ,SAASwS,CAAa,CAAC,CAC5E,CASAC,8BAA8Bxb,EAAMoI,EAAO3J,EAASya,GAClD,IAAM6B,EAAiB/a,EAAKyK,iBAAiBsG,EAAUtS,EAAQmB,qBAAsB,CAAA,CAAK,CAAC,EACvFwI,aAAiBmC,kBAAoBwD,MAAMC,KAAK+M,CAAc,EAAEhS,SAASX,CAAK,IAClFA,EAAMhB,iBAAiB,QAAS,KAC9B8Q,EAAkB9P,EAAOpI,EAAMvB,EAAS,CAAA,CAAI,CAC9C,CAAC,EACD2J,EAAMhB,iBAAiB,QAASgH,UAC9B8J,EAAkB9P,EAAOpI,EAAMvB,EAAS,CAAA,CAAI,EACxCL,KAAKwb,wBAAwBxR,EAAO,QAAS3J,CAAO,GACjDL,KAAK6a,cAAc7Q,EAAOpI,EAAMvB,EAASya,EAAQ,OAAO,GAC7DzK,MAAMrQ,KAAKmb,mBAAmBnR,EAAOpI,EAAMvB,EAASya,EAAQ,OAAO,CAEvE,CAAC,EACD9Q,EAAMhB,iBAAiB,OAAQgH,UAC7B8J,EAAkB9P,EAAOpI,EAAMvB,EAAS,CAAA,CAAK,GACzC2J,aAAiBmC,kBAAoBnC,aAAiB6R,sBAAqB7b,KAAK2b,YAAY3R,EAAOpI,EAAM,OAAQvB,EAASya,CAAM,EAChI9a,KAAKwb,wBAAwBxR,EAAO,OAAQ3J,CAAO,GAChDL,KAAK6a,cAAc7Q,EAAOpI,EAAMvB,EAASya,EAAQ,MAAM,GAC5DzK,MAAMrQ,KAAKmb,mBAAmBnR,EAAOpI,EAAMvB,EAASya,EAAQ,MAAM,CAEtE,CAAC,EACD9Q,EAAMhB,iBAAiB,QAASgH,WAC1BhG,aAAiBmC,kBAAoBnC,aAAiB6R,sBAAqB7b,KAAK2b,YAAY3R,EAAOpI,EAAM,QAASvB,EAASya,CAAM,EACjI9a,KAAKwb,wBAAwBxR,EAAO,QAAS3J,CAAO,GACjDL,KAAK6a,cAAc7Q,EAAOpI,EAAMvB,EAASya,EAAQ,OAAO,GAC7DzK,MAAMrQ,KAAKmb,mBAAmBnR,EAAOpI,EAAMvB,EAASya,EAAQ,OAAO,CAEvE,CAAC,EACG9Q,aAAiB+C,mBAAmB/C,EAAMhB,iBAAiB,SAAUgH,UAClEhQ,KAAK6a,cAAc7Q,EAAOpI,EAAMvB,EAASya,EAAQ,QAAQ,GAC9DzK,MAAMrQ,KAAKmb,mBAAmBnR,EAAOpI,EAAMvB,EAASya,EAAQ,QAAQ,CACtE,CAAC,EACH,CAQAuC,wBAAwBzb,EAAMvB,EAASya,GACrClZ,EAAKoH,iBAAiB,SAAgB2K,MAAAA,IACpCA,EAAEkD,eAAe,EACjBnK,IAAIsG,EAAUhT,KAAKqb,kBAAkBzZ,EAAM+Q,EAAUtS,EAAQmB,qBAAsB,CAAA,CAAK,EAAGnB,EAASya,EAAQ,QAAQ,EA7Z1H,IAAkClZ,EAAMvB,EA8Z9B2S,EAAAA,GAAmB3C,MAAMrQ,KAAKyb,uBAAuB7Z,EAAM+Q,EAAUtS,EAAQmB,qBAAsB,CAAA,CAAK,EAAGnB,EAASya,EAAQ,QAAQ,EACxIlZ,EAAKmH,aAAa,cAAeiK,EAAU,YAAc,aAAa,EACjEA,IACC3S,EAAQe,sBAAsBQ,EAAK0b,eAAe,CACpDC,SAAU,QACZ,CAAC,EACD5J,EAAE6J,yBAAyB,GApaD5b,EAsaHA,GAtaSvB,EAsaHA,GAratBkB,oBACEK,EAAKyK,kCAAkChM,EAAQI,gBAAgBJ,EAAQK,6BAA6BL,EAAQI,gBAAgBJ,EAAQK,8BAA8BL,EAAQI,gBAAgBJ,EAAQK,eAAe,EACzN2O,QAAQrF,GAASuO,EAAUvO,EAAOpI,EAAMvB,EAAS,CAAA,CAAI,CAAC,CAoa3D,CAAC,EACDuB,EAAKoH,iBAAiB,QAAS,KAvcnC,IAAmBpH,EAAMvB,EAASoG,EA5DR7E,EA4DDvB,EAwcHA,EAxcYoG,EAwcHqU,GAxcZlZ,EAwcHA,GAvcMyK,iBAAiB,6EAA6E,EAC3GgD,QAAQrF,IACbiP,EAAajP,EAAOpI,EAAMvB,CAAO,EACjCsZ,EAAqB3P,EAAOpI,CAAI,CAClC,CAAC,EAjEuBA,EAkEPA,GAlEa6E,EAkEPA,GAjETS,cAActF,EAAK4U,IAAM,GACvC/P,EAAcU,gBAAgBvF,EAAK4U,IAAM,GACzC5U,EAAKyK,iBAAiB,iDAAiD,EAAEgD,QAAQoO,GAAOA,EAAIxG,OAAO,CAAC,EAkgBhGrV,EAAK8b,gBAAgB,aAAa,CACpC,CAAC,CACH,CAOAC,QAAQtd,EAASya,GACf,IAAMlZ,EAAOvB,EAAQuB,KAAKwH,MAAM,eAAe,EAAEyB,IAAIkO,GAAK,IAAIA,CAAG,EAAEhO,KAAK,GAAG,EAC3E2B,IAAIkR,EAAQ9Q,SAAST,iBAAiBzK,CAAI,GACrCgc,EAAAA,GAAe9Q,SAAST,iBAAiB,MAAM,GAC9CgD,QAAQzN,IACZkZ,EAAO5T,cAActF,EAAK4U,IAAM,GAChCsE,EAAO3T,gBAAgBvF,EAAK4U,IAAM,GAClC5U,EAAK0S,UAAUC,IAAI,IAAI,EACvB3S,EAAKic,WAAa,CAAA,EAClB7d,KAAKqd,wBAAwBzb,EAAMvB,EAASya,CAAM,EACnClZ,EAAKyK,iBAAiB,yBAAyB,EACvDgD,QAAQrF,IACbhK,KAAK0c,kBAAkB9a,EAAMoI,EAAO3J,CAAO,EAC3CL,KAAK8c,YAAYlb,EAAMoI,EAAO3J,CAAO,EACrCL,KAAK+b,uBAAuBna,EAAMoI,EAAO3J,EAASya,CAAM,EACxD9a,KAAKqc,sBAAsBza,EAAMoI,EAAO3J,EAASya,CAAM,EACvD9a,KAAKod,8BAA8Bxb,EAAMoI,EAAO3J,EAASya,CAAM,CACjE,CAAC,CACH,CAAC,CACH,CAQAgD,eAAetV,EAAOiN,EAAOqF,GAC3BpO,IAAI8E,EACJ,GAAI,EAAEhJ,aAAiB2D,kBAAmB,CAExC,GAAIqF,EADJA,EAAI1E,SAAS2J,uBAAuBjO,IAAQ,GAG1C,OADAyS,KAAAA,QAAQC,kEAAkE1S,sBAA0B,EAD/FA,EAAQgJ,CAIjB,CAEAgE,EAAgBhN,EAAOiN,EADlBqF,EAAAA,GAAiBza,EAAQoC,gBACM,CACtC,CAQAsb,6BAA6B7J,EAAUvM,EAAKwM,GAC1CzH,IAAIsR,EACJ,GAAI,EAAE9J,aAAoB2H,qBAAsB,CAE9C,GAAImC,EADJA,EAAIlR,SAAS2J,uBAAuBvC,IAAW,GAG7C,OADA+G,KAAAA,QAAQC,iFAAiFhH,sBAA6B,EADjHA,EAAW8J,CAIpB,CAEK,CAAC,QAAS,OAAQ,aAAarT,SAD/BwJ,EAAAA,GAAa,OAC+B,GACjDF,EAA0BC,EAAUvM,EAAKwM,CAAI,CAC/C,CAMA8J,gBAAgBzV,GACdkE,IAAI8E,EACJ,GAAI,EAAEhJ,aAAiB2D,kBAAmB,CAExC,GAAIqF,EADJA,EAAI1E,SAAS2J,uBAAuBjO,IAAQ,GAG1C,OADAyS,KAAAA,QAAQC,oEAAoE1S,sBAA0B,EADjGA,EAAQgJ,CAIjB,CACA8F,EAAa9O,EAAOnI,CAAO,CAC7B,CAOAoc,SAAS7a,EAAMvB,GACb,IAAMia,EAAM,CACR,GAAGta,KAAKsa,IACR,GAAGja,CACL,EACAka,EAAOva,KAAKua,KACd7N,IAAIqM,EAKFA,EAJGnX,GAImB,GADtBmX,EAAInX,GAAQ,IACNgI,KAAK,EAAEnC,OAAasR,EAHtBuB,EAAI1Y,KAKV0Y,EAAI1Y,KAAOmX,EACX/Y,KAAK2d,QAAQrD,EAAKC,CAAI,CACxB,CAOA2D,SAASC,EAAM9d,GACb,IAAMud,EAAQ1d,OAAOia,KAAKgE,CAAI,EAC9B,GAAoB,GAAhBP,EAAMnW,OAAV,CACA,IAAM2W,EAAMD,EAAK,GACjB,GAAKC,EAAL,CACA,IAAMxc,EAAOkL,SAAS2J,cAAcvW,OAAOia,KAAKgE,CAAI,EAAE,EAAE,EACxD,GAAKvc,EAAL,CAIA,IAMWyc,EANL/D,EAAM,CACR,GAAGta,KAAKsa,IACR,GAAGja,CACL,EACAka,EAAOva,KAAKua,KAEd,IAAW8D,KADX/D,EAAI1Y,KAAO1B,OAAOia,KAAKgE,CAAI,EAAE,GACXC,EAAK,CACrB,IAAMpU,EAAQpI,EAAK6U,cAAc4H,CAAG,EACpC,GAAKrU,EAAL,CAIA,IAGWsU,EAHL5C,EAAU0C,EAAIC,GAGpB,IAAWC,KAFP5C,EAAQhV,YAAYsD,EAAMjB,aAAauR,EAAIvY,uBAAwB2Z,EAAQhV,UAAU,EACrFgV,EAAQ9U,WAAWoD,EAAMjB,aAAauR,EAAIxY,qBAAsB4Z,EAAQ9U,SAAS,EACpE8U,EAAQ6C,OAAQ,CAC/B,IAAMC,EAAO9C,EAAQ6C,OAAOD,GACtBG,EAAQH,EAAG3T,SAAS,UAAU,EAAI2T,EAAK,WAAWA,EACxDtU,EAAMjB,aAAa0V,EAAOD,CAAI,CAChC,CARA,MAFEvD,QAAQC,oEAAoEmD,sBAAwB,CAWxG,CACAre,KAAK2d,QAAQrD,EAAKC,CAAI,CAtBtB,MAFEU,QAAQC,0EAA0Ehb,OAAOia,KAAKgE,CAAI,EAAE,uBAAuB,CAH7G,CAFa,CA8B/B,CAQAO,uBAAuBjE,EAAOzQ,EAAO2U,GACnC,IAAMjD,EAAU5O,SAAS8R,eAAe5U,CAAK,EAC7C,GAAI0R,EACF,OAAQjB,GACN,IAAK,iBACHhU,EAAcK,iBAAiB4U,EAAQzT,MAAMsG,KAAKoQ,CAAa,EAC/D,MACF,IAAK,QACHlY,EAAcM,QAAQ2U,EAAQzT,MAAMsG,KAAKoQ,CAAa,EACtD,MACF,IAAK,UACHlY,EAAcO,UAAU0U,EAAQzT,MAAMsG,KAAKoQ,CAAa,EACxD,MACF,IAAK,gBACHlY,EAAcQ,gBAAgByU,EAAQzT,MAAMsG,KAAKoQ,CAAa,EAC9D,MACF,QACE1D,QAAQC,kDAAkDT,0BAA8B,CAE5F,MAEAQ,QAAQC,mEAAmElR,uBAA2B,CAE1G,CAMA6U,aAAazG,GACElY,OAAOia,KAAKna,KAAKua,KAAK7T,UAAU,EACpCiE,SAASyN,EAAUnQ,IAAI,EAC9BgT,QAAQC,+DAA+D9C,EAAUnQ,0BAA0B,EAG7GjI,KAAKua,KAAK7T,WAAW0R,EAAUnQ,MAAQmQ,CACzC,CAMA0G,kBAAkB1G,GACHlY,OAAOia,KAAKna,KAAKua,KAAK5T,eAAe,EACzCgE,SAASyN,EAAUnQ,IAAI,EAC9BgT,QAAQC,+DAA+D9C,EAAUnQ,0BAA0B,EAG7GjI,KAAKua,KAAK5T,gBAAgByR,EAAUnQ,MAAQmQ,CAC9C,CAMA2G,YAAYjD,GACG5b,OAAOia,KAAKna,KAAKua,KAAK3T,SAAS,EACnC+D,SAASmR,EAAS7T,IAAI,EAC7BgT,QAAQC,8DAA8DY,EAAS7T,0BAA0B,EAG3GjI,KAAKua,KAAK3T,UAAUkV,EAAS7T,MAAQ6T,CACvC,CASAkD,SAASxW,EAAO4D,EAAM6S,EAAQC,GAC5BxS,IAAI8E,EACJ,GAAI,EAAEhJ,aAAiB2D,kBAAmB,CAExC,GAAIqF,EADJA,EAAI1E,SAAS2J,cAAc,IAAIjO,CAAO,GAGpC,OADAyS,KAAAA,QAAQC,gFAAgF1S,sBAA0B,EAD7GA,EAAQgJ,CAIjB,CACIyN,EAAAA,GAAiBnR,EAAamR,CAAM,EACpCC,EAAAA,GAAiBpR,EAAaoR,CAAM,EACxCxS,IAAIyS,EACJ,OAAQ/S,GACN,IAAK,UACH+S,EAAe,IAAI3U,cAAc0U,GAAU,KAAK,EAChD,MACF,IAAK,UACHC,EAAe,IAAI3U,iBAAiB0U,GAAU,KAAK,EACnD,MACF,IAAK,OACHC,EAAe,IAAI3U,gCAAgC0U,GAAU,KAAK,EAClE,MACF,IAAK,OACHC,EAAe,IAAI3U,WAAW0U,GAAU,KAAK,EAC7C,MACF,QACEC,EAAe,KAEnB,CACA,IAAMC,EAAgB,CAAC,UAAW,YAAa,YAAa,aAAc,QAAS,YAAa,SAAU,UAAW,QAAS,WAAY,MAAO,WAAY,OAAQ,MAAO,SAAU,YAChLC,EAAe,IAAI7U,WAAWyU,IAAS,EAC7CzW,EAAMQ,iBAAiB,UAAW,SAAU2K,GACrCyL,EAAczU,SAASgJ,EAAEiD,GAAG,GAAOuI,EAAalW,KAAK0K,EAAEiD,GAAG,GAAKyI,CAAAA,EAAapW,KAAK0K,EAAEiD,GAAG,GAAIjD,EAAEkD,eAAe,CAClH,CAAC,EACDrO,EAAMQ,iBAAiB,QAAS,SAAU2K,GACnCwL,EAAalW,KAAKT,EAAMpI,KAAK,GAAKif,CAAAA,EAAapW,KAAKT,EAAMpI,KAAK,IAAGoI,EAAMpI,MAAQoI,EAAMpI,MAAMiK,QAAQ,IAAIG,YAAY2U,EAAaG,UAAW,GAAG,EAAG,EAAE,GACzJ9W,EAAMpI,MAAQoI,EAAMpI,MAAMiK,QAAQ,IAAIG,WAAW6U,EAAaC,UAAW,GAAG,EAAG,EAAE,CACnF,CAAC,CACH,CACF,CAYF,CAAC"}